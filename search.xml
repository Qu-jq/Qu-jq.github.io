<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>说明</title>
    <url>/2020/11/17/%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>年后2月份到现在，博主一直深受干眼症的痛苦，故一直没有更新博客，还望大家见谅。现在刚有些好转，就在这里给大家说一声，抱歉。</p>
<a id="more"></a>



]]></content>
      <categories>
        <category>说明</category>
      </categories>
      <tags>
        <tag>说明</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter&amp;Listener</title>
    <url>/2020/02/23/Filter&amp;Listener/</url>
    <content><![CDATA[<p>JavaWeb的三个核心：Servlet，Filter，Listener</p>
<a id="more"></a> 

<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol>
<li>Filter：过滤器</li>
<li>Listener：监听器</li>
</ol>
<h1 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><ul>
<li>生活中的过滤器：净水器,空气净化器，土匪、</li>
<li>web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</li>
<li>过滤器的作用：<ul>
<li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤…</li>
</ul>
</li>
</ul>
<h2 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2. 快速入门："></a>2. 快速入门：</h2><ol>
<li>步骤：<ol>
<li>定义一个类，实现接口Filter</li>
<li>复写方法</li>
<li>配置拦截路径<ol>
<li>web.xml</li>
<li>注解</li>
</ol>
</li>
</ol>
</li>
<li>代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter初识</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/22 21:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)<span class="comment">/*全部过滤*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo01</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//拦截操作</span></span><br><span class="line">        System.out.println(<span class="string">"你被拦截啦！！！！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//全部放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-过滤器细节："><a href="#3-过滤器细节：" class="headerlink" title="3. 过滤器细节："></a>3. 过滤器细节：</h2><h3 id="1-web-xml配置"><a href="#1-web-xml配置" class="headerlink" title="1. web.xml配置"></a>1. web.xml配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="2-过滤器执行流程"><a href="#2-过滤器执行流程" class="headerlink" title="2.过滤器执行流程"></a>2.过滤器执行流程</h3><ol>
<li>执行过滤器</li>
<li>执行放行后的资源</li>
<li>回来执行过滤器放行代码下边的代码<h3 id="3-过滤器生命周期方法"><a href="#3-过滤器生命周期方法" class="headerlink" title="3.过滤器生命周期方法"></a>3.过滤器生命周期方法</h3></li>
<li>init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</li>
<li>doFilter:每一次请求被拦截资源时，会执行。执行多次</li>
<li>destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源<h3 id="4-过滤器配置详解"><a href="#4-过滤器配置详解" class="headerlink" title="4.过滤器配置详解"></a>4.过滤器配置详解</h3><h4 id="拦截路径配置："><a href="#拦截路径配置：" class="headerlink" title="拦截路径配置："></a>拦截路径配置：</h4></li>
<li>具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行</li>
<li>拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行</li>
<li>后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行</li>
<li>拦截所有资源：/*        访问所有资源时，过滤器都会被执行<h4 id="拦截方式配置：资源被访问的方式"><a href="#拦截方式配置：资源被访问的方式" class="headerlink" title="拦截方式配置：资源被访问的方式"></a>拦截方式配置：资源被访问的方式</h4></li>
</ol>
<ul>
<li>注解配置：<ul>
<li>设置dispatcherTypes属性<ol>
<li>REQUEST：默认值。浏览器直接请求资源</li>
<li>FORWARD：转发访问资源</li>
<li>INCLUDE：包含访问资源</li>
<li>ERROR：错误跳转资源</li>
<li>ASYNC：异步访问资源</li>
</ol>
</li>
</ul>
</li>
<li>web.xml配置<ul>
<li>设置&lt;dispatcher&gt;&lt;/dispatcher&gt;标签即可</li>
</ul>
</li>
<li>拦截方式代码：</li>
</ul>
<p>拦截器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浏览器直接访问jsp后缀的文件时，就会被拦截</span></span><br><span class="line"><span class="comment">//@WebFilter(value = "*.jsp",dispatcherTypes = DispatcherType.REQUEST)</span></span><br><span class="line"><span class="comment">//浏览器转发访问jsp后缀的文件时，就会被拦截</span></span><br><span class="line"><span class="comment">//@WebFilter(value = "*.jsp",dispatcherTypes = DispatcherType.FORWARD)</span></span><br><span class="line"><span class="comment">//当访问servlet01，被拦截了两次</span></span><br><span class="line"><span class="comment">//@WebFilter(value = "/*",dispatcherTypes = &#123;DispatcherType.FORWARD,DispatcherType.REQUEST&#125;)</span></span><br><span class="line"><span class="comment">//当访问servlet01，被拦截了一次</span></span><br><span class="line"><span class="meta">@WebFilter</span>(value = <span class="string">"/*"</span>,dispatcherTypes = DispatcherType.FORWARD)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo03</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//拦截操作</span></span><br><span class="line">        System.out.println(<span class="string">"你被拦截啦！！！！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//全部放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求代码：（设置转发到index.jsp）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/servlet01"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这里是servlet01...."</span>);</span><br><span class="line">        <span class="comment">//转发请求到index.jsp</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-过滤器链-配置多个过滤器"><a href="#5-过滤器链-配置多个过滤器" class="headerlink" title="5. 过滤器链(配置多个过滤器)"></a>5. 过滤器链(配置多个过滤器)</h3><ul>
<li><p>执行顺序：如果有两个过滤器：过滤器1和过滤器2</p>
<ol>
<li>过滤器1</li>
<li>过滤器2</li>
<li>资源执行</li>
<li>过滤器2</li>
<li>过滤器1 </li>
</ol>
</li>
<li><p>过滤器先后顺序问题：</p>
<ol>
<li>注解配置：按照类名的字符串比较规则比较，值小的先执行<ul>
<li>如： AFilter 和 BFilter，AFilter就先执行了。</li>
</ul>
</li>
<li>web.xml配置： &lt;filter-mapping&gt;谁定义在上边，谁先执行</li>
</ol>
</li>
</ul>
<h2 id="4-案例："><a href="#4-案例：" class="headerlink" title="4.  案例："></a>4.  案例：</h2><h3 id="1-案例1-登录验证"><a href="#1-案例1-登录验证" class="headerlink" title="1. 案例1_登录验证"></a>1. 案例1_登录验证</h3><ul>
<li>需求：<ol>
<li>访问day17_case案例的资源。验证其是否登录</li>
<li>如果登录了，则直接放行。</li>
<li>如果没有登录，则跳转到登录页面，提示”您尚未登录，请先登录”。</li>
</ol>
</li>
</ul>
<h3 id="2-案例2-敏感词汇过滤"><a href="#2-案例2-敏感词汇过滤" class="headerlink" title="2. 案例2_敏感词汇过滤"></a>2. 案例2_敏感词汇过滤</h3><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><ol>
<li><p>对day17_case案例录入的数据进行敏感词汇过滤</p>
</li>
<li><p>敏感词汇参考《敏感词汇.txt》</p>
</li>
<li><p>如果是敏感词汇，替换为 *** </p>
<p>(通过request的getParameter获取词汇，如果是敏感词汇，这时需要替换为***，然而没有setParameter方法，这时就需要新的Request对象)</p>
</li>
</ol>
<h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ol>
<li>对request对象进行增强。增强获取参数相关方法（使用动态代理）</li>
<li>放行。传递代理对象<h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><h3 id="概念：web的三大组件之一。"><a href="#概念：web的三大组件之一。" class="headerlink" title="概念：web的三大组件之一。"></a>概念：web的三大组件之一。</h3></li>
</ol>
<ul>
<li>事件监听机制<ul>
<li>事件    ：一件事情</li>
<li>事件源 ：事件发生的地方</li>
<li>监听器 ：一个对象</li>
<li>注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码</li>
</ul>
</li>
</ul>
<h3 id="ServletContextListener-监听ServletContext对象的创建和销毁"><a href="#ServletContextListener-监听ServletContext对象的创建和销毁" class="headerlink" title="ServletContextListener:监听ServletContext对象的创建和销毁"></a>ServletContextListener:监听ServletContext对象的创建和销毁</h3><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ul>
<li>void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法</li>
<li>void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4></li>
</ul>
<ol>
<li><p>定义一个类，实现ServletContextListener接口</p>
</li>
<li><p>复写方法</p>
</li>
<li><p>配置</p>
<ol>
<li><p>web.xml</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">         <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.itcast.web.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>指定初始化参数&lt;context-param&gt;</li>
</ul>
</li>
<li><p>注解：</p>
<ul>
<li>@WebListener</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaWEB</category>
      </categories>
      <tags>
        <tag>JavaWEB</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/02/23/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p> 学习Spring框架时，遇到动态代理，就将代理模式整理一下</p>
<a id="more"></a> 

<h1 id="1-什么是设计模式？"><a href="#1-什么是设计模式？" class="headerlink" title="1. 什么是设计模式？"></a>1. 什么是设计模式？</h1><ul>
<li>设计模式：一些通用的解决固定问题的方式</li>
</ul>
<h1 id="2-为什么需要代理模式？"><a href="#2-为什么需要代理模式？" class="headerlink" title="2. 为什么需要代理模式？"></a>2. 为什么需要代理模式？</h1><p><strong>可以在不修改别代理对象代码的基础上，通过扩展代理类，进行一些功能的附加与增强。</strong></p>
<h1 id="3-什么是代理模式"><a href="#3-什么是代理模式" class="headerlink" title="3. 什么是代理模式"></a>3. 什么是代理模式</h1><p>代理模式作为23种经典设计模式之一，其比较官方的定义为“为其他对象提供一种代理以控制对这个对象的访问”，简单点说就是，之前A类自己做一件事，在使用代理之后，A类不直接去做，而是由A类的代理类B来去做。代理类其实是在之前类的基础上做了一层封装。java中有静态代理、JDK动态代理、CGLib动态代理的方式。静态代理指的是代理类是在编译期就存在的，相反动态代理则是在程序运行期动态生成的。</p>
<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><ol>
<li>真实对象：被代理的对象</li>
<li>代理对象：增强真实对象</li>
<li>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</li>
</ol>
<h1 id="4-实现方式"><a href="#4-实现方式" class="headerlink" title="4. 实现方式"></a>4. 实现方式</h1><h2 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h2><p>有一个类文件描述代理模式</p>
<h3 id="1）实现步骤："><a href="#1）实现步骤：" class="headerlink" title="1）实现步骤："></a>1）实现步骤：</h3><ol>
<li>代理对象与真实对象实现相同的接口</li>
<li>代理对象中创建真实对象</li>
<li>使用真实对象调用方法</li>
<li>增强方法</li>
</ol>
<h3 id="2）具体实例"><a href="#2）具体实例" class="headerlink" title="2）具体实例"></a>2）具体实例</h3><p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.staticProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类和被代理的接口</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SaleComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被代理类（联想电脑厂商）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.staticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> site.qujq.proxy.SaleComputer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联想电脑厂商</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 10:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> <span class="keyword">implements</span> <span class="title">SaleComputer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖出一台电脑，价值："</span>+money);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"联想电脑"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"展示电脑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理类（经销商）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.staticProxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理 / 经销商</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 10:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> <span class="keyword">implements</span> <span class="title">SaleComputer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 真实对象 / 被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Lenovo factory = <span class="keyword">new</span> Lenovo();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        money = money*<span class="number">0.8</span>;<span class="comment">//经销商从联想买电脑的价格</span></span><br><span class="line">        String product = factory.sale(<span class="number">8000</span>);<span class="comment">//得到的产品</span></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        factory.show();<span class="comment">//展示的产品</span></span><br><span class="line">        System.out.println(<span class="string">"小新pro13"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ThinkPad"</span>);</span><br><span class="line">        System.out.println(<span class="string">"...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在不使用代理的情况下测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.staticProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 13:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lenovo factory = <span class="keyword">new</span> Lenovo();</span><br><span class="line">        factory.sale(<span class="number">8000</span>);<span class="comment">//相当于工厂直销</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        factory.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">卖出一台电脑，价值：8000.0</span><br><span class="line">---------------</span><br><span class="line">展示电脑</span><br></pre></td></tr></table></figure>

<p>使用代理的情况下进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.staticProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用静态代理测试</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 13:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StaticProxy staticProxy = <span class="keyword">new</span> StaticProxy();</span><br><span class="line">        String product = staticProxy.sale(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">"得到的产品："</span>+product);</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line">        staticProxy.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">卖出一台电脑，价值：8000.0</span><br><span class="line">得到的产品：联想电脑</span><br><span class="line">-------------</span><br><span class="line">展示电脑</span><br><span class="line">小新pro13</span><br><span class="line">ThinkPad</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>对比，使用静态代理和不使用静态代理，可以发现使用了代理之后，可以在被代理方法的执行前或后加入别的代码，实现诸如权限及日志的操作。</p>
<p>但，静态代理也存在一定的问题，如果被代理方法很多，就要为每个方法进行代理，增加了代码维护的成本。有没有其他的方式可以减少代码的维护，那就是动态代理。</p>
<h2 id="2-JDK动态代理"><a href="#2-JDK动态代理" class="headerlink" title="2. JDK动态代理"></a>2. JDK动态代理</h2><p>在内存中形成代理类</p>
<ul>
<li><p>特点：字节码随用随创建，随用随加载</p>
</li>
<li><p>作用：不修改源码的基础上对方法增强</p>
</li>
<li><p>分类：</p>
<ul>
<li>基于接口的动态代理（本节）</li>
<li>基于子类的动态代理（下一小节）</li>
</ul>
</li>
</ul>
<h3 id="1）-实现步骤："><a href="#1）-实现步骤：" class="headerlink" title="1） 实现步骤："></a>1） 实现步骤：</h3><ol>
<li>代理对象和真实对象实现相同的接口</li>
<li>代理对象 = Proxy.newProxyInstance();</li>
<li>使用代理对象调用方法。</li>
<li>增强方法</li>
</ol>
<h3 id="2）增强方式："><a href="#2）增强方式：" class="headerlink" title="2）增强方式："></a>2）增强方式：</h3><ol>
<li>增强参数列表</li>
<li>增强返回值类型</li>
<li>增强方法体执行逻辑</li>
</ol>
<h3 id="3）具体实现"><a href="#3）具体实现" class="headerlink" title="3）具体实现"></a>3）具体实现</h3><p>接口：（与静态代理一样）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.staticProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类和被代理的接口</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SaleComputer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被代理对象（联想电脑厂商）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 10:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> <span class="keyword">implements</span> <span class="title">SaleComputer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖出一台电脑，价值："</span>+money);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"联想电脑"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"展示电脑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理对象（经销商）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 10:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建真实对象</span></span><br><span class="line">        Lenovo company = <span class="keyword">new</span> Lenovo();</span><br><span class="line">        <span class="comment">//2. 创建动态代理</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        三个参数：</span></span><br><span class="line"><span class="comment">            1. 类加载器：真实对象.getClass().getClassLoader()</span></span><br><span class="line"><span class="comment">            2. 接口数组：真实对象.getClass().getInterfaces()</span></span><br><span class="line"><span class="comment">            3. 处理器：new InvocationHandler()，处理和被代理对象的方法，即方法增强的地方</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        SaleComputer proxy_lenovo = (SaleComputer) Proxy.newProxyInstance(company.getClass().getClassLoader(), company.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/*代理逻辑编写的方法，代理对象调用的所有方法都会触发该方法的执行</span></span><br><span class="line"><span class="comment">            参数：</span></span><br><span class="line"><span class="comment">                1. proxy：代理对象（一般不用）</span></span><br><span class="line"><span class="comment">                2. method：代理对象调用的方法，被封装为的对象</span></span><br><span class="line"><span class="comment">                3. args：代理对象调用的方法时，传入的实际参数</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object obj =<span class="keyword">null</span>;</span><br><span class="line">                System.out.println(<span class="string">"这里是代理。。。。"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"sale"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    <span class="comment">//增强参数</span></span><br><span class="line">                    Double money = (Double) args[<span class="number">0</span>];<span class="comment">//用户买电脑付的钱</span></span><br><span class="line">                    money = money*<span class="number">0.8</span>;<span class="comment">//给电脑厂商的钱</span></span><br><span class="line">                    System.out.println(<span class="string">"你被增强啦"</span>);</span><br><span class="line">                    <span class="comment">//使用compay对象执行此方法，返回值就是真实对象方法的返回值</span></span><br><span class="line">                    obj = method.invoke(company, money);</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    obj = obj+<span class="string">"_鼠标垫"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    obj = method.invoke(company, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        String computer = proxy_lenovo.sale(<span class="number">8000</span>);<span class="comment">//用户付钱</span></span><br><span class="line">        System.out.println(computer);<span class="comment">//用户得到的产品</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">        proxy_lenovo.show();<span class="comment">//展示商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不使用代理的测试和上面一样，不再叙述。</p>
<p>测试结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里是代理。。。。</span><br><span class="line">你被增强啦</span><br><span class="line">卖出一台电脑，价值：6400.0</span><br><span class="line">联想电脑_鼠标垫</span><br><span class="line">---------------------</span><br><span class="line">这里是代理。。。。</span><br><span class="line">展示电脑</span><br><span class="line">小新pro13</span><br><span class="line">ThinkPad</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>从上面可以看出代理类是由Proxy这个类通过newProxyInstance方法动态生成的，生成对象后使用“实例调用方法”的方式进行方法调用，那么代理类的被代理类的关系只有在执行这行代码的时候才会生成，因此成为动态代理。</p>
<p>JDK的动态代理也存在不足，即被代理类必须要有实现的接口，如没有接口则无法使用动态代理（从newProxyInstance方法的第二个参数可得知，必须传入被代理类的实现接口），那么需要使用CGLib动态代理。</p>
<h2 id="3-CGLib动态代理"><a href="#3-CGLib动态代理" class="headerlink" title="3. CGLib动态代理"></a>3. CGLib动态代理</h2><p>  CGLib代理是功能最为强大的一种代理方式，因为其不仅解决了静态代理需要创建多个代理类的问题，还解决了JDK代理需要被代理对象实现某个接口的问题。对于需要代理的类，如果能为其创建一个子类，并且在子类中编写相关的代理逻辑，因为“子类 instanceof 父类”，因而在进行调用时直接调用子类对象的实例，也可以达到代理的效果。CGLib代理的原理实际上是动态生成被代理类的子类字节码，由于其字节码都是按照jvm编译后的class文件的规范编写的，因而其可以被jvm正常加载并运行。这也就是CGLib代理为什么不需要为每个被代理类编写代理逻辑的原因。这里需要注意的是，根据CGLib实现原理，由于其是通过创建子类字节码的形式来实现代理的，如果被代理类的方法被声明final类型，那么CGLib代理是无法正常工作的，因为final类型方法不能被重写。</p>
<h3 id="1）细节"><a href="#1）细节" class="headerlink" title="1）细节"></a>1）细节</h3><ul>
<li><p>基于子类的动态代理：</p>
<ul>
<li>涉及的类：Enhancer</li>
<li>提供者：第三方cglib库</li>
</ul>
</li>
<li><p>如何创建代理对象：</p>
<ul>
<li>使用Enhancer类中的create方法</li>
</ul>
</li>
<li><p>创建代理对象的要求：</p>
</li>
<li><p>被代理类不能是最终类</p>
</li>
<li><p>create方法的参数：</p>
<ul>
<li><p>Class：字节码</p>
<p>它是用于指定被代理对象的字节码。</p>
</li>
<li><p>Callback：用于提供增强的代码</p>
<p>它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。此接口的实现类都是谁用谁写。<strong>我们一般写的都是该接口的子接口实现类：MethodInterceptor</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="2）具体实现"><a href="#2）具体实现" class="headerlink" title="2）具体实现"></a>2）具体实现</h3><p>被代理对象（电脑厂商）：此时不需要实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.cglibProxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑生产商</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/23 12:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖出一台电脑，价值："</span>+money);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"联想电脑"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"展示电脑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.cglibProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CGLib动态代理</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/24 9:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Lenovo factory = <span class="keyword">new</span> Lenovo();</span><br><span class="line">        Lenovo proxy_CGLib = (Lenovo) Enhancer.create(factory.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args        以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 调用方法的返回值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                System.out.println(<span class="string">"这里是CGLib动态代理。。。。"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"sale"</span>.equals(method.getName())) &#123;<span class="comment">//当是sale方法时</span></span><br><span class="line">                    <span class="comment">//增强参数</span></span><br><span class="line">                    Double money = (Double) args[<span class="number">0</span>];<span class="comment">//用户买电脑付的钱</span></span><br><span class="line">                    money = money * <span class="number">0.8</span>;<span class="comment">//给电脑厂商的钱</span></span><br><span class="line">                    System.out.println(<span class="string">"你被增强啦"</span>);</span><br><span class="line">                    <span class="comment">//使用factory对象执行此方法，返回值就是真实对象方法的返回值</span></span><br><span class="line">                    obj = method.invoke(factory, money);</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    obj = obj + <span class="string">"_鼠标垫"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//因为这里只有两个方法，所以使用else，也就是指show方法</span></span><br><span class="line">                    obj = method.invoke(factory, args);<span class="comment">//这里执行打印，有无返回值一样</span></span><br><span class="line">                    System.out.println(<span class="string">"小新pro13"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"ThinkPad"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"...."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        String computer = proxy_CGLib.sale(<span class="number">8000</span>);<span class="comment">//用户付钱</span></span><br><span class="line">        System.out.println(computer);<span class="comment">//用户得到的产品</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">        proxy_CGLib.show();<span class="comment">//展示商品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里是CGLib动态代理。。。。</span><br><span class="line">你被增强啦</span><br><span class="line">卖出一台电脑，价值：6400.0</span><br><span class="line">联想电脑_鼠标垫</span><br><span class="line">---------------------</span><br><span class="line">这里是CGLib动态代理。。。。</span><br><span class="line">展示电脑</span><br><span class="line">小新pro13</span><br><span class="line">ThinkPad</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>对静态代理、JDK动态代理、CGLib动态代理做一个总结，静态代理的维护成本比较高，有一个被代理类就需要创建一个代理类，而且需要实现相同的接口。动态代理模式和CGLib动态代理的区别是JDK动态代理需要被代理类实现接口，而CGLib则是生成被代理类的子类，要求被代理类不能是final的，因为final类无法被继承。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie&amp;Session</title>
    <url>/2020/02/22/Cookie&amp;Session/</url>
    <content><![CDATA[<p>Cookie&amp;Sessiont相关知识点的学习。</p>
<a id="more"></a>

<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><ol>
<li>会话技术<ol>
<li>Cookie</li>
<li>Session</li>
</ol>
</li>
<li>JSP：入门学习</li>
</ol>
<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ol>
<li>会话：一次会话中包含多次请求和响应。<ul>
<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li>
</ul>
</li>
<li>功能：在一次会话的范围内的多次请求间，共享数据</li>
<li>方式：<ol>
<li>客户端会话技术：Cookie</li>
<li>服务器端会话技术：Session</li>
</ol>
</li>
</ol>
<h2 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h2><ol>
<li><p>概念：客户端会话技术，将数据保存到客户端</p>
</li>
<li><p>快速入门：</p>
<ul>
<li><p>使用步骤：</p>
<ol>
<li>创建Cookie对象，绑定数据<ul>
<li>new Cookie(String name, String value) </li>
</ul>
</li>
<li>发送Cookie对象<ul>
<li>response.addCookie(Cookie cookie) </li>
</ul>
</li>
<li>获取Cookie，拿到数据<ul>
<li>Cookie[]  request.getCookies()  </li>
</ul>
</li>
</ol>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1582372105/myPIC/javaWeb/cookie%E4%BC%9A%E8%AF%9D%E5%8E%9F%E7%90%86_wu65wl.png" alt="会话原理"></p>
</li>
</ul>
</li>
<li><p>实现原理</p>
</li>
</ol>
<ul>
<li>基于响应头set-cookie和请求头cookie实现</li>
</ul>
<ol start="4">
<li><p>cookie的细节</p>
<ol>
<li><p>一次可不可以发送多个cookie?</p>
<ul>
<li>可以</li>
<li>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</li>
</ul>
</li>
<li><p>cookie在浏览器中保存多长时间？</p>
<ol>
<li>默认情况下，当浏览器关闭后，Cookie数据被销毁</li>
<li>持久化存储：<ul>
<li>setMaxAge(int seconds)<ol>
<li>正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</li>
<li>负数：默认值</li>
<li>零：删除cookie信息</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><p>cookie能不能存中文？</p>
<ul>
<li>在tomcat 8 之前 cookie中不能直接存储中文数据。<ul>
<li>需要将中文数据转码—一般采用URL编码(%E3)</li>
</ul>
</li>
<li>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</li>
</ul>
</li>
<li><p>cookie共享问题？</p>
<ol>
<li><p>假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</p>
<ul>
<li><p>默认情况下cookie不能共享</p>
</li>
<li><p>setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</p>
<ul>
<li>如果要共享，则可以将path设置为”/“</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>​<br>​            2. 不同的tomcat服务器间cookie共享问题？<br>​                * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享<br>​                    * setDomain(“.baidu.com”),那么tieba.baidu.com和news.baidu.com中cookie可以共享</p>
<ol start="5">
<li><p>Cookie的特点和作用</p>
<ol>
<li>cookie存储数据在客户端浏览器</li>
<li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li>
</ol>
<ul>
<li>作用：<ol>
<li>cookie一般用于存出少量的不太敏感的数据</li>
<li>在不登录的情况下，完成服务器对客户端的身份识别</li>
</ol>
</li>
</ul>
</li>
<li><p>案例：记住上一次访问时间</p>
<ol>
<li>需求：<ol>
<li>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</li>
<li>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</li>
</ol>
</li>
</ol>
</li>
<li><p>分析：</p>
<pre><code>1. 可以采用Cookie来完成
2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie
    1. 有：不是第一次访问
        1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20
        2. 写回Cookie：lastTime=2018年6月10日11:50:01
    2. 没有：是第一次访问
        1. 响应数据：您好，欢迎您首次访问
        2. 写回Cookie：lastTime=2018年6月10日11:50:01</code></pre><ol start="3">
<li>代码实现：</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 案例：记住上一次访问时间</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> *        1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</span></span><br><span class="line"><span class="comment"> *        2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/18 20:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CookieTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> firstTimeFlag = <span class="keyword">true</span>;<span class="comment">//是否是第一次访问 默认为第一次访问</span></span><br><span class="line">        <span class="comment">//获取cookie信息</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"lastTime"</span>.equals(name))&#123;<span class="comment">//不是第一登录</span></span><br><span class="line">                    firstTimeFlag = <span class="keyword">false</span>;<span class="comment">//更新状态</span></span><br><span class="line">                    <span class="comment">//响应信息给web界面</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line">                    <span class="comment">//URL解码</span></span><br><span class="line">                    value = URLDecoder.decode(value, <span class="string">"utf-8"</span>);</span><br><span class="line">                    response.getWriter().write(<span class="string">"欢迎回来，您上一次登录的时间是："</span>+value);</span><br><span class="line">                    <span class="comment">//cookie存储最新的登录时间</span></span><br><span class="line">                    String currentTime = currentTime();</span><br><span class="line">                    cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,currentTime);</span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//保存30天</span></span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span> || firstTimeFlag)&#123;<span class="comment">//是第一次访问</span></span><br><span class="line">            String currentTime = currentTime();</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,currentTime);</span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//保存30天</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">            response.getWriter().write(<span class="string">"您好，欢迎您首次访问。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间，并进行URL编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">currentTime</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">        String time = format.format(date);</span><br><span class="line">        <span class="comment">//由于tamcate8 对特殊字符支持不好，如这里的空格，所以进行url编码</span></span><br><span class="line">        time = URLEncoder.encode(time, <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><pre><code>1. 概念：
    * Java Server Pages： java服务器端页面
        * 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码
        * 用于简化书写！！！


2. 原理
    * JSP本质上就是一个Servlet

3. JSP的脚本：JSP定义Java代码的方式
    1. &lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。
    2. &lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。
    3. &lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。


4. JSP的内置对象：
    * 在jsp页面中不需要获取和创建，可以直接使用的对象
    * jsp一共有9个内置对象。
    * 今天学习3个：
        * request
        * response
        * out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似
            * response.getWriter()和out.write()的区别：
                * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。
                * response.getWriter()数据输出永远在out.write()之前

5. 案例:改造Cookie案例</code></pre><h2 id="Session：主菜"><a href="#Session：主菜" class="headerlink" title="Session：主菜"></a>Session：主菜</h2><ol>
<li><p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p>
</li>
<li><p>快速入门：</p>
<ol>
<li>获取HttpSession对象：<br> HttpSession session = request.getSession();</li>
<li>使用HttpSession对象：<br> Object getAttribute(String name)<br> void setAttribute(String name, Object value)<br> void removeAttribute(String name)  </li>
</ol>
</li>
<li><p>原理</p>
<ul>
<li>Session的实现是依赖于Cookie的。</li>
</ul>
</li>
</ol>
<p>​    <img src="https://res.cloudinary.com/qujq/image/upload/v1582371998/myPIC/javaWeb/session%E5%8E%9F%E7%90%86_nag2lg.png" alt="session原理"></p>
<ol start="4">
<li><p>细节：</p>
<ol>
<li>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？<ul>
<li>默认情况下。不是。</li>
<li>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。<br>   Cookie c = new Cookie(“JSESSIONID”,session.getId());<br>   c.setMaxAge(60*60);<br>   response.addCookie(c);</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</p>
<ul>
<li>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作<pre><code>* session的钝化：
      * 在服务器正常关闭之前，将session对象系列化到硬盘上
      * session的活化：
          * 在服务器启动后，将session文件转化为内存中的session对象即可。</code></pre></li>
</ul>
<ol start="3">
<li><p>session什么时候被销毁？</p>
<ol>
<li><p>服务器关闭</p>
</li>
<li><p>session对象调用invalidate() 。</p>
</li>
<li><p>session默认失效时间 30分钟<br>选择性配置修改    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">     &lt;session-timeout&gt;30&lt;&#x2F;session-timeout&gt;</span><br><span class="line"> &lt;&#x2F;session-config&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>​     3. session的特点<br>​         1. session用于存储一次会话的多次请求的数据，存在服务器端<br>​          2. session可以存储任意类型，任意大小的数据<br>​<br>​         * session与Cookie的区别：<br>​             1. session存储数据在服务器端，Cookie在客户端<br>​             2. session没有数据大小限制，Cookie有<br>​                  3. session数据安全，Cookie相对不安全</p>
]]></content>
      <categories>
        <category>JavaWEB</category>
      </categories>
      <tags>
        <tag>JavaWEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2020/02/15/Servlet%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Servlet相关知识点的学习。</p>
<a id="more"></a>

<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><ol>
<li>web相关概念回顾</li>
<li>web服务器软件：Tomcat</li>
<li>Servlet入门学习</li>
<li>HTTP</li>
<li>Request</li>
<li>Response</li>
<li>登录案例</li>
<li>下载案例</li>
</ol>
<h1 id="1-web相关概念回顾"><a href="#1-web相关概念回顾" class="headerlink" title="1. web相关概念回顾"></a>1. web相关概念回顾</h1><ol>
<li><p>软件架构</p>
<ol>
<li>C/S：客户端/服务器端</li>
<li>B/S：浏览器/服务器端</li>
</ol>
</li>
<li><p>资源分类</p>
<ol>
<li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析<ul>
<li>如： html,css,JavaScript</li>
</ul>
</li>
<li>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<ul>
<li>如：servlet/jsp,php,asp….</li>
</ul>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li>网络通信三要素<ol>
<li>IP：电子设备(计算机)在网络中的唯一标识。</li>
<li>端口：应用程序在计算机中的唯一标识。 0~65536</li>
<li>传输协议：规定了数据传输的规则<ol>
<li>基础协议：<ol>
<li>tcp:安全协议，三次握手。 速度稍慢</li>
<li>udp：不安全协议。 速度快</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="2-web服务器软件："><a href="#2-web服务器软件：" class="headerlink" title="2. web服务器软件："></a>2. web服务器软件：</h1><ul>
<li>服务器：安装了服务器软件的计算机</li>
<li>服务器软件：接收用户的请求，处理请求，做出响应</li>
<li>web服务器软件：接收用户的请求，处理请求，做出响应。<ul>
<li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li>
<li>web容器</li>
</ul>
</li>
</ul>
<ul>
<li>常见的java相关的web服务器软件：<ul>
<li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li>
</ul>
</li>
</ul>
<ul>
<li><p>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</p>
</li>
<li><p>Tomcat：web服务器软件</p>
<ol>
<li><p>下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p>
</li>
<li><p>安装：解压压缩包即可。</p>
<ul>
<li>注意：安装目录建议不要有中文和空格</li>
</ul>
</li>
<li><p>卸载：删除目录就行了</p>
</li>
<li><p>启动：</p>
<ul>
<li><p>bin/startup.bat ,双击运行该文件即可</p>
</li>
<li><p>访问：浏览器输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 回车访问自己</p>
<pre><code>http://别人的ip:8080 访问别人</code></pre></li>
<li><p>可能遇到的问题：</p>
<ol>
<li><p>黑窗口一闪而过：</p>
<ul>
<li>原因： 没有正确配置JAVA_HOME环境变量<ul>
<li>解决方案：正确配置JAVA_HOME环境变量</li>
</ul>
</li>
</ul>
</li>
<li><p>启动报错：</p>
<ol>
<li>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程<ul>
<li>netstat -ano</li>
</ul>
</li>
<li>温柔：修改自身的端口号<ul>
<li>conf/server.xml</li>
<li><code>&lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot;</code>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;redirectPort&#x3D;&quot;8445&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。<ul>
<li>好处：在访问时，就不用输入端口号</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>关闭：</p>
<ol>
<li>正常关闭：<ul>
<li>bin/shutdown.bat</li>
<li>ctrl+c</li>
</ul>
</li>
<li>强制关闭：<ul>
<li>点击启动窗口的×</li>
</ul>
</li>
</ol>
</li>
<li><p>配置:</p>
<ul>
<li><p>部署项目的方式：</p>
<ol>
<li><p>直接将项目放到webapps目录下即可。</p>
<ul>
<li>/hello：项目的访问路径–&gt;虚拟目录</li>
<li>简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</li>
<li>war包会自动解压缩</li>
</ul>
</li>
<li><p>配置conf/server.xml文件<br> 在&lt;Host&gt;标签体中配置<br> &lt;Context docBase=”D:\hello” path=”/hehe” /&gt;</p>
<ul>
<li>docBase:项目存放的路径</li>
<li>path：虚拟目录</li>
</ul>
</li>
<li><p>在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写<br> &lt;Context docBase=”D:\hello” /&gt;</p>
<pre><code>* 虚拟目录：xml文件的名称</code></pre></li>
</ol>
<ul>
<li><p>静态项目和动态项目：</p>
<ul>
<li><p>目录结构</p>
<ul>
<li><p>java动态项目的目录结构：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 项目的根目录</span><br><span class="line">	-- WEB-INF目录：</span><br><span class="line">		-- web.xml：web项目的核心配置文件</span><br><span class="line">		-- classes目录：放置字节码文件的目录</span><br><span class="line">		-- lib目录：放置依赖的jar包</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>​        * 将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</p>
<h1 id="3-IDEA与tomcat的相关配置"><a href="#3-IDEA与tomcat的相关配置" class="headerlink" title="3. IDEA与tomcat的相关配置"></a>3. IDEA与tomcat的相关配置</h1><ol>
<li><p>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</p>
<ul>
<li>查看控制台的log：Using CATALINA_BASE:   “C:\Users\fqy.IntelliJIdea2018.1\system\tomcat_itcast”</li>
</ul>
</li>
<li><p>工作空间项目    和     tomcat部署的web项目</p>
<ul>
<li>tomcat真正访问的是“tomcat部署的web项目”，”tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源</li>
<li>WEB-INF目录下的资源不能被浏览器直接访问。</li>
</ul>
</li>
<li><p>断点调试：使用”小虫子”启动 dubug 启动</p>
</li>
</ol>
<h1 id="4-Servlet初步：-server-applet"><a href="#4-Servlet初步：-server-applet" class="headerlink" title="4. Servlet初步：  server applet"></a>4. Servlet初步：  server applet</h1><ul>
<li><p>概念：运行在服务器端的小程序</p>
<ul>
<li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li>
<li>将来我们自定义一个类，实现Servlet接口，复写方法。</li>
</ul>
</li>
<li><p>快速入门：</p>
<ol>
<li><p>创建JavaEE项目</p>
</li>
<li><p>定义一个类，实现Servlet接口</p>
<ul>
<li>public class ServletDemo1 implements Servlet</li>
</ul>
</li>
<li><p>实现接口中的抽象方法</p>
</li>
<li><p>配置Servlet<br>  在web.xml中配置：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>




</li>
</ol>
</li>
</ul>
<ul>
<li>执行原理：<ol>
<li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li>
<li>查找web.xml文件，是否有对应的&lt;url-pattern&gt;标签体内容。</li>
<li>如果有，则在找到对应的&lt;servlet-class&gt;全类名</li>
<li>tomcat会将字节码文件加载进内存，并且创建其对象</li>
<li>调用其方法</li>
</ol>
</li>
</ul>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581156825/myPIC/javaWeb/servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86_lyfd47.png" alt="servlet执行原理"></p>
<ul>
<li><p>Servlet中的生命周期方法：</p>
<ol>
<li><p>被创建：执行init方法，只执行一次</p>
<ul>
<li><p>Servlet什么时候被创建？</p>
<ul>
<li>默认情况下，第一次被访问时，Servlet被创建</li>
<li>可以配置执行Servlet的创建时机。<ul>
<li>在&lt;servlet&gt;标签下配置<ol>
<li>第一次被访问时，创建<ul>
<li>&lt;load-on-startup&gt;的值为负数<ol start="2">
<li>在服务器启动时，创建</li>
</ol>
<ul>
<li>&lt;load-on-startup&gt;的值为0或正整数</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</p>
<ul>
<li>多个用户同时访问时，可能存在线程安全问题。</li>
<li>解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li>
</ul>
</li>
</ul>
</li>
<li><p>提供服务：执行service方法，执行多次</p>
<ul>
<li>每次访问Servlet时，Service方法都会被调用一次。</li>
</ul>
</li>
<li><p>被销毁：执行destroy方法，只执行一次</p>
<ul>
<li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li>
<li>只有服务器正常关闭时，才会执行destroy方法。</li>
<li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>上面的servlet创建过程中，都需要配置web.xml，过程十分繁琐，这时候就需要了解servlet3.0的新特性：</p>
<ul>
<li><p>Servlet3.0：</p>
<ul>
<li><p>好处：</p>
<ul>
<li>支持注解配置。可以不需要web.xml了。</li>
</ul>
</li>
<li><p>步骤：</p>
<ol>
<li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li>
<li>定义一个类，实现Servlet接口</li>
<li>复写方法</li>
<li>在类上使用@WebServlet注解，进行配置<ul>
<li>@WebServlet(“资源路径”)</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h1 id="5-Servlet进阶"><a href="#5-Servlet进阶" class="headerlink" title="5. Servlet进阶"></a>5. Servlet进阶</h1><ol>
<li>概念</li>
<li>步骤</li>
<li>执行原理</li>
<li>生命周期</li>
<li>Servlet3.0 注解配置</li>
<li>Servlet的体系结构<br>Servlet – 接口<br>  <br> |<br>GenericServlet – 抽象类<br><br>|<br>HttpServlet  – 抽象类</li>
</ol>
<ul>
<li><p>GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</p>
<ul>
<li>将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</li>
</ul>
</li>
<li><p>HttpServlet：对http协议的一种封装，简化操作（常用）</p>
<ol>
<li>定义类继承HttpServlet</li>
<li>复写doGet/doPost方法</li>
</ol>
</li>
</ul>
<ol start="7">
<li>Servlet相关配置<ol>
<li>urlpartten:Servlet访问路径<ol>
<li>一个Servlet可以定义多个访问路径 ： @WebServlet({“/d4”,”/dd4”,”/ddd4”})</li>
<li>路径定义规则：<ol>
<li>/xxx：路径匹配</li>
<li>/xxx/xxx:多层路径，目录结构</li>
<li>*.do：扩展名匹配</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="6-HTTP"><a href="#6-HTTP" class="headerlink" title="6. HTTP"></a>6. HTTP</h1><ul>
<li><p>概念：Hyper Text Transfer Protocol 超文本传输协议</p>
<ul>
<li><p>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</p>
</li>
<li><p>特点：</p>
<ol>
<li>基于TCP/IP的高级协议</li>
<li>默认端口号:80</li>
<li>基于请求/响应模型的:一次请求对应一次响应</li>
<li>无状态的：每次请求之间相互独立，不能交互数据</li>
</ol>
</li>
<li><p>历史版本：</p>
<ul>
<li>1.0：每一次请求响应都会建立新的连接</li>
<li>1.1：复用连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="请求消息"><a href="#请求消息" class="headerlink" title="请求消息"></a>请求消息</h2><h3 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h3><h4 id="1）请求行"><a href="#1）请求行" class="headerlink" title="1）请求行"></a>1）请求行</h4><p>请求方式 请求url 请求协议/版本<br>GET /login.html    HTTP/1.1<br>请求方式：HTTP协议有7中请求方式，常用的有2种</p>
<ol>
<li>GET：<ol>
<li>请求参数在请求行中，在url后。</li>
<li>请求的url长度有限制的</li>
<li>不太安全</li>
</ol>
</li>
<li>POST：<ol>
<li>请求参数在请求体中</li>
<li>请求的url长度没有限制的</li>
<li>相对安全</li>
</ol>
</li>
</ol>
<h4 id="2）请求头：客户端浏览器告诉服务器一些信息"><a href="#2）请求头：客户端浏览器告诉服务器一些信息" class="headerlink" title="2）请求头：客户端浏览器告诉服务器一些信息"></a>2）请求头：客户端浏览器告诉服务器一些信息</h4><p>请求头名称: 请求头值</p>
<ul>
<li>常见的请求头：</li>
</ul>
<ol>
<li><p>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</p>
<ul>
<li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li>
</ul>
</li>
<li><p>Referer：<a href="http://localhost/login.html" target="_blank" rel="noopener">http://localhost/login.html</a></p>
<ol>
<li>告诉服务器，我(当前请求)从哪里来？<ul>
<li>作用：<ol>
<li>防盗链：</li>
<li>统计工作：</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581736723/myPIC/javaWeb/Referer%E4%BD%9C%E7%94%A8_s805nn.png" alt="Referer作用"></p>
<h4 id="3）请求空行"><a href="#3）请求空行" class="headerlink" title="3）请求空行"></a>3）请求空行</h4><p> 空行，就是用于分割POST请求的请求头，和请求体的。</p>
<h4 id="4）请求体-正文-："><a href="#4）请求体-正文-：" class="headerlink" title="4）请求体(正文)："></a>4）请求体(正文)：</h4><ul>
<li><p>封装POST请求消息的请求参数的</p>
</li>
<li><p>字符串格式：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  POST &#x2F;login.html	HTTP&#x2F;1.1</span><br><span class="line">  Host: localhost</span><br><span class="line">  User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko&#x2F;20100101 Firefox&#x2F;60.0</span><br><span class="line">  Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">  Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">  Accept-Encoding: gzip, deflate</span><br><span class="line">  Referer: http:&#x2F;&#x2F;localhost&#x2F;login.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">username&#x3D;zhangsan</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="响应消息"><a href="#响应消息" class="headerlink" title="响应消息"></a>响应消息</h2><p>服务器端发送给客户端的数据</p>
<h3 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h3><h4 id="1）响应行"><a href="#1）响应行" class="headerlink" title="1）响应行"></a>1）响应行</h4><ol>
<li><p>组成：协议/版本 响应状态码 状态码描述</p>
</li>
<li><p>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</p>
<ol>
<li><p>状态码都是3位数字 </p>
</li>
<li><p>分类：</p>
<ol>
<li><p>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</p>
</li>
<li><p>2xx：成功。代表：200</p>
</li>
<li><p>3xx：重定向。代表：302(重定向)，304(访问缓存)</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581830759/myPIC/javaWeb/%E9%87%8D%E5%AE%9A%E5%90%91_zvg2rh.png" alt="重定向"></p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581830759/myPIC/javaWeb/%E8%AE%BF%E9%97%AE%E7%BC%93%E5%AD%98_fywm1e.png" alt="访问缓存"></p>
</li>
<li><p>4xx：客户端错误。</p>
<ul>
<li>代表：<ul>
<li>404（请求路径没有对应的资源） </li>
<li>405：请求方式没有对应的doXxx方法</li>
</ul>
</li>
</ul>
</li>
<li><p>5xx：服务器端错误。代表：500(服务器内部出现异常)</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="2）响应头："><a href="#2）响应头：" class="headerlink" title="2）响应头："></a>2）响应头：</h4><ol>
<li><p>格式：头名称： 值</p>
</li>
<li><p>常见的响应头：</p>
<ol>
<li><p>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</p>
<ol start="2">
<li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据<ul>
<li>值：<ul>
<li>in-line:默认值,在当前页面内打开</li>
<li>attachment;filename=xxx：以附件形式打开响应体。文件下载</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="3）响应空行"><a href="#3）响应空行" class="headerlink" title="3）响应空行"></a>3）响应空行</h4><h4 id="4）响应体-传输的数据"><a href="#4）响应体-传输的数据" class="headerlink" title="4）响应体:传输的数据"></a>4）响应体:传输的数据</h4><p>响应体格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Content-Type: text&#x2F;html;charset&#x3D;UTF-8</span><br><span class="line">Content-Length: 101</span><br><span class="line">Date: Wed, 06 Jun 2018 07:08:42 GMT</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  hello , response</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<h1 id="7-Request"><a href="#7-Request" class="headerlink" title="7. Request"></a>7. Request</h1><h2 id="request对象和response对象的原理"><a href="#request对象和response对象的原理" class="headerlink" title="request对象和response对象的原理"></a>request对象和response对象的原理</h2><ol>
<li><p>request和response对象是由服务器创建的。我们来使用它们</p>
</li>
<li><p>request对象是来获取请求消息，response对象是来设置响应消息</p>
</li>
</ol>
<p>   <img src="https://res.cloudinary.com/qujq/image/upload/v1581736733/myPIC/javaWeb/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B_qdjrvk.png" alt="请求响应流程"></p>
<h2 id="request对象继承体系结构："><a href="#request对象继承体系结构：" class="headerlink" title="request对象继承体系结构："></a>request对象继承体系结构：</h2><p>   ServletRequest        –    接口<br>       |    继承<br>   HttpServletRequest    – 接口<br>       |    实现<br>   org.apache.catalina.connector.RequestFacade 类(tomcat)</p>
<h2 id="request功能："><a href="#request功能：" class="headerlink" title="request功能："></a>request功能：</h2><h3 id="1-获取请求消息数据"><a href="#1-获取请求消息数据" class="headerlink" title="1. 获取请求消息数据"></a>1. 获取请求消息数据</h3><h4 id="1）-获取请求行数据"><a href="#1）-获取请求行数据" class="headerlink" title="1） 获取请求行数据"></a>1） 获取请求行数据</h4><ul>
<li><p>GET /day14/demo1?name=zhangsan HTTP/1.1</p>
<ul>
<li>方法：</li>
</ul>
<ol>
<li><p>获取请求方式 ：GET</p>
<p>String getMethod()  </p>
</li>
<li><p>(*)获取虚拟目录：/day14</p>
<p>String getContextPath()</p>
</li>
<li><p>获取Servlet路径: /demo1</p>
<p>String getServletPath()</p>
</li>
<li><p>获取get方式请求参数：name=zhangsan</p>
<p>String getQueryString()</p>
</li>
<li><p>(*)获取请求URI：/day14/demo1</p>
<p>String getRequestURI():        /day14/demo1</p>
<p>StringBuffer getRequestURL()  :<a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a></p>
<p>URL:统一资源定位符 ： <a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a>    中华人民共和国</p>
<p>URI：统一资源标识符 : /day14/demo1                    共和国</p>
</li>
<li><p>获取协议及版本：HTTP/1.1</p>
<p>String getProtocol()</p>
</li>
<li><p>获取客户机的IP地址：</p>
<p>String getRemoteAddr()</p>
</li>
</ol>
</li>
</ul>
<h4 id="2）获取请求头数据"><a href="#2）获取请求头数据" class="headerlink" title="2）获取请求头数据"></a>2）获取请求头数据</h4><ul>
<li>方法：<ul>
<li>(*)String getHeader(String name):通过请求头的名称获取请求头的值</li>
<li>Enumeration<String> getHeaderNames():获取所有的请求头名称</li>
</ul>
</li>
</ul>
<h4 id="3）获取请求体数据"><a href="#3）获取请求体数据" class="headerlink" title="3）获取请求体数据:"></a>3）获取请求体数据:</h4><ul>
<li><p>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p>
<pre><code>- 步骤：
  1.  获取流对象
     - BufferedReader getReader()：获取字符输入流，只能操作字符数据
     - InputStream getInputStream()：获取字节输入流，可以操作所有类型数据

  2. 再从流对象中拿数据</code></pre></li>
</ul>
<h3 id="2-其他功能："><a href="#2-其他功能：" class="headerlink" title="2. 其他功能："></a>2. 其他功能：</h3><h4 id="1）-获取请求参数通用方式："><a href="#1）-获取请求参数通用方式：" class="headerlink" title="1） 获取请求参数通用方式："></a>1） 获取请求参数通用方式：</h4><p>不论get还是post请求方式都可以使用下列方法来获取请求参数</p>
<ol>
<li><p>String getParameter(String name):根据参数名称获取参数值    username=zs&amp;password=123</p>
</li>
<li><p>String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game</p>
</li>
<li><p>Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称</p>
<ol start="4">
<li>Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</li>
</ol>
</li>
</ol>
<ul>
<li><p>中文乱码问题：</p>
<ul>
<li><p>get方式：tomcat 8 已经将get方式乱码问题解决了</p>
</li>
<li><p>post方式：会乱码</p>
</li>
</ul>
</li>
</ul>
<p>解决：在获取参数前，设置request的编码request.setCharacterEncoding(“utf-8”);</p>
<h4 id="2）请求转发：一种在服务器内部的资源跳转方式"><a href="#2）请求转发：一种在服务器内部的资源跳转方式" class="headerlink" title="2）请求转发：一种在服务器内部的资源跳转方式"></a>2）请求转发：一种在服务器内部的资源跳转方式</h4><ol>
<li><p>步骤：</p>
<ol>
<li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li>
<li>使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) </li>
</ol>
</li>
<li><p>特点：</p>
<ol>
<li>浏览器地址栏路径不发生变化</li>
<li>只能转发到当前服务器内部资源中。</li>
<li>转发是一次请求</li>
</ol>
</li>
</ol>
<h4 id="3）共享数据："><a href="#3）共享数据：" class="headerlink" title="3）共享数据："></a>3）共享数据：</h4><ul>
<li><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p>
<ul>
<li><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p>
<ul>
<li><p>方法：</p>
<ol>
<li><p>void setAttribute(String name,Object obj):存储数据</p>
</li>
<li><p>Object getAttribute(String name):通过键获取值</p>
</li>
<li><p>void removeAttribute(String name):通过键移除键值对</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581736723/myPIC/javaWeb/servlet%E5%9F%9F_jr1p3h.png" alt="servlet域"></p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4）-获取ServletContext："><a href="#4）-获取ServletContext：" class="headerlink" title="4） 获取ServletContext："></a>4） 获取ServletContext：</h4><ul>
<li><p>ServletContext对象</p>
<ol>
<li><p>概念：代表整个web应用，可以和程序的容器(服务器)来通信</p>
</li>
<li><p>获取：</p>
<ol>
<li>通过request对象获取<br>request.getServletContext();</li>
<li>通过HttpServlet获取<br>this.getServletContext();</li>
</ol>
</li>
<li><p>功能：</p>
<ol>
<li><p>获取MIME类型：</p>
<ul>
<li><p>MIME类型:在互联网通信过程中定义的一种文件数据类型</p>
<ul>
<li>格式： 大类型/小类型   text/html        image/jpeg</li>
</ul>
</li>
<li><p>获取：String getMimeType(String file)  </p>
</li>
</ul>
</li>
<li><p>域对象：共享数据</p>
<ol>
<li>setAttribute(String name,Object value)</li>
<li>getAttribute(String name)</li>
<li>removeAttribute(String name)</li>
</ol>
<ul>
<li>ServletContext对象范围：所有用户所有请求的数据</li>
</ul>
</li>
<li><p>获取文件的真实(服务器)路径</p>
<ol>
<li><p>方法：String getRealPath(String path)  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String b = context.getRealPath(<span class="string">"/b.txt"</span>);<span class="comment">//web目录下资源访问</span></span><br><span class="line">         System.out.println(b);</span><br><span class="line">         </span><br><span class="line">         String c = context.getRealPath(<span class="string">"/WEB-INF/c.txt"</span>);<span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line">         System.out.println(c);</span><br><span class="line">                  </span><br><span class="line">         String a = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);<span class="comment">//src目录下的资源访问</span></span><br><span class="line">         System.out.println(a);</span><br></pre></td></tr></table></figure>




</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<h1 id="8-Response"><a href="#8-Response" class="headerlink" title="8.Response"></a>8.Response</h1><h3 id="功能：设置响应消息"><a href="#功能：设置响应消息" class="headerlink" title="功能：设置响应消息"></a>功能：设置响应消息</h3><ol>
<li><p>设置响应行</p>
<ol>
<li>格式：HTTP/1.1 200 ok</li>
<li>设置状态码：setStatus(int sc) </li>
</ol>
</li>
<li><p>设置响应头：setHeader(String name, String value) </p>
</li>
<li><p>设置响应体：</p>
<ul>
<li><p>使用步骤：</p>
<ol>
<li><p>获取输出流</p>
<ul>
<li><p>字符输出流：PrintWriter getWriter()</p>
</li>
<li><p>字节输出流：ServletOutputStream getOutputStream()</p>
</li>
</ul>
</li>
<li><p>使用输出流，将数据输出到客户端浏览器</p>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="Response学习案例："><a href="#Response学习案例：" class="headerlink" title="Response学习案例："></a>Response学习案例：</h3><h4 id="1-完成重定向"><a href="#1-完成重定向" class="headerlink" title="1. 完成重定向"></a>1. 完成重定向</h4><ul>
<li><p>重定向：资源跳转的方式</p>
</li>
<li><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 设置状态码为302</span></span><br><span class="line">  response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//2.设置响应头location</span></span><br><span class="line"> response.setHeader(<span class="string">"location"</span>,<span class="string">"/response/responseDemo2"</span>);</span><br><span class="line"><span class="comment">//简单的重定向方法（这一条语句就可以）</span></span><br><span class="line"> response.sendRedirect(<span class="string">"/response/responseDemo2"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>重定向的特点:redirect</p>
<ol>
<li><p>地址栏发生变化</p>
</li>
<li><p>重定向可以访问其他站点(服务器)的资源</p>
</li>
<li><p>重定向是两次请求。不能使用request对象来共享数据</p>
</li>
<li><p>通过response对象获取</p>
</li>
</ol>
</li>
<li><p>转发的特点：forward</p>
<ol>
<li>转发地址栏路径不变</li>
<li>转发只能访问当前服务器下的资源</li>
<li>转发是一次请求，可以使用request对象来共享数据</li>
<li>通过request对象获取</li>
</ol>
<ul>
<li><p><strong>forward 和  redirect 区别</strong>(常考)</p>
</li>
<li><p>路径写法：</p>
<ol>
<li><p>路径分类</p>
<ol>
<li><p>相对路径：通过相对路径不可以确定唯一资源</p>
<ul>
<li><p>如：./index.html</p>
</li>
<li><p>不以/开头，以.开头路径</p>
</li>
<li><p>规则：找到当前资源和目标资源之间的相对位置关系</p>
<ul>
<li>./：当前目录</li>
<li>../:后退一级目录</li>
</ul>
</li>
</ul>
</li>
<li><p>绝对路径：通过绝对路径可以确定唯一资源</p>
<ul>
<li><p>如：<a href="http://localhost/day15/responseDemo2" target="_blank" rel="noopener">http://localhost/day15/responseDemo2</a>        /day15/responseDemo2</p>
</li>
<li><p>以/开头的路径</p>
</li>
<li><p>规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出</p>
<ul>
<li>给客户端浏览器使用：需要加虚拟目录(<strong>项目的访问路径</strong>)</li>
<li>建议虚拟目录动态获取：request.getContextPath()</li>
<li>&lt;a&gt; , &lt;form&gt; 重定向…</li>
<li>给服务器使用：不需要加虚拟目录<ul>
<li>转发路径</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h4 id="2-服务器输出字符数据到浏览器"><a href="#2-服务器输出字符数据到浏览器" class="headerlink" title="2. 服务器输出字符数据到浏览器"></a>2. 服务器输出字符数据到浏览器</h4><ul>
<li>步骤：<ol>
<li>获取字符输出流</li>
</ol>
</li>
</ul>
<ol start="2">
<li>输出数据</li>
</ol>
<ul>
<li><p>注意：</p>
<ul>
<li><p>乱码问题：</p>
<ol>
<li><p><code>PrintWriter pw = response.getWriter();</code>获取的流的默认编码是ISO-8859-1</p>
</li>
<li><p>设置该流的默认编码</p>
</li>
<li><p>告诉浏览器响应体使用的编码（只使用这一行代码即可）</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="3-服务器输出字节数据到浏览器"><a href="#3-服务器输出字节数据到浏览器" class="headerlink" title="3. 服务器输出字节数据到浏览器"></a>3. 服务器输出字节数据到浏览器</h4></li>
</ol>
</li>
</ul>
</li>
<li><p>步骤：</p>
<ol>
<li>获取字节输出流</li>
<li>输出数据</li>
</ol>
</li>
</ul>
<h4 id="4-验证码"><a href="#4-验证码" class="headerlink" title="4. 验证码"></a>4. 验证码</h4><ol>
<li>本质：图片</li>
<li>目的：防止恶意表单注册</li>
</ol>
<h1 id="9-案例：用户登录"><a href="#9-案例：用户登录" class="headerlink" title="9. 案例：用户登录"></a>9. 案例：用户登录</h1><ul>
<li>用户登录案例需求：<br>1.编写login.html登录页面<pre><code>username &amp; password 两个输入框</code></pre>2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表<br>3.使用JdbcTemplate技术封装JDBC<br>4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您<br>5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</li>
</ul>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581736724/myPIC/javaWeb/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90_peeiqu.png" alt="登录案例分析"></p>
<ul>
<li><p>分析</p>
</li>
<li><p>开发步骤</p>
<ol>
<li><p>创建项目，导入html页面，配置文件，jar包</p>
</li>
<li><p>创建数据库环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE day14;</span><br><span class="line">USE day14;</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line"></span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(32) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(32) NOT NULL</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ol start="3">
<li>创建包cn.itcast.domain,创建类User</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	        <span class="keyword">return</span> id;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	        <span class="keyword">this</span>.id = id;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>​       4. 创建包cn.itcast.util,编写工具类JDBCUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.itcast.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类 使用Durid连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//使用ClassLoader加载配置文件，获取字节输入流</span></span><br><span class="line">            InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">            pro.load(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.初始化连接池对象</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	     * 获取连接Connection对象</span></span><br><span class="line"><span class="comment">	     */</span></span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">	        <span class="keyword">return</span>  ds.getConnection();</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<p>​        5. 创建包cn.itcast.dao,创建类UserDao,提供login方法<br>​            </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 操作数据库中User表的类</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		    <span class="comment">//声明JDBCTemplate对象共用</span></span><br><span class="line">		    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">		</span><br><span class="line">		    <span class="comment">/**</span></span><br><span class="line"><span class="comment">		     * 登录方法</span></span><br><span class="line"><span class="comment">		     * <span class="doctag">@param</span> loginUser 只有用户名和密码</span></span><br><span class="line"><span class="comment">		     * <span class="doctag">@return</span> user包含用户全部数据,没有查询到，返回null</span></span><br><span class="line"><span class="comment">		     */</span></span><br><span class="line">		    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User loginUser)</span></span>&#123;</span><br><span class="line">		        <span class="keyword">try</span> &#123;</span><br><span class="line">		            <span class="comment">//1.编写sql</span></span><br><span class="line">		            String sql = <span class="string">"select * from user where username = ? and password = ?"</span>;</span><br><span class="line">		            <span class="comment">//2.调用query方法</span></span><br><span class="line">		            User user = template.queryForObject(sql,</span><br><span class="line">		                    <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		                    <span class="title">loginUser</span>.<span class="title">getUsername</span>(), <span class="title">loginUser</span>.<span class="title">getPassword</span>())</span>;</span><br><span class="line">		                            <span class="keyword">return</span> user;</span><br><span class="line">			        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">			            e.printStackTrace();<span class="comment">//记录日志</span></span><br><span class="line">			            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			        &#125;</span><br><span class="line">			    &#125;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>


<p>​        6. 编写cn.itcast.web.servlet.LoginServlet类        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qjq.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qjq.Dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> cn.qjq.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/12 14:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line"><span class="comment">//        String username = req.getParameter("username");</span></span><br><span class="line"><span class="comment">//        String password = req.getParameter("password");</span></span><br><span class="line"><span class="comment">//        //封装成User对象</span></span><br><span class="line"><span class="comment">//        User loginUser = new User();</span></span><br><span class="line"><span class="comment">//        loginUser.setUsername(username);</span></span><br><span class="line"><span class="comment">//        loginUser.setpassword(password);</span></span><br><span class="line">        <span class="comment">//简化上面程序 使用BeanUtils处理</span></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">        Set&lt;String&gt; keySet = parameterMap.keySet();</span><br><span class="line">        <span class="comment">//创建User对象</span></span><br><span class="line">        User loginUser  = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//使用BeanUtils封装</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(loginUser,parameterMap);<span class="comment">//使用时注意，html中的用户和密码的变量名要和bean中一致</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        User user = dao.login(loginUser);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">"/failServlet"</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//共享数据</span></span><br><span class="line">            req.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            <span class="comment">//转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">"/successServlet"</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        7. 编写FailServlet和SuccessServlet类    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qjq.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qjq.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/12 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/failServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        resp.getWriter().write(<span class="string">"登陆失败！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qjq.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qjq.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/12 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/successServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取共享数据</span></span><br><span class="line">        User user = (User)req.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"登陆成功"</span>+user.getUsername()+<span class="string">"!欢迎您！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>login.html中form表单的action路径的写法</p>
<ul>
<li><p>虚拟目录+Servlet的资源路径</p>
</li>
<li><p>出现问题：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>  <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的name一直修改无效，我修改为psw时，servlet获取的名称还是username</p>
</li>
</ol>
<h2 id="BeanUtils工具类，简化数据封装"><a href="#BeanUtils工具类，简化数据封装" class="headerlink" title="BeanUtils工具类，简化数据封装"></a>BeanUtils工具类，简化数据封装</h2><ul>
<li>用于封装JavaBean的</li>
</ul>
<ol>
<li><p>JavaBean：标准的Java类</p>
<ol start="2">
<li><p>要求：</p>
<pre><code>1. 类必须被public修饰
2. 必须提供空参的构造器
3. 成员变量必须使用private修饰
4. 提供公共setter和getter方法</code></pre></li>
<li><p>功能：封装数据</p>
<pre><code>1. 概念：
        成员变量：
           属性：setter和getter方法截取后的产物
           例如：getUsername() --&gt; Username--&gt; username

2. 方法：
  1. setProperty()
  2. getProperty()
  3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</code></pre></li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qjq.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qjq.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BeanUtils方法测试</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/14 17:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtilsTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.setProperty(user,<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">            <span class="comment">//注意这里的name是属性，不是变量名，写username要有对应的setUsername</span></span><br><span class="line">            System.out.println(user);</span><br><span class="line">            String username = BeanUtils.getProperty(user, <span class="string">"username"</span>);</span><br><span class="line">            System.out.println(username);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="案例体会"><a href="#案例体会" class="headerlink" title="案例体会"></a>案例体会</h2><p>本次登录案例使用两个简化操作：</p>
<ol>
<li>数据库读取用户数据后，自动封装为bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = template.queryForObject(sql,</span><br><span class="line">        <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),/*自动封装为<span class="title">bean</span>*/</span></span><br><span class="line"><span class="class">        <span class="title">loginUser</span>.<span class="title">getUsername</span>(), <span class="title">loginUser</span>.<span class="title">getpassword</span>())</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>sevlet获取网页http的请求参数后，使用BeanUtils中的populate方法自动分装为bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line"><span class="comment">//创建User对象</span></span><br><span class="line">User loginUser  = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">//使用BeanUtils封装</span></span><br><span class="line">BeanUtils.populate(loginUser,parameterMap);<span class="comment">//使用时注意，html中的用户和密码的变量名要和bean中一致</span></span><br></pre></td></tr></table></figure>
<h1 id="10-案例：下载"><a href="#10-案例：下载" class="headerlink" title="10. 案例：下载"></a>10. 案例：下载</h1><ul>
<li><p>文件下载需求：</p>
<ol>
<li>页面显示超链接</li>
<li>点击超链接后弹出下载提示框</li>
<li>完成图片文件下载</li>
</ol>
</li>
<li><p>分析：</p>
<ol>
<li>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</li>
<li>任何资源都必须弹出下载提示框</li>
<li>使用响应头设置资源的打开方式：<ul>
<li>content-disposition:attachment;filename=xxx</li>
</ul>
</li>
</ol>
</li>
<li><p>步骤：</p>
<ol>
<li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</li>
<li>定义Servlet<ol>
<li>获取文件名称</li>
<li>使用字节输入流加载文件进内存</li>
<li>指定response的响应头： content-disposition:attachment;filename=xxx</li>
<li>将数据写出到response输出流</li>
</ol>
</li>
</ol>
</li>
<li><p>问题：</p>
<ul>
<li>中文文件问题<ul>
<li>解决思路：<ol>
<li>获取客户端使用的浏览器版本信息</li>
<li>根据不同的版本信息，设置filename的编码方式不同</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>java程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> site.qujq.web.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> site.qujq.web.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/16 10:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/downloadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取请求参数：文件名</span></span><br><span class="line">        String filename = req.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">//2. 获取真实路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span> + filename);</span><br><span class="line">        <span class="comment">//3. 用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//4.设置response响应头信息</span></span><br><span class="line">        <span class="comment">//4.1设置响应头 类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);</span><br><span class="line">        resp.setHeader(<span class="string">"content_type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//4.2设置响应头 打开方式：content-disposition</span></span><br><span class="line">        <span class="comment">//5解决中文文件名问题</span></span><br><span class="line">            <span class="comment">//5.1.获取user-agent请求头、</span></span><br><span class="line">        String agent = req.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">            <span class="comment">//5.2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">        resp.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);<span class="comment">//附件方式打开</span></span><br><span class="line">        <span class="comment">//6. 将输入流的数据写到servlet输出流</span></span><br><span class="line">        <span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        ServletOutputStream os = resp.getOutputStream();</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(flush))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(flush,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();<span class="comment">//自己创建的最好关闭</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图片名字不要纯数字，上传不到服务器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/response/img/pic.jpg"</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/response/img/视频.mp4"</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/response/downloadServlet?filename=pic.jpg"</span>&gt;</span>下载图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/response/downloadServlet?filename=视频.mp4"</span>&gt;</span>下载视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="案例体会："><a href="#案例体会：" class="headerlink" title="案例体会："></a>案例体会：</h2><ol>
<li>文件夹的名称最好不要纯数字，出现上传不到服务器的情况，找不到该文件</li>
<li>解决中文问题时，找不到<code>import sun.misc.BASE64Encoder;</code>就没有用这个。。。</li>
</ol>
]]></content>
      <categories>
        <category>JavaWEB</category>
      </categories>
      <tags>
        <tag>JavaWEB</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC连接池&amp;JDBCTemplate</title>
    <url>/2020/02/11/JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0&amp;JDBCTemplate/</url>
    <content><![CDATA[<p>后面学习经常用到数据库的操作，为了简化数据库代码操作，学习一下JDBC连接池&amp;JDBCTemplate</p>
<a id="more"></a>

<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol>
<li><p>数据库连接池</p>
</li>
<li><p>Spring JDBC : JDBC Template</p>
</li>
</ol>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ol>
<li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。</p>
<p>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p>
</li>
<li><p>好处：</p>
<ol>
<li>节约资源</li>
<li>用户访问高效</li>
</ol>
</li>
<li><p>实现：</p>
<ol>
<li><p>标准接口：DataSource   javax.sql包下的</p>
<ol>
<li>方法：<ul>
<li>获取连接：getConnection()</li>
<li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li>
</ul>
</li>
</ol>
</li>
<li><p>一般我们不去实现它，有数据库厂商来实现</p>
<ol>
<li>C3P0：数据库连接池技术</li>
<li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li>
</ol>
</li>
</ol>
</li>
<li><p>C3P0：数据库连接池技术</p>
<ul>
<li><p>步骤：</p>
<ol>
<li><p>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，</p>
<ul>
<li>不要忘记导入数据库驱动jar包</li>
</ul>
</li>
<li><p>定义配置文件：</p>
<ul>
<li>名称： c3p0.properties 或者 c3p0-config.xml</li>
<li>路径：直接将文件放在src目录下即可。</li>
</ul>
</li>
<li><p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p>
</li>
<li><p>获取连接： getConnection</p>
</li>
</ol>
</li>
<li><p>代码：<br>  //1.创建数据库连接池对象<br>  DataSource ds  = new ComboPooledDataSource();<br>  //2. 获取连接对象<br>  Connection conn = ds.getConnection();</p>
</li>
</ul>
</li>
<li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p>
<ol>
<li>步骤：<ol>
<li>导入jar包 druid-1.0.9.jar</li>
<li>定义配置文件：<ul>
<li>是properties形式的</li>
<li>可以叫任意名称，可以放在任意目录下</li>
</ul>
</li>
<li>加载配置文件。Properties</li>
<li>获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory</li>
<li>获取连接：getConnection</li>
</ol>
</li>
</ol>
<ul>
<li>代码：<br>  //3.加载配置文件<br>  Properties pro = new Properties();<br>  InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(“druid.properties”);<br>  pro.load(is);<br>  //4.获取连接池对象<br>  DataSource ds = DruidDataSourceFactory.createDataSource(pro);<br>  //5.获取连接<br>  Connection conn = ds.getConnection();</li>
</ul>
<ol start="2">
<li>定义工具类<ol>
<li>定义一个类 JDBCUtils</li>
<li>提供静态代码块加载配置文件，初始化连接池对象</li>
<li>提供方法<ol>
<li>获取连接方法：通过数据库连接池获取连接</li>
<li>释放资源</li>
<li>获取连接池的方法</li>
</ol>
</li>
</ol>
</li>
</ol>
<ul>
<li>代码：</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qjq.jdbc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC方法类</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/11 16:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="comment">//加载配置文件</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">            ps.load(JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties"));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(ps);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cnn 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection cnn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cnn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Statement stmt, Connection cnn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cnn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul>
<li><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p>
</li>
<li><p>步骤：</p>
<ol>
<li>导入jar包</li>
<li>创建JdbcTemplate对象。依赖于数据源DataSource</li>
</ol>
</li>
<li><p>JdbcTemplate template = new JdbcTemplate(ds);</p>
<ol start="3">
<li><p>调用JdbcTemplate的方法来完成CRUD的操作</p>
<ul>
<li>update():执行DML语句。增、删、改语句</li>
<li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul>
<li>注意：这个方法查询的结果集长度只能是1</li>
</ul>
</li>
<li>queryForList():查询结果将结果集封装为list集合<ul>
<li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li>
</ul>
</li>
<li>query():查询结果，将结果封装为JavaBean对象<ul>
<li>query的参数：RowMapper<ul>
<li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li>
<li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li>
</ul>
</li>
</ul>
</li>
<li>queryForObject：查询结果，将结果封装为对象</li>
<li>一般用于聚合函数的查询</li>
</ul>
</li>
<li><p>练习：</p>
<ul>
<li>需求：<ol>
<li>修改1号数据的 salary 为 10000</li>
<li>添加一条记录</li>
<li>删除刚才添加的记录</li>
<li>查询id为1的记录，将其封装为Map集合</li>
<li>查询所有记录，将其封装为List</li>
<li>查询所有记录，将其封装为Emp对象的List集合</li>
</ol>
</li>
</ul>
<ol start="7">
<li>查询总记录数</li>
</ol>
<ul>
<li>代码：</li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qjq.jdbc.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qjq.jdbc.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.qjq.jdbc.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用JDBCTemplate实现增删改查</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/2/11 20:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String sql = <span class="string">"insert into users(username,age) values(?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="string">"lisi"</span>, <span class="number">17</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//不需要再关闭，会自动处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update users set age = 20 where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">2</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from users where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">2</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询id为1的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search2Map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from users where id = 1"</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search2List</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from users"</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;</span><br><span class="line">            System.out.println(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search2Bean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from users"</span>;</span><br><span class="line">        List&lt;Emp&gt; emps = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : emps) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">total</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select count(id) from users"</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, <span class="keyword">long</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>​            </p>
<p>来源于黑马视频笔记。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>maven基础</title>
    <url>/2020/02/07/maven%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p> 学习框架之前，就先学习了一下maven的使用，可以更好地管理jar包的问题</p>
<a id="more"></a> 

<h1 id="1-什么是maven？"><a href="#1-什么是maven？" class="headerlink" title="1. 什么是maven？"></a>1. 什么是maven？</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>Maven 是一个项目管理工具，它包含了一个项目对象模型 (<strong>POM</strong>：<strong>Project Object Model</strong>)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。 </p>
<h2 id="1-2-Maven-能解决什么问题"><a href="#1-2-Maven-能解决什么问题" class="headerlink" title="1.2 Maven 能解决什么问题"></a>1.2 Maven 能解决什么问题</h2><p> 可以用更通俗的方式来说明。我们知道，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，下面列举几个感受一下： </p>
<ol>
<li>我们需要引用各种 jar 包，尤其是比较大的工程，引用的 jar 包往往有几十个乃至上百个， 每用</li>
</ol>
<p>到一种 jar 包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的 jar 包冲突，版本冲突。 </p>
<ol start="2">
<li><p>我们辛辛苦苦写好了 Java 文件，可是只懂 0 和 1 的白痴电脑却完全读不懂，需要将它编译成二进制字节码，好歹现在这项工作可以由各种集成开发工具帮我们完成，Eclipse、IDEA 等都可以将代码即时编译。当然，如果你嫌生命漫长，何不铺张，也可以用记事本来敲代码，然后用 javac 命令一个个地去编译，逗电脑玩。 </p>
</li>
<li><p>世界上没有不存在 bug 的代码，计算机喜欢 bug 就和人们总是喜欢美女帅哥一样。为了追求美为</p>
</li>
</ol>
<p>了减少 bug，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量。 </p>
<ol start="4">
<li>再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，定型打包，如果是 web 项目，还需要将之发布到服务器，供人蹂躏。 </li>
</ol>
<p>试想，如果现在有一种工具，可以把你从上面的繁琐工作中解放出来，能帮你构建工程，管理 jar 包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成 Web 站点，你会心动吗？Maven 就可以解决上面所提到的这些问题。 </p>
<h1 id="2-Maven依赖管理的概念"><a href="#2-Maven依赖管理的概念" class="headerlink" title="2. Maven依赖管理的概念"></a>2. Maven依赖管理的概念</h1><p>Maven的一个核心特性就是依赖管理。当我们涉及到多模块的项目（包含成百个模块或者子项目），管理依赖就变成一项困难的任务。Maven展示出了它对处理这种情形的高度控制。</p>
<p>传统的 WEB 项目中，我们必须将工程所依赖的 jar 包复制到工程中，导致了工程的变得很大。那么 maven 工程是如何使得工程变得很少呢？</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581062201/myPIC/maven/1_f6bfzc.png" alt=""></p>
<p>通过分析发现：maven 工程中不直接将 jar 包导入到工程中，而是通过在 pom.xml 文件中添加所需 jar 包的坐标，这样就很好的避免了 jar 直接引入进来，在需要用到 jar 包的时候，只要查找 pom.xml 文件，再通过 pom.xml 文件中的坐标，到一个专门用于”存放 jar 包的仓库”(maven 仓库)中根据坐标从而找到这些 jar 包，再把这些 jar 包拿去运行。</p>
<p>那么问题来了第一：”存放 jar 包的仓库”长什么样？第二：通过读取 pom.xml 文件中的坐标，再到仓库中找到 jar 包，会不会很慢？从而导致这种方式不可行！</p>
<p><strong>第一个问题：</strong>存放 jar 包的仓库长什么样，这一点我们后期会分析仓库的分类，也会带大家去看我们的本地的仓库长什么样。</p>
<p><strong>第二个问题：</strong>通过 pom.xml 文件配置要引入的 jar 包的坐标，再读取坐标并到仓库中加载 jar 包，这样我们就可以直接使用 jar 包了，为了解决这个过程中速度慢的问题，maven 中也有索引的概念，通过建立索引，可以大大提高加载 jar 包的速度，使得我们认为 jar 包基本跟放在本地的工程文件中再读取出来的速度是一样的。这个过程就好比我们查阅字典时，为了能够加快查找到内容，书前面的目录就好比是索引，有了这个目录我们就可以方便找到内容了，一样的在 maven 仓库中有了索引我们就可以认为可以快速找到 jar 包。</p>
<h1 id="3-仓库的种类和关系"><a href="#3-仓库的种类和关系" class="headerlink" title="3. 仓库的种类和关系"></a>3. 仓库的种类和关系</h1><p><img src="https://res.cloudinary.com/qujq/image/upload/v1581062184/myPIC/maven/2_fwhu5j.png" alt="img"></p>
<h1 id="4-maven标准目录结构"><a href="#4-maven标准目录结构" class="headerlink" title="4. maven标准目录结构"></a>4. maven标准目录结构</h1><p><img src="https://res.cloudinary.com/qujq/image/upload/v1581062185/myPIC/maven/3_kfunsk.png" alt="img"></p>
<h1 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5.常用命令"></a>5.常用命令</h1><h2 id="5-1-mvn-clean"><a href="#5-1-mvn-clean" class="headerlink" title="5.1 mvn clean"></a>5.1 mvn clean</h2><p>clean 是 maven 工程的清理命令，执行 clean 会删除 target 目录及内容。</p>
<h2 id="5-2-mvn-complie"><a href="#5-2-mvn-complie" class="headerlink" title="5.2 mvn complie"></a>5.2 mvn complie</h2><p>compile 是 maven 工程的编译命令，作用是将 src/main/java 下的文件编译为 class 文件输出到 target目录下。</p>
<h2 id="5-3-mvn-test"><a href="#5-3-mvn-test" class="headerlink" title="5.3 mvn test"></a>5.3 mvn test</h2><p>test 是 maven 工程的测试命令 mvn test，会执行 src/test/java 下的单元测试类。 cmd 执行 mvn test 执行 src/test/java 下单元测试类</p>
<h2 id="5-4-mvn-package"><a href="#5-4-mvn-package" class="headerlink" title="5.4 mvn package"></a>5.4 mvn package</h2><p>package 是 maven 工程的打包命令，对于 java 工程执行 package 打成 jar 包，对于 web 工程打成 war 包。</p>
<h2 id="5-5-mvn-install"><a href="#5-5-mvn-install" class="headerlink" title="5.5 mvn install"></a>5.5 mvn install</h2><p>install 是 maven 工程的安装命令，执行 install 将 maven 打成 jar 包或 war 包发布到本地仓库。从运行结果中，可以看出：当后面的命令执行时，前面的操作过程也都会自动执行</p>
<h2 id="5-6-mvn-tomcat-run"><a href="#5-6-mvn-tomcat-run" class="headerlink" title="5.6 mvn tomcat:run"></a>5.6 mvn tomcat:run</h2><p>Maven 工程的运行</p>
<h2 id="5-7-Maven-指令的生命周期"><a href="#5-7-Maven-指令的生命周期" class="headerlink" title="5.7 Maven 指令的生命周期"></a>5.7 Maven 指令的生命周期</h2><p>maven 对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是： </p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581062233/myPIC/maven/4_wtf8s7.png" alt="img"></p>
<p>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。 </p>
<p>Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。 Site Lifecycle 生成项目报告，站点，发布站点。</p>
<h2 id="5-8-maven-的概念模型"><a href="#5-8-maven-的概念模型" class="headerlink" title="5.8 maven 的概念模型"></a>5.8 maven 的概念模型</h2><p>Maven 包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段 (phase)中插件(plugin)目标(goal)的逻辑。</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581062260/myPIC/maven/5_slwz1y.png" alt="img"></p>
<h1 id="6-依赖范围"><a href="#6-依赖范围" class="headerlink" title="6. 依赖范围"></a>6. 依赖范围</h1><p>A 依赖 B，需要在 A 的 pom.xml 文件中添加 B 的坐标，添加坐标时需要指定依赖范围，依赖范围包括：</p>
<p> <strong>compile：</strong>编译范围，指 A 在编译时依赖 B，此范围为默认依赖范围。编译范围的依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</p>
<p> <strong>provided</strong>：provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用， provided 依赖在编译和测试时需要，在运行时不需要，比如：servlet api 被 tomcat 容器提供。</p>
<p><strong>runtime</strong>：runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如：jdbc 的驱动包。由于运行时需要所以 runtime 范围的依赖会被打包。</p>
<p> <strong>test：</strong>test 范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用，比如：junit。由于运行时不需要所以 test 范围依赖不会被打包。</p>
<p><strong>system</strong>：system 范围依赖与 provided 类似，但是你必须显式的提供一个对于本地系统中 JAR 文件的路径，需要指定 systemPath 磁盘路径，system依赖不推荐使用。</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1581062196/myPIC/maven/6_tmufpc.png" alt="img"></p>
<p>在 maven-web 工程中测试各 scop。</p>
<p>测试总结：</p>
<p>默认引入 的 jar 包 ——- compile 【默认范围 可以不写】（编译、测试、运行 都有效 ）</p>
<p>servlet-api 、jsp-api ——- provided （编译、测试 有效， 运行时无效 防止和 tomcat 下 jar 冲突）</p>
<p>jdbc 驱动 jar 包 —- runtime （测试、运行 有效 ）</p>
<p>junit —– test （测试有效）</p>
<p>依赖范围由强到弱的顺序是：compile&gt;provided&gt;runtime&gt;test</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>1. maven</strong> <strong>仓库</strong></p>
<p>1)  maven 仓库的类型有哪些？</p>
<p>2)  maven 工程查找仓库的流程是什么？</p>
<p>3)  本地仓库如何配置？</p>
<p><strong>2.</strong> <strong>常用的</strong> <strong>maven</strong> <strong>命令</strong></p>
<p>常用 的 maven 命令包括： compile：编译 clean：清理 test：测试 package：打包 install：安装</p>
<p><strong>3.</strong> <strong>坐标定义</strong></p>
<p>在 pom.xml 中定义坐标，内容包括：groupId、artifactId、version，详细内容如下：</p>
<p>&lt;!–项目名称，定义为组织名+项目名，类似包名–&gt;</p>
<p>&lt;groupId&gt;cn.itcast.maven&lt;/groupId&gt;</p>
<p>&lt;!– 模块名称 –&gt;</p>
<p>&lt;artifactId&gt;maven-first&lt;/artifactId&gt;</p>
<p>&lt;!– 当前项目版本号，snapshot 为快照版本即非正式版本，release 为正式发布版本 –&gt;</p>
<p>&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</p>
<p>&lt;packaging &gt; ：打包类型</p>
<p> jar：执行 package 会打成 jar 包 war：执行 package 会打成 war 包 pom ：用于 maven 工程的继承，通常父工程设置为 pom </p>
<p><strong>4. pom</strong> <strong>基本配置</strong></p>
<p>pom.xml 是 Maven 项目的核心配置文件，位于每个工程的根目录，基本配置如下：</p>
<p>&lt;project &gt; ：文件的根节点 .</p>
<p>&lt;modelversion &gt; ： pom.xml 使用的对象模型版本</p>
<p>&lt;groupId &gt; ：项目名称，一般写项目的域名</p>
<p> &lt;artifactId &gt; ：模块名称，子项目名或模块名称 </p>
<p>&lt;version &gt; ：产品的版本号 . </p>
<p> &lt;packaging &gt; ：打包类型，一般有 jar、war、pom 等</p>
<p> &lt;name &gt; ：项目的显示名，常用于 Maven 生成的文档。 </p>
<p>&lt;description &gt; ：项目描述，常用于 Maven 生成的文档</p>
<p>&lt;dependencies&gt; ：项目依赖构件配置，配置项目依赖构件的坐标 &lt;build&gt; ：项目构建配置，配置编译、运行插件等。</p>
]]></content>
      <categories>
        <category>管理工具</category>
      </categories>
      <tags>
        <tag>管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/01/28/%E6%A0%88/</url>
    <content><![CDATA[<p> 生活中经常会使用到计算器，要计算”1+2*3-1“时，就需要用到栈这个数据结构</p>
<a id="more"></a> 

<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>1) 栈的英文为(stack)</p>
<p>2) 栈是一个<strong>先入后出</strong>(FILO-First In Last Out)的有序列表。</p>
<p>3) 栈(stack)是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong>(Top)，另一端为固定的一端，称为<strong>栈底</strong>(Bottom)。</p>
<p>4) 根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p>
<h2 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2. 应用场景"></a>2. 应用场景</h2><p>1) 子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。  </p>
<p>2) 处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</p>
<p>3) 表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</p>
<p>4) 二叉树的遍历。</p>
<p>5) 图形的深度优先(depth一first)搜索法。</p>
<h2 id="3-数组模拟栈"><a href="#3-数组模拟栈" class="headerlink" title="3.数组模拟栈"></a>3.数组模拟栈</h2><h3 id="1-思路分析"><a href="#1-思路分析" class="headerlink" title="1) 思路分析"></a>1) 思路分析</h3><ol>
<li>使用数组来模拟栈</li>
<li>定义一个 top 来表示栈顶，初始化 为 -1</li>
<li>入栈的操作，当有数据加入到栈时， top++; stack[top] = data;</li>
<li>出栈的操作， int value = stack[top]; top–, return value</li>
</ol>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1580964271/myPIC/%E6%A0%88%E6%95%B0%E7%BB%841_mhnp2w.png" alt="栈数组"></p>
<h3 id="2）Java程序实现"><a href="#2）Java程序实现" class="headerlink" title="2）Java程序实现"></a>2）Java程序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组模拟栈</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/28 16:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStackDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayStack arrayStack = <span class="keyword">new</span> ArrayStack(<span class="number">4</span>);</span><br><span class="line">        String mark;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//键盘输入</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//循环标志位</span></span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"show:显示栈"</span>);</span><br><span class="line">            System.out.println(<span class="string">"pop:出栈"</span>);</span><br><span class="line">            System.out.println(<span class="string">"push:入栈"</span>);</span><br><span class="line">            System.out.println(<span class="string">"exit:退出"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入你的选择："</span>);</span><br><span class="line">            mark = scanner.next();</span><br><span class="line">            <span class="keyword">switch</span> (mark)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">                    arrayStack.list();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"pop"</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = arrayStack.pop();</span><br><span class="line">                        System.out.println(<span class="string">"出栈的数据是："</span>+res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"push"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入入栈数据："</span>);</span><br><span class="line">                    <span class="keyword">int</span> val = scanner.nextInt();</span><br><span class="line">                    arrayStack.push(val);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">                    flag=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建模拟栈的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] stack;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;<span class="comment">//模拟栈顶指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxSize 数组的最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        top=-<span class="number">1</span>;<span class="comment">//初始值默认为-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈是否满</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 真假</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 入栈数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">"栈已满，无法入栈"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        stack[top] = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回出栈数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = stack[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历栈 从顶部开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"栈为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-链表模拟栈"><a href="#4-链表模拟栈" class="headerlink" title="4. 链表模拟栈"></a>4. 链表模拟栈</h2><h3 id="1）思路分析"><a href="#1）思路分析" class="headerlink" title="1）思路分析"></a>1）思路分析</h3><ol>
<li>首先需要定义链表节点：数据域+指针域</li>
<li>栈的结构为：栈顶top+栈底bottom</li>
<li>栈底为空，保持不动，栈顶进行入栈、出栈的操作</li>
<li>目的是便于出栈入栈：注意此处链表的方向和以前的反过来，如下图所示。</li>
<li>出栈：value = top; top = top.next; return value;</li>
<li>入栈：newNode.next = top;  top = newNode;</li>
</ol>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1580964271/myPIC/%E6%A0%88%E9%93%BE%E8%A1%A81_kbhxdv.png" alt=""></p>
<h3 id="2）Java程序实现-1"><a href="#2）Java程序实现-1" class="headerlink" title="2）Java程序实现"></a>2）Java程序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用链表模拟栈</span></span><br><span class="line"><span class="comment"> * 注意此处链表的方向和以前的反过来</span></span><br><span class="line"><span class="comment"> * [头节点1|next=null]&lt;-[节点2|next]&lt;-[节点3|next]</span></span><br><span class="line"><span class="comment"> * 目的是便于出栈入栈</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/28 17:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStackDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedListStack LLStack = <span class="keyword">new</span> LinkedListStack();</span><br><span class="line">        String mark;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//键盘输入</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//循环标志位</span></span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"show:显示栈"</span>);</span><br><span class="line">            System.out.println(<span class="string">"pop:出栈"</span>);</span><br><span class="line">            System.out.println(<span class="string">"push:入栈"</span>);</span><br><span class="line">            System.out.println(<span class="string">"exit:退出"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入你的选择："</span>);</span><br><span class="line">            mark = scanner.next();</span><br><span class="line">            <span class="keyword">switch</span> (mark)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">                    LLStack.list();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"pop"</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        LLNode res = LLStack.pop();</span><br><span class="line">                        System.out.println(<span class="string">"出栈的数据是："</span>+res.data);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"push"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入入栈数据："</span>);</span><br><span class="line">                    <span class="keyword">int</span> val = scanner.nextInt();</span><br><span class="line">                    LLStack.push(<span class="keyword">new</span> LLNode(val));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">                    flag=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LLNode</span></span>&#123;</span><br><span class="line">    Integer data;<span class="comment">//数据域</span></span><br><span class="line">    LLNode next;<span class="comment">//指针域 默认为空</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LLNode</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LLNode top;<span class="comment">//模拟栈顶指针</span></span><br><span class="line">    <span class="keyword">private</span> LLNode bottom;<span class="comment">//模拟栈顶指针</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器：相当于初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bottom = <span class="keyword">new</span> LLNode(<span class="keyword">null</span>);<span class="comment">//栈的头节点</span></span><br><span class="line">        top= bottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> llNode 入栈节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(LLNode llNode)</span></span>&#123;</span><br><span class="line">        llNode.next = top;<span class="comment">//新节点的next指向顶部</span></span><br><span class="line">        top = llNode;<span class="comment">//top重新指向最顶端</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回出栈数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LLNode <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == bottom)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LLNode temp;</span><br><span class="line">        temp = top;</span><br><span class="line">        top = top.next;<span class="comment">//重新指向上一个节点</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历栈 从顶部开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == bottom)&#123;</span><br><span class="line">            System.out.println(<span class="string">"栈为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LLNode temp = top;</span><br><span class="line">        <span class="keyword">while</span> (temp!=bottom)&#123;</span><br><span class="line">            System.out.print(temp.data + <span class="string">"\t"</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）C语言实现"><a href="#3）C语言实现" class="headerlink" title="3）C语言实现"></a>3）C语言实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;<span class="comment">//数据域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>* <span class="title">pNEXT</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">STACK</span> &#123;</span></span><br><span class="line">	PNODE pTOP; <span class="comment">//栈顶</span></span><br><span class="line">	PNODE pBottom;<span class="comment">//栈底</span></span><br><span class="line">&#125;STACK,* pSTACK;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_stack</span><span class="params">(pSTACK pS)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(pSTACK pS, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(pSTACK pS)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(pSTACK pS,<span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear_stack</span><span class="params">(pSTACK pS)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(pSTACK pS)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	STACK S;</span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	Init_stack(&amp;S);</span><br><span class="line">	push(&amp;S, <span class="number">2</span>);</span><br><span class="line">	push(&amp;S, <span class="number">5</span>);</span><br><span class="line">	push(&amp;S, <span class="number">7</span>);</span><br><span class="line">	traverse(&amp;S);</span><br><span class="line">	push(&amp;S, <span class="number">2</span>);</span><br><span class="line">	push(&amp;S, <span class="number">5</span>);</span><br><span class="line">	push(&amp;S, <span class="number">7</span>);</span><br><span class="line">	traverse(&amp;S);</span><br><span class="line">	pop(&amp;S, &amp;val);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"出栈的值为：%d\n"</span>, val);</span><br><span class="line">	Clear_stack(&amp;S);</span><br><span class="line">	traverse(&amp;S);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_stack</span><span class="params">(pSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PNODE P = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == P)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"创建失败！"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	P-&gt;pNEXT = <span class="literal">NULL</span>;</span><br><span class="line">	pS-&gt;pTOP = P;</span><br><span class="line">	pS-&gt;pBottom = pS-&gt;pTOP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(pSTACK pS, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PNODE P = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));<span class="comment">//一定要注意是NODE  而不是PNODE</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == P)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"创建失败！"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	P-&gt;pNEXT = pS-&gt;pTOP;</span><br><span class="line">	P-&gt;data = val;</span><br><span class="line">	pS-&gt;pTOP = P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(pSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pS-&gt;pBottom == pS-&gt;pTOP)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(pSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	PNODE pnew = pS-&gt;pTOP;<span class="comment">//用来遍历栈</span></span><br><span class="line">	<span class="keyword">if</span> (is_empty(pS))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (pnew != pS-&gt;pBottom)<span class="comment">//当不为空的时候</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pnew-&gt;data);</span><br><span class="line">			pnew = pnew-&gt;pNEXT;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//free(pnew);//此处不能释放地址，因为和pS-&gt;pBottom相同</span></span><br><span class="line">	<span class="comment">//pnew = NULL;</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(pSTACK pS, <span class="keyword">int</span>* val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (is_empty(pS))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	PNODE q = pS-&gt;pTOP;</span><br><span class="line">	pS-&gt;pTOP = q-&gt;pNEXT;</span><br><span class="line">	*val = q-&gt;data;</span><br><span class="line">	<span class="built_in">free</span>(q);<span class="comment">//只是将内存归还操作系统 不会将指针置零</span></span><br><span class="line">	q = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear_stack</span><span class="params">(pSTACK pS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//PNODE p = (PNODE)malloc(sizeof(NODE));</span></span><br><span class="line">	PNODE p=pS-&gt;pTOP;</span><br><span class="line">	PNODE q= pS-&gt;pTOP;</span><br><span class="line">	<span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">while</span> (p != pS-&gt;pBottom)</span><br><span class="line">	&#123;</span><br><span class="line">		q = p-&gt;pNEXT;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">free</span>(p);</span><br><span class="line">			p = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = q;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	pS-&gt;pTOP = pS-&gt;pBottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-低级计算器应用"><a href="#5-低级计算器应用" class="headerlink" title="5.低级计算器应用"></a>5.低级计算器应用</h2><p>首先实现一个简单的计算器，如：5+4*2+8/2。不带括号。</p>
<h3 id="1）思路分析-1"><a href="#1）思路分析-1" class="headerlink" title="1）思路分析"></a>1）思路分析</h3><ol>
<li><p>通过一个 index 值（索引），来遍历我们的表达式</p>
</li>
<li><p>如果我们<strong>发现是一个数字**</strong>,** 就直接入数栈</p>
</li>
<li><p>如果发现<strong>扫描到是一个符号</strong>,  就分如下情况</p>
<p>3.1 如果发现当前的符号栈为 空，就直接入栈</p>
<p>3.2 如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符再次与栈顶操作符比较<strong>（注意）</strong> ，如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈</p>
</li>
<li><p>当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行</p>
</li>
<li><p>最后在数栈只有一个数字，就是表达式的结果</p>
</li>
</ol>
<h3 id="2）Java程序实现-2"><a href="#2）Java程序实现-2" class="headerlink" title="2）Java程序实现"></a>2）Java程序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用栈实现计算器功能</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/30 10:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calculate&lt;Character&gt; operaStack = <span class="keyword">new</span> Calculate&lt;&gt;();<span class="comment">//存放运算符的栈</span></span><br><span class="line">        Calculate&lt;Integer&gt; numStack = <span class="keyword">new</span> Calculate&lt;&gt;();<span class="comment">//存放数字的栈</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//键盘输入</span></span><br><span class="line">        String calculateStr;<span class="comment">//计算式子</span></span><br><span class="line">        Character temp;<span class="comment">//遍历计算式子</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//循环标志位</span></span><br><span class="line">        <span class="keyword">boolean</span> flag2 = <span class="keyword">true</span>;<span class="comment">//循环标志位</span></span><br><span class="line">        System.out.println(<span class="string">"请输入运算式："</span>);</span><br><span class="line">        calculateStr = scanner.next();</span><br><span class="line">        System.out.println(calculateStr);</span><br><span class="line">        <span class="comment">//各个数据入栈</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; calculateStr.length(); i++) &#123;</span></span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            temp = calculateStr.charAt(i);<span class="comment">//读取计算式的第i个字符。</span></span><br><span class="line">            <span class="comment">//如果是数的话 直接入数栈</span></span><br><span class="line">            <span class="keyword">if</span>(!numStack.isOperation(temp))&#123;</span><br><span class="line">                <span class="comment">//这里需要减去'0'，不然的话，转换的是为ASCII码</span></span><br><span class="line">                numStack.push(<span class="keyword">new</span> LLNode2&lt;&gt;((<span class="keyword">int</span>) (temp-<span class="string">'0'</span>)));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(operaStack.isOperation(temp))&#123;     <span class="comment">//当为符号时</span></span><br><span class="line">                <span class="comment">//如果发现当前的符号栈为 空，就直接入栈</span></span><br><span class="line">                <span class="keyword">if</span>(operaStack.isEmpty())&#123;</span><br><span class="line">                    operaStack.push(<span class="keyword">new</span> LLNode2&lt;&gt;(temp));</span><br><span class="line">                    <span class="comment">//此次循环结束，进行下一个符号</span></span><br><span class="line">                    <span class="keyword">if</span> (i == calculateStr.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                        flag = <span class="keyword">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符，</span></span><br><span class="line"><span class="comment">                 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，</span></span><br><span class="line"><span class="comment">                 然后将当前的操作符再次与栈顶操作符比较（注意）； 如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(operaStack.isPrior(temp)&lt;=operaStack.isPrior(operaStack.readLastData()))&#123;</span><br><span class="line">                    Integer num1 = numStack.pop().data;</span><br><span class="line">                    Integer num2 = numStack.pop().data;</span><br><span class="line">                    Character opera = operaStack.pop().data;</span><br><span class="line">                    Integer result = operaStack.calculate(num1,num2,opera);</span><br><span class="line">                    numStack.push(<span class="keyword">new</span> LLNode2&lt;&gt;(result));</span><br><span class="line">                    <span class="keyword">continue</span>;<span class="comment">//此符号，再与下一个栈顶符号比较，因此这里不加入i++</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    operaStack.push(<span class="keyword">new</span> LLNode2&lt;&gt;(temp));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//此符号结束，进行下一个符号</span></span><br><span class="line">            <span class="keyword">if</span>(i != (calculateStr.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        numStack.list();</span><br><span class="line">        operaStack.list();</span><br><span class="line">        <span class="comment">//出栈计算</span></span><br><span class="line">        <span class="keyword">while</span>(flag2)&#123;</span><br><span class="line">            Integer num1 = numStack.pop().data;</span><br><span class="line">            Integer num2 = numStack.pop().data;</span><br><span class="line">            <span class="comment">//当数据全部出栈完时，循环结束</span></span><br><span class="line">            <span class="keyword">if</span> (numStack.isEmpty())&#123;</span><br><span class="line">                flag2 = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Character opera = operaStack.pop().data;</span><br><span class="line">            Integer result = operaStack.calculate(num1,num2,opera);</span><br><span class="line">            <span class="comment">//将最后结果压入栈中</span></span><br><span class="line">            numStack.push(<span class="keyword">new</span> LLNode2&lt;&gt;(result));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最后结果为："</span>+numStack.readLastData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LLNode2</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    T data;<span class="comment">//数据域</span></span><br><span class="line">    LLNode2&lt;T&gt; next;<span class="comment">//指针域 默认为空</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LLNode2</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LLNode2&lt;T&gt; top;<span class="comment">//模拟栈顶指针</span></span><br><span class="line">    <span class="keyword">private</span> LLNode2&lt;T&gt; bottom;<span class="comment">//模拟栈顶指针</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器：相当于初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bottom = <span class="keyword">new</span> LLNode2&lt;&gt;(<span class="keyword">null</span>);<span class="comment">//栈的头节点</span></span><br><span class="line">        top= bottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈是否空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 真假</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == bottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> llNode 入栈节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(LLNode2&lt;T&gt; llNode)</span></span>&#123;</span><br><span class="line">        llNode.next = top;<span class="comment">//新节点的next指向顶部</span></span><br><span class="line">        top = llNode;<span class="comment">//top重新指向最顶端</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回出栈节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LLNode2&lt;T&gt; <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == bottom)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LLNode2&lt;T&gt; temp;</span><br><span class="line">        temp = top;</span><br><span class="line">        top = top.next;<span class="comment">//重新指向上一个节点</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取栈顶的数据，仅仅读取，不是出栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回栈顶数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">readLastData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == bottom)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> top.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历栈 从顶部开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == bottom)&#123;</span><br><span class="line">            System.out.println(<span class="string">"栈为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LLNode2&lt;T&gt; temp = top;</span><br><span class="line">        <span class="keyword">while</span> (temp!=bottom)&#123;</span><br><span class="line">            System.out.print(temp.data + <span class="string">"\t"</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为运算操作符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 真假</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOperation</span><span class="params">(Character str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str == <span class="string">'*'</span> || str == <span class="string">'/'</span> || str == <span class="string">'+'</span> || str == <span class="string">'-'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断运算符优先级 等级越高，返回数字就大</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">isPrior</span><span class="params">(Character str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">'*'</span> || str == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">'+'</span> || str == <span class="string">'-'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"符号错误"</span>);<span class="comment">//当输入不是运算操作符时，抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(Integer num1,Integer num2,Character opera)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(opera == <span class="string">'+'</span>) <span class="keyword">return</span> num1+num2;</span><br><span class="line">        <span class="keyword">if</span>(opera == <span class="string">'-'</span>) <span class="keyword">return</span> num2-num1;</span><br><span class="line">        <span class="keyword">if</span>(opera == <span class="string">'*'</span>) <span class="keyword">return</span> num1*num2;</span><br><span class="line">        <span class="keyword">if</span>(opera == <span class="string">'/'</span>) <span class="keyword">return</span> num2/num1;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"运算错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-波兰表达式"><a href="#6-波兰表达式" class="headerlink" title="6. 波兰表达式"></a>6. 波兰表达式</h2><h3 id="1）前缀表达式"><a href="#1）前缀表达式" class="headerlink" title="1）前缀表达式"></a>1）前缀表达式</h3><p>（1) 前缀表达式又称波兰式，<strong>前缀表达式的运算符位于操作数之前</strong></p>
<p>（2) <strong>举例说明：</strong> (3+4)×5-6 对应的前缀表达式就是 <strong>- × + 3 4 5 6</strong></p>
<p>（3）前缀表达式的计算机求值</p>
<p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p>
<p>例如: (3+4)×5-6 对应的前缀表达式就是 <strong>- × + 3 4 5 6 ,</strong> 针对前缀表达式求值步骤如下：</p>
<ol>
<li><p>从<strong>右至左扫描</strong>，将6、5、4、3压入堆栈</p>
</li>
<li><p>遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值，得7，再将7入栈</p>
</li>
<li><p>接下来是×运算符，因此弹出7和5，计算出7×5=35，将35入栈</p>
</li>
<li><p>最后是-运算符，计算出35-6的值，即29，由此得出最终结果</p>
</li>
</ol>
<h3 id="2）中缀表达式"><a href="#2）中缀表达式" class="headerlink" title="2）中缀表达式"></a>2）中缀表达式</h3><p>（1）中缀表达式就是<strong>常见的运算表达式</strong>，如(3+4)×5-6</p>
<p>（2）中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作(前面我们讲的案例就能看的这个问题)，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作(一般转成后缀表达式.)</p>
<p>（3）中缀表达式的计算机求值（如第5节）</p>
<h3 id="3）后缀表达式"><a href="#3）后缀表达式" class="headerlink" title="3）后缀表达式"></a>3）后缀表达式</h3><p>（1）后缀表达式又称<strong>逆波兰表达式</strong>,与前缀表达式相似，只是运算符位于操作数之后</p>
<p><strong>（2）举例说明</strong>： (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 –</strong></p>
<table>
<thead>
<tr>
<th>正常的表达式</th>
<th>逆波兰表达式</th>
</tr>
</thead>
<tbody><tr>
<td>a+b</td>
<td>a b +</td>
</tr>
<tr>
<td>a+(b-c)</td>
<td>a b c - +</td>
</tr>
<tr>
<td>a+(b-c)*d</td>
<td>a b c – d * +</td>
</tr>
<tr>
<td>a+d*(b-c)</td>
<td>a d b c - * +</td>
</tr>
<tr>
<td>a=1+3</td>
<td>a 1 3 + =</td>
</tr>
</tbody></table>
<p><strong>（3）后缀表达式的计算机求值</strong></p>
<p><strong>从左至右</strong>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p>
<p>例如: (3+4)×5-6 对应的后缀表达式就是 *<em>3 4 + 5 × 6 - *</em>, 针对后缀表达式求值步骤如下</p>
<ol>
<li><p>从左至右扫描，将3和4压入堆栈；</p>
</li>
<li><p>遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</p>
</li>
<li><p>将5入栈；</p>
</li>
<li><p>接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</p>
</li>
<li><p>将6入栈；</p>
</li>
</ol>
<p>最后是-运算符，计算出35-6的值，即29，由此得出最终结果</p>
<h3 id="4）中缀表达式转后缀表达式"><a href="#4）中缀表达式转后缀表达式" class="headerlink" title="4）中缀表达式转后缀表达式"></a>4）中缀表达式转后缀表达式</h3><p><strong>（1）思路分析</strong></p>
<ul>
<li><p>1) 初始化两个栈：运算符栈operaStack和储存中间结果的栈tempStack；</p>
</li>
<li><p>2) 从左至右扫描中缀表达式；</p>
</li>
<li><p>3) 遇到操作数时，将其压tempStack；</p>
</li>
<li><p>4) 遇到运算符时，比较其与operaStack栈顶运算符的优先级：</p>
<ul>
<li>1.如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</li>
<li>2.否则，若优先级比栈顶运算符的高，也将运算符压入operaStack；</li>
<li>3.否则，将operaStack栈顶的运算符弹出并压入到tempStack中，再次转到4)与operaStack中新的栈顶运算符相比较；<strong>注意：有时会遇到与“（”比较优先级，遇到此情况时，直接将运算符压入，也就是说此处认为“（”优先级最低。</strong></li>
</ul>
</li>
<li><p>5) 遇到括号时：</p>
<ul>
<li>(1) 如果是左括号“(”，则直接压入operaStack</li>
<li>(2) 如果是右括号“)”，则依次弹出operaStack栈顶的运算符，并压入tempStack，直到遇到左括号为止，此时将这一对括号丢弃</li>
</ul>
</li>
<li><p>6) 重复步骤2至5，直到表达式的最右边</p>
</li>
<li><p>7) 将operaStack中剩余的运算符依次弹出并压入tempStack</p>
</li>
<li><p>8) 依次弹出tempStack中的元素并输出，<strong>结果的逆序即为中缀表达式对应的后缀表达式</strong></p>
</li>
</ul>
<p><strong>这里注意：因为tempStack这个栈后续没有pop操作，并且还需要逆序输出，为了方便此处使用List，后期直接返回list即可。</strong></p>
<p><strong>例子</strong>:<strong>1 + ( ( 2 + 3 )× 4) - 5</strong></p>
<table>
<thead>
<tr>
<th>扫描到的元素</th>
<th>tempStack(栈底-&gt;栈顶)</th>
<th>operaStack (栈底-&gt;栈顶)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>空</td>
<td>数字，直接入栈</td>
</tr>
<tr>
<td>+</td>
<td>1</td>
<td>+</td>
<td>s1为空，运算符直接入栈</td>
</tr>
<tr>
<td>(</td>
<td>1</td>
<td>+ (</td>
<td>左括号，直接入栈</td>
</tr>
<tr>
<td>(</td>
<td>1</td>
<td>+ ( (</td>
<td>同上</td>
</tr>
<tr>
<td>2</td>
<td>1 2</td>
<td>+ ( (</td>
<td>数字</td>
</tr>
<tr>
<td>+</td>
<td>1 2</td>
<td>+ ( ( +</td>
<td>s1栈顶为左括号，运算符直接入栈</td>
</tr>
<tr>
<td>3</td>
<td>1 2 3</td>
<td>+ ( ( +</td>
<td>数字</td>
</tr>
<tr>
<td>)</td>
<td>1 2 3 +</td>
<td>+ (</td>
<td>右括号，弹出运算符直至遇到左括号</td>
</tr>
<tr>
<td>×</td>
<td>1 2 3 +</td>
<td>+ ( ×</td>
<td>s1栈顶为左括号，运算符直接入栈</td>
</tr>
<tr>
<td>4</td>
<td>1 2 3 + 4</td>
<td>+ ( ×</td>
<td>数字</td>
</tr>
<tr>
<td>)</td>
<td>1 2 3 + 4 ×</td>
<td>+</td>
<td>右括号，弹出运算符直至遇到左括号</td>
</tr>
<tr>
<td>-</td>
<td>1 2 3 + 4 × +</td>
<td>-</td>
<td>-与+优先级相同，因此弹出+，再压入-</td>
</tr>
<tr>
<td>5</td>
<td>1 2 3 + 4 × + 5</td>
<td>-</td>
<td>数字</td>
</tr>
<tr>
<td>到达最右端</td>
<td><strong>1  2 3 + 4 × + 5 -</strong></td>
<td>空</td>
<td>s1中剩余的运算符</td>
</tr>
</tbody></table>
<h3 id="5）Java程序实现"><a href="#5）Java程序实现" class="headerlink" title="5）Java程序实现"></a>5）Java程序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加入中缀表达式转后缀表达式后计算</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/31 10:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolandNotationPro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String mediumExpression = "(3+4)*5-6";//"3 4 + 5 * 6 -"</span></span><br><span class="line">        String mediumExpression = <span class="string">"1+((2+3)*4)-5"</span>;<span class="comment">//[1,2,3,+,4,*,+,5,–]</span></span><br><span class="line">        List&lt;String&gt; suffixExpression;</span><br><span class="line">        List&lt;String&gt; expression = toArrayList(mediumExpression);</span><br><span class="line">        System.out.println(<span class="string">"mediumExpression="</span>+expression);</span><br><span class="line">        suffixExpression = toSuffixExpression(mediumExpression);</span><br><span class="line">        System.out.println(<span class="string">"suffixExpression="</span>+suffixExpression);</span><br><span class="line">        <span class="keyword">int</span> result = calculate(suffixExpression);</span><br><span class="line">        System.out.println(<span class="string">"结果为："</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将任意格式字符串转换为list，方便遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suffixExpression 逆波兰表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回ArrayList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">toArrayList</span><span class="params">(String suffixExpression)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; expression = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span> c;<span class="comment">//用于遍历suffixExpression</span></span><br><span class="line">        String str;<span class="comment">//用于拼接字符</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; suffixExpression.length())&#123;</span><br><span class="line">            c = suffixExpression.charAt(i);</span><br><span class="line">            <span class="comment">//0的ASCII码对应48，9的ASCII码对应57,空格的ASCII码32，回车13</span></span><br><span class="line">            <span class="comment">//换行10</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">32</span>||c == <span class="number">13</span>||c == <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="comment">//如果是空格、回车、换行不做处理，略过</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>) &#123;<span class="comment">//当不是数字时</span></span><br><span class="line">                expression.add(<span class="string">""</span>+c);<span class="comment">//直接放入list中</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//当为一个数时，需要考虑多位数</span></span><br><span class="line">                str = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; suffixExpression.length() &amp;&amp; (c=suffixExpression.charAt(i)) &gt;= <span class="number">48</span> &amp;&amp; (c=suffixExpression.charAt(i)) &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">                    str += c;<span class="comment">//拼接</span></span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                expression.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> expression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算后缀表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expression 后缀表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(List&lt;String&gt; expression)</span></span>&#123;</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String ele :</span><br><span class="line">                expression) &#123;</span><br><span class="line">            <span class="comment">//遇到数字时，将数字压入堆栈</span></span><br><span class="line">            <span class="keyword">if</span>(ele.matches(<span class="string">"\\d+"</span>))&#123;<span class="comment">//匹配多位数</span></span><br><span class="line">                stack.push(ele);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//遇到运算符时，弹出栈顶的两个数，</span></span><br><span class="line">                <span class="comment">// 用运算符对它们做相应的计算（次顶元素 和 栈顶元素），</span></span><br><span class="line">                <span class="comment">// 并将结果入栈</span></span><br><span class="line">                Integer num1 = Integer.parseInt(stack.pop());</span><br><span class="line">                Integer num2 = Integer.parseInt(stack.pop());</span><br><span class="line">                <span class="keyword">int</span> cal = singleCal(num1, num2, ele);</span><br><span class="line">                stack.push(Integer.toString(cal));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加减乘除的计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> opera 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">singleCal</span><span class="params">(Integer num1,Integer num2,String opera)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(opera.equals(<span class="string">"+"</span>)) <span class="keyword">return</span> num1+num2;</span><br><span class="line">        <span class="keyword">if</span>(opera.equals(<span class="string">"-"</span>)) <span class="keyword">return</span> num2-num1;</span><br><span class="line">        <span class="keyword">if</span>(opera.equals(<span class="string">"*"</span>)) <span class="keyword">return</span> num1*num2;</span><br><span class="line">        <span class="keyword">if</span>(opera.equals(<span class="string">"/"</span>)) <span class="keyword">return</span> num2/num1;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"运算错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">toSuffixExpression</span><span class="params">(String mediumExpression)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; mediumExp = toArrayList(mediumExpression);</span><br><span class="line">        Stack&lt;String&gt; operaStack = <span class="keyword">new</span> Stack&lt;&gt;();<span class="comment">//运算符栈</span></span><br><span class="line">        <span class="comment">//说明:因为tempStack这个栈后续没有pop操作，并且还需要逆序输出，为了方便此处使用List</span></span><br><span class="line">        <span class="comment">//Stack&lt;String&gt; tempStack = new Stack&lt;&gt;();//储存中间结果栈</span></span><br><span class="line">        List&lt;String&gt; tempList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String ele :</span><br><span class="line">                mediumExp) &#123;</span><br><span class="line">            <span class="comment">//遇到数字时，将数字压入tempList</span></span><br><span class="line">            <span class="keyword">if</span>(ele.matches(<span class="string">"\\d+"</span>))&#123;<span class="comment">//匹配多位数</span></span><br><span class="line">                tempList.add(ele);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">//4) 遇到运算符时，比较其与operaStack栈顶运算符的优先级：</span></span><br><span class="line">                <span class="comment">//1.如果operaStack为空，或运算符为左括号“(”，则直接将此运算符入栈；</span></span><br><span class="line">                <span class="keyword">if</span>(operaStack.isEmpty()||ele.equals(<span class="string">"("</span>))&#123;</span><br><span class="line">                    operaStack.push(ele);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ele.equals(<span class="string">")"</span>))&#123;</span><br><span class="line">                    <span class="comment">//如果是右括号“)”，则依次弹出operaStack栈顶的运算符，</span></span><br><span class="line">                    <span class="comment">// 并压入tempList，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class="line">                    String str;</span><br><span class="line">                    <span class="keyword">while</span>(!(str = operaStack.pop()).equals(<span class="string">"("</span>))&#123;</span><br><span class="line">                        tempList.add(str);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;<span class="comment">//2.为+-/*时，若优先级比栈顶运算符的高，也将运算符压入operaStack；</span></span><br><span class="line">                    <span class="comment">//当前优先级小于等于栈顶运算符时</span></span><br><span class="line">                    <span class="keyword">while</span>(operaStack.size()!=<span class="number">0</span> &amp;&amp; isPrior(ele)&lt;=isPrior(operaStack.peek()))&#123;</span><br><span class="line">                        tempList.add(operaStack.pop());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//还需要ele压入operaStack</span></span><br><span class="line">                    operaStack.push(ele);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将operaStack中剩余的运算符依次弹出并压入tempList</span></span><br><span class="line">        <span class="keyword">while</span>(!operaStack.isEmpty())&#123;</span><br><span class="line">            tempList.add(operaStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tempList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断运算符优先级 等级越高，返回数字就大</span></span><br><span class="line"><span class="comment">     * 注意： “（”不算运算操作符，返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">isPrior</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"("</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"符号错误"</span>);<span class="comment">//当输入不是运算操作符时，抛出异常</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2020/01/22/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p> 链表是数据结构的一种。以节点的方式来存储,是链式存储，每个节点包含 data 域， next 域，并且链表的各个节点不一定是连续存储，区别于数组。</p>
<a id="more"></a> 

<h3 id="1-链表的定义"><a href="#1-链表的定义" class="headerlink" title="1. 链表的定义"></a>1. 链表的定义</h3><p>​        n个节点离散分配，彼此通过指针相连，每个节点只有<strong>1个</strong>后续节点，1个1前驱节点，第一个节点没有前驱节点，尾节点没有后续节点。</p>
<h3 id="2-专业术语："><a href="#2-专业术语：" class="headerlink" title="2. 专业术语："></a>2. 专业术语：</h3><p> <strong>首节点</strong>：第一个<strong>有效</strong>节点</p>
<p><strong>尾节点</strong>：最后一个有效节点</p>
<p><strong>头结点</strong>：头节点是第一个有效节点之前的那个节点，头节点并<strong>不存放有效</strong>数据，也没有存放链表中有效节点的个数。加头节点的目的主要是为了方便对链表的操作，简便算法。（对第一个元素结点前插入和删除第一个结点，其操作与其他结点的操作就统一啦）头结点的数据域可以不存储任何信息，也可以存储线性表的长度等3附加信息。</p>
<p><strong>头指针</strong>：是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针。</p>
<p>​    <strong>无论链表是否为空</strong>，头指针均不为空。</p>
<p><strong>头结点不一定是链表的必要元素，头指针是链表的必要元素。</strong></p>
<p>​    头指针：指向头结点的指针变量</p>
<p>​    尾指针：指向尾节点的指针变量</p>
<h3 id="3-如果希望通过一个函数来对链表进行处理，我们至少需要接受链表的哪些参数？"><a href="#3-如果希望通过一个函数来对链表进行处理，我们至少需要接受链表的哪些参数？" class="headerlink" title="3.如果希望通过一个函数来对链表进行处理，我们至少需要接受链表的哪些参数？"></a>3.如果希望通过一个函数来对链表进行处理，我们至少需要接受链表的哪些参数？</h3><p>​        只需要一个参数：头指针</p>
<p>​        因为我们通过头指针可以推算出链表的其他所有参数</p>
<h3 id="4-每一个链表节点的数据类型该如何表示"><a href="#4-每一个链表节点的数据类型该如何表示" class="headerlink" title="4. 每一个链表节点的数据类型该如何表示"></a>4. 每一个链表节点的数据类型该如何表示</h3><ul>
<li>C语言：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span>  <span class="comment">//指针域</span></span><br><span class="line">&#125;NODE, *PNODE;</span><br><span class="line"><span class="comment">//NODE等价于struct Node，*PNODE等价于struct Node ！！</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Java语言：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Integer data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">public</span> Node pNext;<span class="comment">//指针域</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-链表的分类"><a href="#5-链表的分类" class="headerlink" title="5. 链表的分类"></a>5. 链表的分类</h3><p>​    单链表：每个链表的指针域只能指向后面的节点</p>
<p>​    双链表：每一个节点有两个指针域 <a href="https://github.com/Qu-jq/JavaAlgrothms/blob/master/src/datastructure/DoubleLinkedListDemo.java" target="_blank" rel="noopener">双链表程序</a></p>
<p>​    循环链表：能通过任何一个节点找到其他所有的结点</p>
<p>​    非循环链表：</p>
<h3 id="6-链表与数组区别"><a href="#6-链表与数组区别" class="headerlink" title="6. 链表与数组区别"></a>6. 链表与数组区别</h3><ul>
<li><p>数组优点: </p>
<ul>
<li>存取速度很快</li>
</ul>
</li>
<li><p>数组缺点:</p>
<ul>
<li><p>事先需要知道数组的长度</p>
</li>
<li><p>插入删除元素很慢</p>
</li>
<li><p>空间通常有限制</p>
</li>
<li><p>需要大块连续的内存块</p>
</li>
<li><p>链表优点:</p>
<ul>
<li>空间没有限制</li>
<li>插入删除元素很快</li>
</ul>
</li>
<li><p>链表缺点:</p>
<ul>
<li>存取速度很慢</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="7-非循环单链"><a href="#7-非循环单链" class="headerlink" title="7.非循环单链"></a>7.非循环单链</h3><h4 id="1）-非循环单链表插入节点图解"><a href="#1）-非循环单链表插入节点图解" class="headerlink" title="1） 非循环单链表插入节点图解"></a>1） 非循环单链表插入节点图解</h4><p><img src="https://res.cloudinary.com/qujq/image/upload/v1580964273/myPIC/%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5_qyzroj.png" alt="链表插入图"></p>
<p><strong>C语言角度：</strong></p>
<p>插入算法1  推荐  q-&gt;Next=p-&gt;pNext;  p-&gt;Next=q; </p>
<p><strong>注意:  p，q不是节点，是指针变量！这两行的顺序不能倒过来！</strong></p>
<p>插入算法2  r=p-&gt;pNext;  p-&gt;Next=q;  q-&gt;pNext=r; </p>
<h4 id="2）非循环双链表删除节点图解"><a href="#2）非循环双链表删除节点图解" class="headerlink" title="2）非循环双链表删除节点图解"></a>2）非循环双链表删除节点图解</h4><p><img src="https://res.cloudinary.com/qujq/image/upload/v1580964271/myPIC/%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4_ynvszv.png" alt="链表删除图"></p>
<p><strong>C语言角度：</strong></p>
<p>算法1（<strong>不采用</strong>）：    </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p-&gt;pNext=p-&gt;pNext-&gt;pNext; <span class="comment">//代码是A步骤，把第2个节点的指向给了第1个节点的指向</span></span><br><span class="line"><span class="comment">//经过A步骤就实现了B步骤</span></span><br></pre></td></tr></table></figure>

<pre><code>**为什么不行？**</code></pre><p>​    如图，这样做了之后指向第2个节点的指针就没了，就是说我就找不到第2个节点了。这样</p>
<p>​    我就没有释放第2个节点的内存了！</p>
<p>算法2：算法1加一步即可，先临时定义一个指向p后面节点的指针r</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">r=p-&gt;pNext;</span><br><span class="line"></span><br><span class="line">p-&gt;pNext=p-&gt;pNext-&gt;pNext;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(r);</span><br></pre></td></tr></table></figure>

<h4 id="3）-非循环单链表C语言实现："><a href="#3）-非循环单链表C语言实现：" class="headerlink" title="3） 非循环单链表C语言实现："></a>3） 非循环单链表C语言实现：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Note</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;<span class="comment">//数据域</span></span><br><span class="line">	<span class="comment">//PNODE pnext;//指针域 此方法显示错误</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Note</span> * <span class="title">pnext</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;NODE,* PNODE;</span><br><span class="line"></span><br><span class="line"><span class="function">PNODE <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNODE pHead)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span>;<span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNODE pHead)</span></span>;<span class="comment">//链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_list</span><span class="params">(PNODE pHead,<span class="keyword">int</span> pos ,<span class="keyword">int</span> val)</span></span>;<span class="comment">//插入结点  在第几个结点插入的值多少 pos从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_list</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> *pval)</span></span>;<span class="comment">//删除结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE pHead)</span></span>;<span class="comment">//链表排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lenth;</span><br><span class="line">	<span class="keyword">int</span>* pval;<span class="comment">//存放删除元素的值</span></span><br><span class="line">	PNODE pHead = <span class="literal">NULL</span>;<span class="comment">//等价于 struct Note* pHead = NULL;</span></span><br><span class="line">	pHead = create_list();</span><br><span class="line">	traverse_list(pHead);</span><br><span class="line">	lenth = length_list(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"链表的长度是：%d\n"</span>, lenth);</span><br><span class="line">	<span class="keyword">if</span> (is_empty(pHead))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"这是一个空链表！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"排序结果为：\n"</span>);</span><br><span class="line">	sort_list(pHead);<span class="comment">//排序</span></span><br><span class="line">	traverse_list(pHead);<span class="comment">//显示</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"插入测试:\n"</span>);</span><br><span class="line">	insert_list(pHead, <span class="number">4</span>, <span class="number">23</span>);</span><br><span class="line">	traverse_list(pHead);<span class="comment">//显示</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"删除测试:\n"</span>);</span><br><span class="line">	delete_list(pHead,<span class="number">4</span>, &amp;pval);</span><br><span class="line">	traverse_list(pHead);<span class="comment">//显示</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PNODE <span class="title">create_list</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入链表的长度："</span>);</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">	PNODE pHead;</span><br><span class="line">	pHead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNODE));<span class="comment">//创建一个头结点</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == pHead)</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(len&lt;<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	pHead-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">	PNODE Pnew = pHead;<span class="comment">//创建一个不断指向最后一个的结点</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		PNODE p = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">		<span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		Pnew-&gt;pnext = p;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"请输入第%d个结点的值："</span>,i+<span class="number">1</span>);</span><br><span class="line">		scanf_s(<span class="string">"%d"</span>, &amp;val);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		p-&gt;data = val;</span><br><span class="line">		p-&gt;pnext = <span class="literal">NULL</span>;</span><br><span class="line">		Pnew = p;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">NULL</span> != pHead-&gt;pnext)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pHead-&gt;pnext-&gt;data);</span><br><span class="line">		pHead = pHead-&gt;pnext;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;<span class="comment">//程序结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == pHead-&gt;pnext)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">NULL</span> != pHead-&gt;pnext)</span><br><span class="line">	&#123;</span><br><span class="line">		pHead = pHead-&gt;pnext;</span><br><span class="line">		++len;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j, t;</span><br><span class="line">	<span class="keyword">int</span> len = length_list(pHead);</span><br><span class="line">	PNODE p=<span class="literal">NULL</span>;</span><br><span class="line">	PNODE q=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>,p = pHead-&gt;pnext;i &lt; len - <span class="number">1</span>;p=p-&gt;pnext,i++)<span class="comment">//最后一个不用遍历，所以len-1</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = i + <span class="number">1</span>,q=p-&gt;pnext;j &lt; len;q=q-&gt;pnext,j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(q-&gt;data &gt; p-&gt;data)          <span class="comment">//if (a[i] &gt; a[j])</span></span><br><span class="line">			&#123;</span><br><span class="line">				t = p-&gt;data;<span class="comment">//t = a[i];</span></span><br><span class="line">				p-&gt;data = q-&gt;data;<span class="comment">//a[i] = a[j];</span></span><br><span class="line">				q-&gt;data=t;<span class="comment">//a[j] = a[i];</span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_list</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	PNODE p = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	PNODE q = pHead;</span><br><span class="line">	<span class="keyword">if</span> (pos&lt;<span class="number">1</span> || pos&gt;length_list(pHead) + <span class="number">1</span>)<span class="comment">//插入位置检错</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i &lt; pos - <span class="number">1</span>)<span class="comment">//找到要插入位置的前一个结点的位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		q = q-&gt;pnext;</span><br><span class="line">		++i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (i &gt; pos + <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	p-&gt;data = val;</span><br><span class="line">	p-&gt;pnext = q-&gt;pnext;</span><br><span class="line">	q-&gt;pnext = p;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_list</span><span class="params">(PNODE pHead, <span class="keyword">int</span> pos, <span class="keyword">int</span>* pval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	PNODE p = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	PNODE q = pHead;</span><br><span class="line">	<span class="keyword">if</span> (pos&lt;<span class="number">1</span> || pos&gt;length_list(pHead))<span class="comment">//插入位置检错</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i &lt; pos - <span class="number">1</span>)<span class="comment">//找到要插入位置的前一个结点的位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		q = q-&gt;pnext;</span><br><span class="line">		++i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (i &gt; pos + <span class="number">1</span> || <span class="literal">NULL</span> == q-&gt;pnext)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	p = q-&gt;pnext;</span><br><span class="line">	q-&gt;pnext = q-&gt;pnext-&gt;pnext;</span><br><span class="line">	*pval=p-&gt;data;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4）-非循环单链表Java实现："><a href="#4）-非循环单链表Java实现：" class="headerlink" title="4） 非循环单链表Java实现："></a>4） 非循环单链表Java实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表练习</span></span><br><span class="line"><span class="comment"> * 增插删改查排</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/22 10:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        linkedList.addNode(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">        linkedList.addNode(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        linkedList.addNode(<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">        linkedList.addNode(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">        linkedList.showLinkedList();</span><br><span class="line">        linkedList.insertNode(<span class="number">2</span>,<span class="keyword">new</span> Node(<span class="number">10</span>));</span><br><span class="line">        linkedList.showLinkedList();</span><br><span class="line">        System.out.println(<span class="string">"链表的长度为："</span>+linkedList.lenLinkedList());</span><br><span class="line">        linkedList.deleteNode(<span class="number">4</span>);</span><br><span class="line">        linkedList.showLinkedList();</span><br><span class="line">        System.out.println(<span class="string">"链表的长度为："</span>+linkedList.lenLinkedList());</span><br><span class="line">        <span class="comment">//错误性测试</span></span><br><span class="line">        linkedList.insertNode(<span class="number">5</span>,<span class="keyword">new</span> Node(<span class="number">10</span>));</span><br><span class="line">        linkedList.deleteNode(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//修改测试</span></span><br><span class="line">        linkedList.reviseNode(<span class="number">2</span>,<span class="keyword">new</span> Node(<span class="number">11</span>));</span><br><span class="line">        linkedList.showLinkedList();</span><br><span class="line">        <span class="comment">//排序测试</span></span><br><span class="line">        System.out.println(<span class="string">"排序结果："</span>);</span><br><span class="line">        linkedList.sortLinkedList();</span><br><span class="line">        linkedList.showLinkedList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点（c语言中为结构体）</span></span><br><span class="line"><span class="comment"> * 每个Node对象就是一个节点，与c语言不同，c语言需要自己分配空间，这里创建一个对象，就自动分配空间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Integer data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">public</span> Node pNext;<span class="comment">//指针域</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                <span class="string">"data="</span> + data +</span><br><span class="line">                <span class="string">", pNext="</span> + pNext +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span></span>&#123;</span><br><span class="line">    <span class="comment">//先初始化一个头节点，头节点不动，不存放具体数据</span></span><br><span class="line">    <span class="keyword">private</span> Node pHead = <span class="keyword">new</span> Node(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在链表末尾添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 添加的新节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置一个辅助遍历</span></span><br><span class="line">        Node temp = pHead;</span><br><span class="line">        <span class="keyword">while</span>(temp.pNext!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = temp.pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.pNext = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断链表是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 输入头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回真假</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node.pNext == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示链表的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty(pHead))&#123;</span><br><span class="line">            System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = pHead;</span><br><span class="line">        System.out.println(<span class="string">"链表的数据为："</span>);</span><br><span class="line">        <span class="keyword">while</span>(temp.pNext!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = temp.pNext;</span><br><span class="line">            System.out.print(temp.data+<span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();<span class="comment">//换行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lenLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node temp = pHead;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp.pNext!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = temp.pNext;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置插入节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 插入位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 新增节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(<span class="keyword">int</span> pos,Node node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先判断插入位置是否合理</span></span><br><span class="line">        <span class="keyword">if</span>(pos&lt;<span class="number">1</span>|pos&gt;lenLinkedList())&#123;</span><br><span class="line">            System.out.println(<span class="string">"插入节点的位置不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查找要插入节点的前一个节点 temp</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        Node temp = pHead;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;pos-<span class="number">1</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            temp = temp.pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入操作</span></span><br><span class="line">        Node nodeTemp;</span><br><span class="line">        nodeTemp = temp.pNext;  <span class="comment">//前一个节点的指针域保存在nodeTemp中</span></span><br><span class="line">        temp.pNext = node;      <span class="comment">//前一个节点的指针域变为新插入节点的地址</span></span><br><span class="line">        node.pNext = nodeTemp;  <span class="comment">//新插入节点的指针域变为前一个节点temp的指针域</span></span><br><span class="line">        <span class="comment">//由此可见数据结构还是使用C语言，能够有个较清晰的认识</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除固定位置的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 删除节点的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先判断删除位置是否合理</span></span><br><span class="line">        <span class="keyword">if</span>(pos&lt;<span class="number">1</span>|pos&gt;lenLinkedList())&#123;</span><br><span class="line">            System.out.println(<span class="string">"删除节点的位置不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查找要删除节点的前一个节点 temp</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        Node temp = pHead;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;pos-<span class="number">1</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            temp = temp.pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除操作</span></span><br><span class="line">        temp.pNext = temp.pNext.pNext;      <span class="comment">//将删除节点的指针域传给前一个节点的指针域</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改固定位置的节点，即将此位置的节点替换为新的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pos 位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviseNode</span><span class="params">(<span class="keyword">int</span> pos,Node node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先判断修改位置是否合理</span></span><br><span class="line">        <span class="keyword">if</span>(pos&lt;<span class="number">1</span>|pos&gt;lenLinkedList())&#123;</span><br><span class="line">            System.out.println(<span class="string">"修改节点的位置不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查找要修改节点的前一个节点 temp</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        Node temp = pHead;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;pos-<span class="number">1</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            temp = temp.pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改操作</span></span><br><span class="line">        Node nodeTemp;</span><br><span class="line">        nodeTemp = temp.pNext.pNext;  <span class="comment">//修改节点的指针域保存在nodeTemp中</span></span><br><span class="line">        temp.pNext = node;      <span class="comment">//前一个节点的指针域变为新插入节点的地址</span></span><br><span class="line">        node.pNext = nodeTemp;  <span class="comment">//新插入节点的指针域变为修改节点的下一个节点的地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将列表数据排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j, t;</span><br><span class="line">        <span class="keyword">int</span> len = lenLinkedList();</span><br><span class="line">        Node p;</span><br><span class="line">        Node q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>,p = pHead.pNext;i &lt; len - <span class="number">1</span>;p=p.pNext,i++)<span class="comment">//最后一个不用遍历，所以len-1</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>, q=p.pNext;j &lt; len;q=q.pNext,j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(q.data &gt; p.data)          <span class="comment">//if (a[i] &gt; a[j])</span></span><br><span class="line">                &#123;</span><br><span class="line">                    t = p.data;<span class="comment">//t = a[i];</span></span><br><span class="line">                    p.data = q.data;<span class="comment">//a[i] = a[j];</span></span><br><span class="line">                    q.data=t;<span class="comment">//a[j] = a[i];</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5）-面试题目"><a href="#5）-面试题目" class="headerlink" title="5） 面试题目"></a>5） 面试题目</h4><h5 id="（1）查找单链表中倒数第k个节点（新浪面试题）"><a href="#（1）查找单链表中倒数第k个节点（新浪面试题）" class="headerlink" title="（1）查找单链表中倒数第k个节点（新浪面试题）"></a>（1）查找单链表中倒数第k个节点（新浪面试题）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找单链表中倒数第k个节点（新浪面试题）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> backPos 倒数节点位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">searchBackNode</span><span class="params">(<span class="keyword">int</span> backPos)</span></span>&#123;</span><br><span class="line">    <span class="comment">//首先判断查找位置是否合理</span></span><br><span class="line">    <span class="keyword">int</span> len = lenLinkedList();</span><br><span class="line">    <span class="keyword">if</span>(backPos&lt;<span class="number">1</span>|backPos&gt;len)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"查找节点的位置不正确"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Node temp = pHead;</span><br><span class="line">    <span class="comment">//倒数backPos个节点相当于第len - backPos+1个节点</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; len - backPos+<span class="number">1</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        temp = temp.pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）将单链表进行反转（腾讯面试题）"><a href="#（2）将单链表进行反转（腾讯面试题）" class="headerlink" title="（2）将单链表进行反转（腾讯面试题）"></a>（2）将单链表进行反转（腾讯面试题）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将单链表进行反转（腾讯面试题）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pHead 头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseLinkedList</span><span class="params">(Node pHead)</span></span>&#123;</span><br><span class="line">    <span class="comment">//当链表为空或者长度为1时，无需翻转直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(pHead.pNext==<span class="keyword">null</span> || pHead.pNext.pNext == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node curNode = pHead.pNext;<span class="comment">//辅助节点</span></span><br><span class="line">    Node nextNode;<span class="comment">//当前节点的下一个节点</span></span><br><span class="line">    Node newpHead = <span class="keyword">new</span> Node(<span class="keyword">null</span>);<span class="comment">//新的链表头部</span></span><br><span class="line">    <span class="keyword">while</span>(curNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        nextNode = curNode.pNext;<span class="comment">//暂时保存当前节点的下一个节点</span></span><br><span class="line">        <span class="comment">//将当前节点插入到新链表的第一个节点位置</span></span><br><span class="line">        curNode.pNext = newpHead.pNext;</span><br><span class="line">        newpHead.pNext = curNode;</span><br><span class="line">        curNode = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    pHead.pNext = newpHead.pNext;<span class="comment">//将新链表的头节点换为原来的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（3）从尾到头打印单链表（百度面试题）"><a href="#（3）从尾到头打印单链表（百度面试题）" class="headerlink" title="（3）从尾到头打印单链表（百度面试题）"></a>（3）从尾到头打印单链表（百度面试题）</h5><p>方法一：循环遍历，逆序输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从尾到头打印单链表（百度面试题）</span></span><br><span class="line"><span class="comment"> * 方法一：循环遍历，逆序输出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pHead 头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseShow1</span><span class="params">(Node pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead.pNext == <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lenLinkedList()+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        Node temp = pHead;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; lenLinkedList() - i+<span class="number">1</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            temp = temp.pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(temp.data+<span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：利用栈这个数据结构，将每个节点压入进去，利用栈先进后出的特点，逆序打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从尾到头打印单链表（百度面试题）</span></span><br><span class="line"><span class="comment"> * 方法二：利用栈这个数据结构，将每个节点压入进去，利用栈先进后出的特点，逆序打印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pHead 头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseShow2</span><span class="params">(Node pHead)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead.pNext == <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node temp = pHead.pNext;<span class="comment">//指向第一个节点</span></span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">//压栈</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">        stack.push(temp);</span><br><span class="line">        temp=temp.pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        System.out.print(stack.pop().data+<span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="（4）合并两个有序单链表，合并之后的链表仍然是有序的（都是从小到大"><a href="#（4）合并两个有序单链表，合并之后的链表仍然是有序的（都是从小到大" class="headerlink" title="（4）合并两个有序单链表，合并之后的链表仍然是有序的（都是从小到大)"></a>（4）合并两个有序单链表，合并之后的链表仍然是有序的（都是从小到大)</h5><p>思路：</p>
<p>1.传入两个链表的头结点</p>
<p>2.新建一个链表的头结点newHead</p>
<p>3.循环比较传入的两个链表的排序变量，谁小（这里按从小到大安排序）谁加到newHead的后边</p>
<p>4.如果有一个链表已经为空，那么就只是针对另一个链表进行添加即可，直到两个链表都为空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个有序单链表，合并之后的链表仍然是有序的（都是从小到大)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pHead1 第一个有序节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pHead2 第二个有序节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">mergeOrderedList</span><span class="params">(Node pHead1,Node pHead2)</span></span>&#123;</span><br><span class="line">    Node newHead = <span class="keyword">new</span> Node(<span class="keyword">null</span>);<span class="comment">//合并的新链表的头部</span></span><br><span class="line">    Node temp1 = pHead1.pNext;<span class="comment">//pHead1遍历</span></span><br><span class="line">    Node temp2 = pHead2.pNext;<span class="comment">//pHead2遍历</span></span><br><span class="line">    Node newTemp = newHead;<span class="comment">//新链表遍历</span></span><br><span class="line">    <span class="keyword">if</span>((temp1==<span class="keyword">null</span>) &amp;&amp; (temp2==<span class="keyword">null</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当两个链表都不为空时</span></span><br><span class="line">    <span class="keyword">while</span>((temp1!=<span class="keyword">null</span>) &amp;&amp; (temp2!=<span class="keyword">null</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp1.data&lt;=temp2.data)&#123;</span><br><span class="line">            newTemp.pNext=temp1;</span><br><span class="line">            temp1 = temp1.pNext;<span class="comment">//当pHead1链表的值较小时，将其传给新链表，自身向后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            newTemp.pNext = temp2;</span><br><span class="line">            temp2 = temp2.pNext;<span class="comment">//当pHead2链表的值较小时，将其传给新链表，自身向后移</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newTemp = newTemp.pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当第一个链表先为空时</span></span><br><span class="line">    <span class="keyword">if</span>(temp1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        newTemp.pNext = temp2;<span class="comment">//将第二个链表剩下的传给新链表即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当第二个链表先为空时</span></span><br><span class="line">    <span class="keyword">if</span>(temp2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        newTemp.pNext = temp1;<span class="comment">//将第一个链表剩下的传给新链表即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-循环单向链表"><a href="#8-循环单向链表" class="headerlink" title="8.循环单向链表"></a>8.循环单向链表</h3><h4 id="（1）实际应用—-解决约瑟夫问题"><a href="#（1）实际应用—-解决约瑟夫问题" class="headerlink" title="（1）实际应用—-解决约瑟夫问题"></a>（1）实际应用—-解决约瑟夫问题</h4><p>约瑟夫问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p>
<p>以下面情况为例：</p>
<p>n = 5 , 即有5个人 </p>
<p>k = 1, 从第一个人开始报数</p>
<p>m = 2, 数2下，数到2的出列</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1580964270/myPIC/%E5%BE%AA%E7%8E%AF%E5%8D%95%E9%93%BE%E8%A1%A81_ryxdyj.png" alt="循环单链"></p>
<h4 id="（2）总体思路"><a href="#（2）总体思路" class="headerlink" title="（2）总体思路"></a>（2）总体思路</h4><p>用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>
<h4 id="（3）构建一个单向的环形链表思路"><a href="#（3）构建一个单向的环形链表思路" class="headerlink" title="（3）构建一个单向的环形链表思路"></a>（3）构建一个单向的环形链表思路</h4><ol>
<li><p>先创建第一个节点, 让 first 指向该节点，并形成环形</p>
</li>
<li><p>后面当我们每创建一个新的节点，就把该节点，加入到已有的环形链表中即可.</p>
</li>
</ol>
<h4 id="（4）遍历环形链表思路"><a href="#（4）遍历环形链表思路" class="headerlink" title="（4）遍历环形链表思路"></a>（4）遍历环形链表思路</h4><ol>
<li><p>先让一个辅助指针(变量) curNode，指向first节点</p>
</li>
<li><p>然后通过一个while循环遍历 该环形链表即可， curBoy.next == first 结束</p>
</li>
</ol>
<h4 id="（5）出圈思路"><a href="#（5）出圈思路" class="headerlink" title="（5）出圈思路"></a>（5）出圈思路</h4><ol>
<li>需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点.</li>
</ol>
<p>补充： 小孩报数前，先让 first 和 helper 移动 k - 1次（也就是让first移动到开始数数的地方）</p>
<ol start="2">
<li><p>当小孩报数时，让first 和 helper 指针同时 的移动 m - 1 次</p>
</li>
<li><p>这时就可以将first 指向的小孩节点 出圈</p>
</li>
</ol>
<p>first = first .next </p>
<p>helper.next = first </p>
<p>原来first 指向的节点就没有任何引用，就会被回收</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1580964270/myPIC/%E5%BE%AA%E7%8E%AF%E5%8D%95%E9%93%BE%E8%A1%A82_rxss2y.png" alt=""></p>
<p>出圈的顺序</p>
<p>2-&gt;4-&gt;1-&gt;5-&gt;3</p>
<h4 id="（6）Java程序实现"><a href="#（6）Java程序实现" class="headerlink" title="（6）Java程序实现"></a>（6）Java程序实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环单向链表解决约瑟夫问题</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/27 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSingleLinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CircleSingleLinkedList cSLL = <span class="keyword">new</span> CircleSingleLinkedList();</span><br><span class="line">        cSLL.creat(<span class="number">5</span>);</span><br><span class="line">        cSLL.show();</span><br><span class="line">        cSLL.outList(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleNode</span></span>&#123;</span><br><span class="line">    Integer data;<span class="comment">//数据域，编号</span></span><br><span class="line">    CircleNode next;<span class="comment">//指向下一个节点，默认为null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleNode</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单向循环链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleSingleLinkedList</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个first的节点</span></span><br><span class="line">    <span class="keyword">private</span> CircleNode first = <span class="keyword">new</span> CircleNode(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个单向循环链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 循环链表的节点个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据校验</span></span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"个数不正确"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        CircleNode curNode = <span class="keyword">null</span>;<span class="comment">//辅助节点，帮助构建环形链表</span></span><br><span class="line">        <span class="comment">//创建</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            CircleNode newNode = <span class="keyword">new</span> CircleNode(i);</span><br><span class="line">            <span class="comment">//当为第一个节点时</span></span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">                first = newNode;</span><br><span class="line">                first.next = newNode;</span><br><span class="line">                curNode = first;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                curNode.next = newNode;</span><br><span class="line">                newNode.next = first;<span class="comment">//新增节点的next指向第一个节点</span></span><br><span class="line">                curNode = newNode;<span class="comment">//当前指针变为新增的节点</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历整个链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先检查是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"这是一个空链表"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CircleNode curNode = first;<span class="comment">//辅助节点，帮助遍历环形链表</span></span><br><span class="line">        <span class="comment">//遍历整个链表</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.print(curNode.data+<span class="string">"\t"</span>);</span><br><span class="line">            curNode = curNode.next;</span><br><span class="line">            <span class="keyword">if</span> (curNode == first)&#123;</span><br><span class="line">                flag=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出圈顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startNum 从第几个开始数数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countNum 数几个出圈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outList</span><span class="params">(<span class="keyword">int</span> startNum,<span class="keyword">int</span> countNum)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数据校验</span></span><br><span class="line">        <span class="keyword">if</span>(startNum &lt; <span class="number">1</span> || countNum &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入数据不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CircleNode helper = first;<span class="comment">//辅助指针</span></span><br><span class="line">        <span class="comment">// 指向first的前一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(helper.next == first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            helper = helper.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//报数之前，先让helper,first移动startNum-1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            helper = helper.next;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始报数</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//当只剩下一个节点时，退出循环</span></span><br><span class="line">            <span class="keyword">if</span>(helper == first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到countNum的位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                helper = helper.next;</span><br><span class="line">                first = first.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//出圈</span></span><br><span class="line">            System.out.printf(<span class="string">"第%d号出圈\n"</span>,first.data);</span><br><span class="line">            first = first.next;</span><br><span class="line">            helper.next = first;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印最后剩下的一个</span></span><br><span class="line">        System.out.printf(<span class="string">"最后剩下%d号\n"</span>,first.data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2020/01/19/%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p> 遇到排队问题，经常会使用到队列。先到的先服务，后到的从队伍后面排队，等待服务。</p>
<a id="more"></a> 

<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p> 一种可以实现“<strong>先进先出</strong>”的存储结构</p>
<p><strong>栈只允许在一端进行操作</strong>，而<strong>队列在两端操作</strong>，队尾进行存入，队头进行删除 </p>
<h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h2><ul>
<li><p>静态队列(连续队列) </p>
<p><strong>静态队列通常必须是循环队列</strong></p>
</li>
<li><p>动态队列(链式队列)</p>
</li>
</ul>
<h2 id="3-静态队列"><a href="#3-静态队列" class="headerlink" title="3.静态队列"></a>3.静态队列</h2><h3 id="1-静态非循环队列"><a href="#1-静态非循环队列" class="headerlink" title="1) 静态非循环队列"></a>1) 静态非循环队列</h3><h4 id="（1）使用数组模拟队列的思路"><a href="#（1）使用数组模拟队列的思路" class="headerlink" title="（1）使用数组模拟队列的思路"></a>（1）使用数组模拟队列的思路</h4><ul>
<li><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，maxSize 是该队列的最大容量，即数组长度。</p>
</li>
<li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变<strong>量</strong> front及rear分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear则是随着数据输入而改变。</p>
</li>
</ul>
<p><strong>注意</strong>：front指向队列第一个数据的前一个位置，rear指向最后一个数据的位置。</p>
<p><strong>初始化时front和rear都为-1</strong>。</p>
<h4 id="（2）判断队列满和空的条件"><a href="#（2）判断队列满和空的条件" class="headerlink" title="（2）判断队列满和空的条件"></a>（2）判断队列满和空的条件</h4><p>满：rear+1 == maxSize;</p>
<p>空：front == rear；</p>
<h4 id="（3）存在的问题"><a href="#（3）存在的问题" class="headerlink" title="（3）存在的问题"></a>（3）存在的问题</h4><p>数组使用一次就不能再次使用，不能达到复用的效果（这时就需要使用循环队列）</p>
<h4 id="（4）代码实现："><a href="#（4）代码实现：" class="headerlink" title="（4）代码实现："></a>（4）代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组模拟队列</span></span><br><span class="line"><span class="comment"> * 存在的问题：</span></span><br><span class="line"><span class="comment"> * 数组只能利用一次，不能重复利用（应该使用循环数组解决）</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/18 19:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        ArrayQueue arrayQueue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">char</span> key;<span class="comment">//用于接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//控制台输入</span></span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">"s(show):显示队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"e(exit):退出队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"a(add):添加队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"g(get):从队列取出数据"</span>);</span><br><span class="line">            System.out.println(<span class="string">"h(head):显示队列头的数据"</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符串</span></span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        arrayQueue.showQueue();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入需要插入的数据："</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        arrayQueue.addQueue(value);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> val = arrayQueue.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"取出的数据是%d\n"</span>,val);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> val = arrayQueue.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"取出的队列头的数据是%d\n"</span>,val);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于模拟队列存放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];<span class="comment">//初始化队列</span></span><br><span class="line">        front = -<span class="number">1</span>;<span class="comment">//指向队列头部，指向队列头的前一个位置</span></span><br><span class="line">        rear = -<span class="number">1</span>;<span class="comment">//指向队列的尾部，指向队列的最后一个数据（即就是队列最后一个数据）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == maxSize-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"列表已满，不能插入数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rear++;</span><br><span class="line">        arr[rear]=info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队列数据，出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，无法获取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，无法获取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列头部信息，只是显示，不是出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，无法获取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-静态循环队列"><a href="#2-静态循环队列" class="headerlink" title="2) 静态循环队列"></a>2) 静态循环队列</h3><h4 id="（1）静态队列为什么必须是循环队列"><a href="#（1）静态队列为什么必须是循环队列" class="headerlink" title="（1）静态队列为什么必须是循环队列"></a>（1）静态队列为什么必须是循环队列</h4><p>防止浪费空间</p>
<h4 id="（2）循环队列需要几个参数来确定"><a href="#（2）循环队列需要几个参数来确定" class="headerlink" title="（2）循环队列需要几个参数来确定"></a>（2）循环队列需要几个参数来确定</h4><p>需要<strong>2个参数</strong>来确定: 队头指针front和队尾指针rear。队头删除，队尾存入</p>
<p><strong>注意</strong>: 两个参数不同场合有不同的含义，这个先记住，慢慢体会</p>
<p><strong>场合1</strong>  队列初始化  front和rear的值都是零</p>
<p><strong>场合2</strong>  队列非空</p>
<p>front代表的是队列的第一个元素，</p>
<p>rear代表的是队列的最后一个有效元素的<strong>下一个</strong>元素，是<strong>下一个！！！</strong></p>
<p><strong>场合3</strong>  队列空   front和rear的值相等，但不一定是零</p>
<h4 id="（3）循环队列入队伪算法讲解"><a href="#（3）循环队列入队伪算法讲解" class="headerlink" title="（3）循环队列入队伪算法讲解"></a>（3）循环队列入队伪算法讲解</h4><p>第一步: 将值存入rear所代表的位置</p>
<p>第二步: <strong>错误</strong>写法 rear=rear+1; (＞﹏＜) </p>
<p><strong>正确写法</strong>  rear=（rear+1）%数组的长度</p>
<h4 id="（4）循环队列出队伪算法讲解"><a href="#（4）循环队列出队伪算法讲解" class="headerlink" title="（4）循环队列出队伪算法讲解"></a>（4）循环队列出队伪算法讲解</h4><p>front=（front+1）%数组的长度</p>
<h4 id="（5）队列的长度-有效数据的个数"><a href="#（5）队列的长度-有效数据的个数" class="headerlink" title="（5）队列的长度(有效数据的个数)"></a>（5）队列的长度(有效数据的个数)</h4><p>将未进入循环和进入循环综合之后：</p>
<p><strong>length = （rear + maxSize - front）%maxSize</strong></p>
<h4 id="（6）如何判断循环队列是否为空-后面有图解"><a href="#（6）如何判断循环队列是否为空-后面有图解" class="headerlink" title="（6）如何判断循环队列是否为空(后面有图解)"></a>（6）如何判断循环队列是否为空(后面有图解)</h4><p>如果front与rear的值相等，则该队列就一定为空</p>
<h4 id="（7）如何判断循环队列是否已满-后面有图解"><a href="#（7）如何判断循环队列是否已满-后面有图解" class="headerlink" title="（7）如何判断循环队列是否已满(后面有图解)"></a>（7）如何判断循环队列是否已满(后面有图解)</h4><p><strong>预备知识1</strong>: 当front = rear时，这个循环队列是满的还是空的？这个没有办法判断。为了区分空和满，规定front指向队头元素的位置，rear指向队尾元素的下一个位置(<strong>rear指向的必须为空</strong>)，所以满队元素个数比数组元素个数少一个，<strong>也就是说牺牲一个存储位置，换来了不再纠结空和满的判断(∩_∩)</strong></p>
<p><strong>预备知识2</strong>: front的值可能比rear大，也可能比rear小，也可能两者相等</p>
<p>那么如何判断队列已满？就是如果f和r的值紧挨着，则队列已满</p>
<p>用C语言伪算法表示就是:</p>
<p>if（（rear+1）%数组长度== front）</p>
<p>​        已满</p>
<p>else</p>
<p>​        不满</p>
<h4 id="（8）图解"><a href="#（8）图解" class="headerlink" title="（8）图解"></a>（8）图解</h4><p><img src="https://res.cloudinary.com/qujq/image/upload/v1580966115/myPIC/DataStructure/%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E5%9B%BE%E8%A7%A3_lll2x4.png" alt="图解"></p>
<h4 id="（8）代码实现"><a href="#（8）代码实现" class="headerlink" title="（8）代码实现"></a>（8）代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环数组队列</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/19 12:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        CircleArrayQueue arrayQueue = <span class="keyword">new</span> CircleArrayQueue(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">char</span> key;<span class="comment">//用于接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//控制台输入</span></span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">"s(show):显示队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"e(exit):退出队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"a(add):添加队列"</span>);</span><br><span class="line">            System.out.println(<span class="string">"g(get):从队列取出数据"</span>);</span><br><span class="line">            System.out.println(<span class="string">"h(head):显示队列头的数据"</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符串</span></span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        arrayQueue.showQueue();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入需要插入的数据："</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        arrayQueue.addQueue(value);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> val = arrayQueue.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"取出的数据是%d\n"</span>,val);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> val = arrayQueue.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">"取出的队列头的数据是%d\n"</span>,val);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop=<span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序退出"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleArrayQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;<span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;<span class="comment">//队列头  指向队列第一个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队列尾 队列的最后一个有效元素的下一个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;<span class="comment">//该数组用于模拟队列存放数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];<span class="comment">//初始化队列</span></span><br><span class="line">        front = <span class="number">0</span>;<span class="comment">//指向队列头部，指向队列第一个元素</span></span><br><span class="line">        rear = <span class="number">0</span>;<span class="comment">//指向队列的尾部，队列的最后一个有效元素的下一个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear+<span class="number">1</span>)%maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"列表已满，不能插入数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        arr[rear]=info;<span class="comment">//和非循环队列不同</span></span><br><span class="line">        rear = (rear+<span class="number">1</span>)%maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队列数据，出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，无法获取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = arr[front];</span><br><span class="line">        front = (front+<span class="number">1</span>)%maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，无法获取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从front开始遍历，直到rear的前一个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front+size(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"arr[%d]=%d\n"</span>,i%maxSize,arr[i%maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算队列有效数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear+maxSize-front)%maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列头部信息，只是显示，不是出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空，无法获取数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）非循环队列与循环队列的区别"><a href="#3）非循环队列与循环队列的区别" class="headerlink" title="3）非循环队列与循环队列的区别"></a>3）非循环队列与循环队列的区别</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">front</th>
<th align="center">rear</th>
<th>判空</th>
<th>判满</th>
<th align="center">入队</th>
<th align="center">出队</th>
</tr>
</thead>
<tbody><tr>
<td align="center">非循环队列</td>
<td align="center">指向第一个有效数据的前一个位置（初始值为-1）</td>
<td align="center">指向最后一个有效数据的位置（初始值为-1）</td>
<td>rear==front</td>
<td>rear+1==maxSize</td>
<td align="center">1.判断是否满; 2.rear++; 3. 将值赋给rear所在位置的队列</td>
<td align="center">1.判断是否为空；2.front++；3. 返回front所在位置的值</td>
</tr>
<tr>
<td align="center">循环队列</td>
<td align="center">指向第一个有效数据的位置（初始值为0）</td>
<td align="center">指向最后一个有效数据的后一个位置（初始值为0）</td>
<td>rear==front</td>
<td>(rear+1)%maxSize == front</td>
<td align="center">1. 判断是否满；2. 将值赋给rear所在位置的队列；3. rear=(rear+1)%maxSize</td>
<td align="center">1. 判断是否为空；2. 将font所在位置的值传给中间变量temp；3. front=(front+1)%maxSize；4. 返回temp</td>
</tr>
</tbody></table>
<h2 id="4-动态队列-待完成"><a href="#4-动态队列-待完成" class="headerlink" title="4.动态队列(待完成)"></a>4.动态队列(待完成)</h2>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>稀疏数组</title>
    <url>/2020/01/18/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p>
<a id="more"></a> 

<h3 id="1-稀疏数组处理方法："><a href="#1-稀疏数组处理方法：" class="headerlink" title="1.稀疏数组处理方法："></a>1.稀疏数组处理方法：</h3><p>1)记录数组一共有几行几列，有多少个不同的值</p>
<p>2)把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</p>
<h3 id="2-处理思路："><a href="#2-处理思路：" class="headerlink" title="2. 处理思路："></a>2. 处理思路：</h3><ul>
<li><p>原始二维数组转换为稀疏数组</p>
<p>1）遍历原始二维数组，求出一共多少非零元素（sum）</p>
<p>2）创建稀疏数组，sum+1行3列</p>
<p>3）将二维数组的有效数据存放进稀疏数组</p>
</li>
<li><p>稀疏数组转换为原始二维数组</p>
<p>1）先读取稀疏数组的第一行数据，根据第一行数据，创建原始二维数组</p>
<p>2）读取稀疏数组后几行的数据，并赋值给原始二维数</p>
</li>
</ul>
<h3 id="3-应用实例"><a href="#3-应用实例" class="headerlink" title="3. 应用实例"></a>3. 应用实例</h3><p>使用稀疏数组保存未完成的棋盘：</p>
<p><img src="https://res.cloudinary.com/qujq/image/upload/v1580964274/myPIC/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84_dn6ccv.png" alt="稀疏数组"></p>
<h3 id="4-代码："><a href="#4-代码：" class="headerlink" title="4. 代码："></a>4. 代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datastructure;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以棋盘为背景，介绍稀疏数组与原始数组之间的相互转换</span></span><br><span class="line"><span class="comment"> * Created by qjq on 2020/1/18 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将原始二维数组转换为稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> OriArr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OriArr2SparseArr</span><span class="params">(<span class="keyword">int</span>[][] OriArr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//输出原始数组</span></span><br><span class="line">        System.out.println(<span class="string">"原始数组为："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OriArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OriArr[i].length; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>,OriArr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将二维数组转换为稀疏数组</span></span><br><span class="line">        <span class="comment">//1.遍历原始二维数组，求出一共多少非零元素</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OriArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OriArr[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(OriArr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"非零元素的个数："</span>+sum);</span><br><span class="line">        <span class="comment">//2.创建稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//计数：非零元素</span></span><br><span class="line">        <span class="keyword">int</span>[][] sparseArr = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">0</span>]=OriArr.length;<span class="comment">//行数</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">1</span>]=OriArr[<span class="number">0</span>].length;<span class="comment">//列数</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">2</span>]=sum;</span><br><span class="line">        <span class="comment">//3.将二维数组的有效数据存放进稀疏数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OriArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OriArr[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(OriArr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][<span class="number">0</span>]=i;</span><br><span class="line">                    sparseArr[count][<span class="number">1</span>]=j;</span><br><span class="line">                    sparseArr[count][<span class="number">2</span>]=OriArr[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组为："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sparseArr[i].length; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>,sparseArr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将稀疏数组转换为二维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sparseArr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SparseArr2OriArr</span><span class="params">(<span class="keyword">int</span>[][] sparseArr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组为："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sparseArr[i].length; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>,sparseArr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.先读取稀疏数组的第一行数据，根据第一行数据，创建原始二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] OriArr = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//2.读取稀疏数组后几行的数据，并赋值给原始二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArr[<span class="number">0</span>][<span class="number">2</span>]+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            OriArr[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">0</span>]]=sparseArr[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出原始二维数组</span></span><br><span class="line">        System.out.println(<span class="string">"原始二维数组为："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; OriArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; OriArr[i].length; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>,OriArr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//原始数组</span></span><br><span class="line">        <span class="comment">//1表示黑子，2表示白子</span></span><br><span class="line">        <span class="keyword">int</span> chessArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        OriArr2SparseArr(chessArr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] sparseArr = &#123;</span><br><span class="line">                &#123;<span class="number">11</span>,<span class="number">11</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        SparseArr2OriArr(sparseArr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Find a Better Way</title>
    <url>/2020/01/12/Find%20a%20Better%20Way/</url>
    <content><![CDATA[<p>  吴军在他的新书《态度》中就提到这个演讲，并称将会成为和乔布斯在斯坦福大学一样经典的毕业演讲。</p>
<a id="more"></a> 

<p>视频地址：<a href="https://www.bilibili.com/video/av83180560/" target="_blank" rel="noopener">点击直接观看</a></p>
<p><em>I was honored to be asked to speak at my alma mater, the University of Illinois. My message for this year’s graduates? Find a better way.</em></p>
<p><strong>University of Illinois Commencement — May 14, 2016</strong></p>
<p>Chancellor Wilson, President Killeen, faculty, and distinguished guests: it’s an honor to be back here at the University of Illinois.</p>
<p>Class of 2016, I’m here to congratulate you, but I’m also here to thank you.</p>
<p>For many of you, this is your first college graduation ceremony. Well, this is also my first college graduation ceremony. See, I didn’t come to this event when I graduated in 1989. I had excuses. I had a new job. I was eager to get on with life.</p>
<p>I don’t have many regrets, but 27 years later, that’s one of the decisions I do regret, because I didn’t get to share this day with the people who loved me and supported me.</p>
<p>That might also explain why I have 15 members of my family here today. And why my 90-year-old father in Dubuque, Iowa is watching on the livestream right now.</p>
<p>That’s a life lesson that took me a while to learn: it’s important to reflect and celebrate, and to be grateful for those who bring learning and love into your life.</p>
<p>In fact, how about we all show our appreciation for the people who helped you get here: your families, friends, mentors, and loved ones. Graduates, please stand up, let’s hear it for them!</p>
<p>Today, I’d like to share <strong>three pivotal chapters</strong> from my life.</p>
<p>The experiences themselves may not be universal, but the lessons of failure and resilience, of passion and purpose, and of loss and renewal may be. And they’re united by an overarching belief, one that I hope I can convince you to share.</p>
<p>The belief is this: <strong>there has to be a better way.</strong></p>
<p>The <strong>first chapter</strong> opens in Menominee, Illinois; population 248. Downtown Menominee has a church, a firehouse, a four-room schoolhouse, and of course, a tavern.</p>
<p>I grew up on a small dairy farm, the youngest of five. The farm was a great place to grow up, although it wasn’t without its, ahem, character building moments.</p>
<p>A key feature of the dairy farm is the cow yard. A key feature of the cow yard is, of course, cow manure. Lots and lots of it. When you add in spring rains, it’s a thick soup. One particularly soggy day when I was about 12 years old, my job was to walk out through the cow yard to open the pasture gate for our cows.</p>
<p>Every step I took I sank in deeper and deeper, until I was finally near the middle and completely stuck. Up to the top of my boots. Cow poop threatening to seep over the top. Not quite able to get them out. I yelled for help, but no one could hear me except the cows. And they didn’t really seem interested.</p>
<p>I started to panic a little, but then a remarkable calm came over me. It was very Zen. I saw my future: it was filled with cow manure.</p>
<p>Don’t get me wrong. Farming is a worthy and noble way of life, if you’re passionate about it. But it was in that moment I knew I would need to find my purpose elsewhere.</p>
<p>For me, there had to be a better way to find fulfillment and a different future, and that meant going to college. My parents believed in education, but they could only afford to pay for the first year of college. After that, it was up to me.</p>
<p>At the time, I had an uncle and a much-older brother who were both working in accounting jobs in “the big city,” Chicago. I thought their work with then-cutting-edge computer programs was impossibly cool, so I started lobbying my parents for a computer.</p>
<p>An Apple II at the time was about $3,500 — about the equivalent of one year’s earnings on the farm. But my mother used her inheritance from my godfather, all of it, and bought me that computer.</p>
<p>Being a precocious kid, I wasn’t happy enough to just use it. I had to take it apart, and “soup it up.” My parents were horrified. For me, the problem wasn’t putting it back together; it was that I needed storage. I needed floppy disks, lots of them.</p>
<p>Floppy disks were the thumb drives of the 1980s, except it would take over 7,000 floppy disks, or a stack 50 feet high, and cost $35,000, to equal the storage in a one gigabyte thumb drive you buy for 3 bucks today, and easily fits in your pocket. Technology is really damn cool.</p>
<p>But, the nearest computer dealer was 15 miles away, and a box of disks cost about 10 weeks’ worth of my allowance for doing farm chores.</p>
<p>There had to be a better way.</p>
<p>So my brother helped me find a distributor in Chicago where I could buy them at wholesale for myself. Then I took out ads in some very geeky computer magazines, “Byte” and “Nibble” magazines, to sell to others.</p>
<p>I was a budding 14-year-old entrepreneur. I added other computer products over time and taught myself how to code. I bootstrapped the business out of my farmhouse bedroom into one of the first mail-order computer product companies in the country.</p>
<p>And that’s how I invented Amazon.com.</p>
<p>OK, I’m kidding. That’s a different Jeff, who’s now an investor in my new company, but we’ll get to that in the 3rd chapter.</p>
<p>That business, born out of both desire and need — a better way — got me to, and through, University of Illinois. That excitement about what technology could make possible shaped the rest of my life and career.</p>
<p>Which brings me to the <strong>second chapter</strong>, which includes something I’ve never told anyone, except my wife, Laura.</p>
<p>It starts in 2002. I was working at eBay, drawn in by founder Pierre Omidyar’s deep belief that he, too, had found a better way: a way to use technology to level the playing field so that the little guys could compete with big companies in online commerce, a way for a mom-and-pop shop to be open 24/7, 365 days a year.</p>
<p>I was a technologist who was passionate about innovation through technology, but eBay then was increasingly focused on marketing. I wanted to keep the playing field level. The marketers then wanted to charge more for an ad with blinking text. I overstate a bit, but basically it was the plot of the HBO show ‘Silicon Valley’ from a few weeks ago.</p>
<p>I felt the dissonance pretty acutely, and I guess it showed, because — and this is the part I’ve never told to anyone, except Laura — I was fired.</p>
<p>I thought I was going through the motions pretty convincingly, but I was still going through the motions. My heart wasn’t in it, and it showed. If you’re not passionate about what you’re doing, then there has to be a better way.</p>
<p>Still, getting fired was a shock and incredibly humbling. I was devastated at the time, but it turned out to be the best thing that could have happened. That failure led me, forced me, to find a better way.</p>
<p>The way for me was Google, where I “found my tribe,” where the people I worked with believed in innovation through technology as much as I did.</p>
<p>At eBay, I had a fancy title and a big team, but my new boss at Google felt strongly that you really have to earn leadership. In his words: “Go in, work with the team. Show them what you can do. Show them how you are going to help them win. Be a leader.”</p>
<p>He was right: it’s vitally important to put your head down and do the work and earn it. So I did. I took a title cut and a pay cut, launched a career at Google in 2003, and got to work with some of the best people in the world and build the amazing things that Chancellor Wilson mentioned: Google Ads, Google Apps, Google Maps, and Google[x]. I found a better way for myself, for my career, and maybe for the world.</p>
<p>Now we’re at the <strong>third and last chapter</strong> in this story. It’s the most important one, and a difficult one for me to tell.</p>
<p>It starts two decades ago, when I was asked by my then-employer to investigate an online dating service as a potential partner. It was called Match.com. I created a profile out of purely professional interest, of course.</p>
<p>It was 1996, so there weren’t mobile phones with cameras, or really digital photos at all. The service was kind of like Tinder or Hinge, but, you know, without pictures or phones or swiping. It was text-only; old school.</p>
<p>The first profile that caught my eye was of a woman named Laura. She was a designer and art director for magazines and was an expressive and gifted writer. I thought she seemed smart and super cool. On our first date, I went to her house to pick her up and was greeted by a beautiful, athletic, artistic hippie chick wearing a radiant smile, a long flowing dress, and cowboy boots.</p>
<p>I fell in love with Laura at the door. In that instant, she became a part of me.</p>
<p>We built an amazing life together over the next 20 years. We have two beautiful children, and hopefully future Illini, who are here today. They will come to believe, as we all do, that Orange and Blue actually really look good together!</p>
<p>Laura became my partner in everything, and inspired me through her deep caring, kindness, willpower, and boundless positive energy to be a better person, a better husband, father, and human.</p>
<p>But then one day, Laura told me she felt tired, which was unusual. She had always been super fit and high-energy.</p>
<p>We saw doctors, but none of the explanations seemed right.</p>
<p>Two years, one month, and one day ago we found the answer: a small tumor in her colon. It was cancer.</p>
<p>Still, that’s treatable. Pretty straightforward surgery and good outcomes if you catch it early.</p>
<p>But before the surgery, the doctors did a CT scan. When we looked at the results, it just lit up. We saw that the cancer wasn’t just one small tumor. It had spread to her liver, her abdomen, her chest, and through her lymph system up to her neck. It was stage four cancer.</p>
<p>Laura fought. God did she fight.</p>
<p>And we fought alongside her. She had maybe the best team of cancer doctors ever assembled fighting for her.</p>
<p>She took her art supplies to chemotherapy sessions in her “Kicking Cancer’s Ass” tote bag.</p>
<p>When she couldn’t move her legs to roll over or get out of bed, she asked me to order some hand weights for next-day-delivery so she could rebuild her muscles and be strong again.</p>
<p>She never, never, never gave up. Even at the very end.</p>
<p>She passed away 6 months ago this week.</p>
<p>And that is why I told you earlier: be grateful for those who bring love into your life. Because I didn’t have her for long enough. Our kids didn’t have her for long enough. The world didn’t have her for long enough. But I am so very grateful we had Laura.</p>
<p>I miss her every day. And every day, her bright spirit, determination and character inspire me.</p>
<p>It fuels my conviction that there has to be a better way for us, as a country and a world, to fight cancer.</p>
<p>At Google[x], I had begun studying the intersection of life science and computer science, focusing on how digitizing biology, big data, and machine learning could accelerate our understanding of complex biology.</p>
<p>Losing Laura made me determined to understand one of the most complex processes — the biology of cancer — and how it can be stopped.</p>
<p>When cancer is caught early, at stage one or stage two, it has 80 to 90 percent positive outcomes, where lives are saved, even with the limited treatments available today.</p>
<p>When cancer is discovered later, at stage three or stage four, when it’s spread and has become more complex (like Laura’s was), and which happens in over half the cases that are diagnosed, the outcomes are the exact reverse — 80 to 90 percent negative outcomes, where lives are lost.</p>
<p>Currently we spend billions of dollars treating late-stage cancer when it’s often futile. Instead, we have to detect it early, when it can be cured.</p>
<p>Laura’s cancer is just one story out of millions. There are eight million cancer deaths, every year.</p>
<p>And it all starts when one cell out of the 37 trillion-or-so cells in your body divides, and does it wrong. Those mutated cells shed DNA and RNA into the bloodstream as they multiply. If we can detect that early signal, we can catch cancer much earlier.</p>
<p>That’s what my new company, <a href="http://grailbio.com/" target="_blank" rel="noopener">GRAIL</a>, is working to do. Our mission is to “detect cancer early, when it can be cured”. That’s what I am working to do.</p>
<p>I believe it’s within our reach. I believe in that better way.</p>
<p>So, what does this all mean for you?</p>
<p>When Laura died, lots of very well-intentioned people told me that “everything happens for a reason.”</p>
<p>I am a spiritual person. I grew up in a religious family. And so this isn’t a commentary on faith, but I reject that.</p>
<p>Things don’t “happen for a reason.” But you can find purpose and meaning in things that do happen.</p>
<p>Things don’t happen for a reason. But how you respond can reveal your true character.</p>
<p>Things don’t happen for a reason. But they do often happen because nobody has yet found a better way.</p>
<p>That’s my message to all of you: Find a better way.</p>
<p>College of Agricultural, Consumer and Environmental Sciences graduates: Today, nearly 800 million people in the world don’t have enough food. You can find a better way to feed the world.</p>
<p>College of Engineering graduates: More than one billion people today live without access to energy. You can find a better, cleaner way to quite literally empower people.</p>
<p>College of Education graduates: Eight out of ten low-income students can’t read at grade level. You can find a better way to give everyone a fair chance.</p>
<p>College of Applied Health Sciences graduates: Millions of veterans have returned home with injuries that will last a lifetime. You can find a better way to serve those who served us.</p>
<p>College of Liberal Arts &amp; Sciences graduates: From History and Anthropology to Biology and of course, Computer Science, you can find a better way to learn from our past and innovate for our future.</p>
<p>And, specifically, Political Science graduates: Please, please find a better way to make our Democracy work! Seriously, people! I don’t want to have to move to Canada!</p>
<p>From Law, to Labor Relations, to Media, to Journalism, to Social Work, to Business — there are so many areas crying out for a better way.</p>
<p>And so my final thought for you is this:</p>
<p>Even when you feel like you’re stuck in the mud (or cow manure) and there isn’t a path forward…</p>
<p>Even when you feel like you’ve failed and are humbled…</p>
<p>Even when you’re at your darkest hour, and you’ve lost a part of yourself…</p>
<p>There is still hope. There is always hope.</p>
<p>You can find purpose and meaning from those experiences. There is a better way.</p>
<p>You have the passion. You have the tools. You have the skills. Use them.</p>
<p>For your own fulfillment, and for the betterment of our world. Use them.</p>
<p>And <strong>find a better way</strong>.</p>
<p>Thank you.</p>
]]></content>
      <categories>
        <category>Speech</category>
      </categories>
      <tags>
        <tag>Speech</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL知识点总结</title>
    <url>/2020/01/11/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>花了几天的时间将《SQL基础教程》（第二版）看完了，就将上面一些易错的、重要的知识点总结了一下。</p>
<a id="more"></a>

<ol>
<li><p>SQL语句及其分类</p>
<ul>
<li><p><strong>DDL数据定义语言</strong></p>
<p>CREATE: 创建数据库和表等对象</p>
<p>DROP:删除数据库和表等对象</p>
<p>ALTER:修改数据库和表等对象的结构</p>
</li>
<li><p><strong>DML数据操纵语言</strong></p>
<p>SELECT:查询表中的数据</p>
<p>INSERT:向表中插入新数据</p>
<p>UPDATE:更新表中的数据</p>
<p>DELETE:删除表中的数据</p>
</li>
<li><p><strong>DCL数据控制语言</strong></p>
<p>COMMIT:确认对数据库中的数据进行的变更</p>
<p>ROLLBACK:取消对数据库中的数据进行的变更</p>
<p>GRANT:赋予用户操作权限</p>
<p>REVOKE:取消用户操作权限</p>
</li>
</ul>
</li>
<li><p>使用汉语别名使用“ ”扩起来</p>
</li>
<li><p>先where查询出符合指定条件的记录，然后select选取指定的列</p>
</li>
<li><p>-  -          行注释</p>
</li>
<li><p>/*  */         多行注释</p>
</li>
<li><p>含有NULL的运算结果全为NULL</p>
</li>
<li><p>比较运算符不等于： &lt;&gt;</p>
</li>
<li><p>字符‘2’大于‘12’，不同于数字，字符按照条目在字典中出现的顺序比较大小。</p>
</li>
<li><p>不能对NULL使用比较运算符，如果想要选取为NULL的数据可以使用IS NULL，相反的IS NOT NULL。</p>
</li>
<li><p>AND运算符优先级高于OR运算符，想要优先执行OR可以使用括号。</p>
</li>
<li><p>逻辑运算中除了真假还有第三种值— 不确定(UNKNOWN)，当加入NULL时，条件判断也就变得异常复杂，因此数据库领域的有识之士达成了”尽量不使用NULL的共识”，这也就解释了为什么在创建表时会给某些列设置NOT NULL约束的原因。</p>
</li>
<li><p>聚合函数会对NULL以外的对象进行汇总。但是只有COUNT函数除外，使用COUNT(*)可以查出包含NULL在内的全部数据的行数。注意使用COUNT函数的结果会根据输入参数的不同而不同。若为COUNT(列名)得到的则是除了NULL之外的数据行数。</p>
</li>
<li><p>所有的聚合函数如果以列名为参数，在计算之前都将NULL过滤掉，因此当使用SUM(列名)计算含有NULL的数据列时，其结果不会是NULL。</p>
</li>
<li><p>关键字DISTINCT 删除重复值。因此想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT。</p>
</li>
<li><p>子句书写顺序 SELECT–&gt;FROM–&gt;WHERE–&gt;GROUP BY–&gt;HAVING–&gt;ORDER BY</p>
</li>
<li><p>在GROUP BY子句中指定的列称为聚合键或者分组列。聚合键中包含NULL时，在结果中会以”不确定”行(空行)的形式表现出来。</p>
</li>
<li><p>SELECT语句执行的顺序FROM–&gt;WHERE–&gt;GROUP BY–&gt;SELECT –&gt;ORDER BY这与第14条说明的顺序不同，这是由于在SQL语句中，书写顺序和DBMS内部的执行顺序不同。注意这里是程序执行的顺序。执行顺序也会根据DBMS的不同而不同，这里只需要有一个大致印象，记住SELECT子句的执行顺序在GROUP BY之后，在ORDER BY之前就行。</p>
</li>
<li><p>使用GROUP BY子句时，SELECT子句中不能出现聚合键之外的列名，因为如果出现列A，那结果中当前类别只有一行，而如果这个类别对应的类A有两个数据，该显示谁呢？问题就在于聚合键与其他类并不一定是一对一的。</p>
</li>
<li><p>在GROUP BY子句中不能使用SELECT子句中定义的别名，因为GROUP BY先执行，参照第16条。</p>
</li>
<li><p>GROUP BY子句结果的显示是无序的。</p>
</li>
<li><p>只有SELECT，HAVING，ORDER BY子句中能够使用聚合函数。WHERE子句中不能使用聚合函数。<br>SELECT子句使用聚合函数时，子句中只能存在以下三种元素：<br>1） 常数<br>2）聚合函数<br>3）GROUP BY子句中指定的列名（聚合键）</p>
</li>
<li><p>在“想要删除选择结果中的重复记录”时使用DISTINCT，在“计算汇总结果”时使用GROUP BY。</p>
</li>
<li><p>WHERE子句用于指定数据行（记录）的条件，HAVING子句用于指定分组的条件。注意WHERE子句不能使用聚合函数。</p>
</li>
<li><p>HAVING子句的构成要素：常数，聚合函数，GROUP BY子句中使用的列名，即聚合键。（参照第17条）</p>
</li>
<li><p>聚合键所对应的条件不应该写在HAVING子句中，而应该书写在WHERE子句中。其中一个理由与性能即执行速度有关。通常情况下为了得到相同的结果，讲条件写在WHERE子句中要比写在HAVING子句中的处理速度要快，返回结果所需的时间更短。</p>
</li>
<li><p>（续第24条）为什么写在WHERE子句中速度更快呢？<br>这需要从DBMS的内部运行机制来考虑。使用COUNT函数等对表中的数据进行聚合操作时，DBMS内部就会进行排序处理。排序处理是会大大增加机器负担的高负荷处理。因此只有尽可能的减少排序行数才能提高处理速度。通过WHERE子句指定的条件，由于排序之前就对数据进行了过滤，因此能够减少排序的数量。但HAVING子句是在排序之后才对数据进行分组的，因此需要排序的数目较多。</p>
</li>
<li><p>未指定ORDER BY子句中排列顺序时会默认使用升序ASC（ascendent）排列，降序使用关键字DESC（descendent）</p>
</li>
<li><p>排序键中如果包含NULL时，会在开头或末尾进行汇总。</p>
</li>
<li><p>在ORDER BY子句中可以使用SELECT子句中未使用的列和聚合函数。</p>
</li>
<li><p>在ORDER BY子句中不要使用列编号。</p>
</li>
<li><p>INSERT语句的SELECT语句中，可以使用WHERE子句或者GROUP BY子句等任意SQL语法（但使用OERDER BY子句并不会产生任何效果）。</p>
</li>
<li><p>删除表使用DROP TABLE语句，删除表中的数据（记录）使用DELETE语句。</p>
</li>
<li><p>同时更新多列时，可以在UPDATE语句的SET子句中，使用逗号分隔更新对象的多个列。</p>
</li>
<li><p>事务是需要在同一个处理单元中执行的一系列更新处理的集合。</p>
</li>
<li><p>DBMS遵循四种特性：原子性（Atomicity）、一致性(Cinsisitency)、隔离性(Isolation)和持久性(Durability)，即ACID特性。</p>
</li>
<li><p>表中存储的是实际数据，而视图中保存的则是从数据表中取出数据所使用的SELECT语句。</p>
</li>
<li><p>视图的优点：</p>
<p>1）由于视图无需保存数据，因此可以节省存储设备的容量<br>2）可以将频繁使用的语句保存为视图，这样就不用每次都重新书写。</p>
</li>
<li><p>应该避免在视图的基础上创建视图。</p>
</li>
<li><p>使用视图时，有哪些限制？<br>1）定义视图时可以使用任意SELECT子句，但除了ORDER BY子句，因为视图和表一样，数据行都是没有顺序的。实际上，有些DBMS在定义视图时，可以使用ORDER BY子句，但这并不是通用的语法，因此在定义视图时，请不要使用ORDER BY子句。<br>2）视图和表需要同时更新，因此通过汇总得到的视图无法进行更新。</p>
</li>
<li><p>子查询作为内层查询会首先执行。</p>
</li>
<li><p>标量子查询就是返回单一值的子查询。</p>
</li>
<li><p>在细分的组内进行比较时，需要使用关联子查询。</p>
</li>
<li><p>谓词就是返回真值（TRUE/FALSE/UNKNOWN）的函数。也就是说谓词也就是函数的一种。</p>
</li>
<li><p>LIKE的三种使用方法：<br>1）前方一致<br>选取出作为查询条件的字符串与查询对象字符串起始部分相同的记录查询方式。比如 LIKE ‘ddd%’,查询起始字符含有ddd的字符串<br>2）中间一致<br>选取出查询对象字符串中含有作为查询条件的字符串的记录查询方式。无论该字符串出现在对象字符串的前面、中间、还是后面都没关系。如LIKE ‘%ddd%’<br>3）后方一致<br>与前方一致相反，选取出作为查询条件的字符串与查询对象字符串末尾部分相同的记录查询方式。比如 LIKE ‘%ddd’,查询末尾字符含有ddd的字符串</p>
</li>
<li><p>%表示任意个字符，-表示任意一个字符。</p>
</li>
<li><p>BETWEEN的特点是选取的结果会包含两边的临界值。如果不想包含就可以使用&lt;&gt;。</p>
</li>
<li><p>为了选出某些值为NULL的列的记录，不能使用=，而只能使用特定的谓词IS NULL</p>
</li>
<li><p>谓词IN 和 NOT IN是无法选出NULL数据的。</p>
</li>
<li><p>通常指定关联子查询作为EXIST的参数。</p>
</li>
<li><p>EXIST只关心子查询中的记录是否存在，返回哪些列都没有关系。因此可以使用WHERE EXISTS (SELECT * FROM 。。WHERE。。 )</p>
</li>
<li><p>CASE表达式中的END不能省略。</p>
</li>
<li><p>表的加减法：UNION（并集）、INTERSECT（交集）、EXCEPT（差集）<br>注意：Oracle使用MINUS代替EXCEPT，MYSQL还不支持EXCEPT，因此也无法使用。 </p>
</li>
<li><p>使用UNION时会自动滤除重复的记录。要想保留重复记录，只需要在UNION后面添加关键字ALL就可以啦。</p>
</li>
<li><p>联结（JOIN）就是将其他表中的列添加过来，进行“添加列”的集合运算。UNION是以行为单位进行操作，而联结是以列为单位进行的</p>
</li>
<li><p>进行内联结时必须使用ON子句，并且要书写在FROM和WHERE之间</p>
</li>
<li><p>COALESCE 将NULL转换为其他值。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第十章 MySQL图形化管理工具</title>
    <url>/2020/01/08/%E7%AC%AC%E5%8D%81%E7%AB%A0MySQL%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>前面学习数据库都是基于命令行进行处理，下面介绍通过图形化管理工具进行操作。主要是三种：PHPMyAdmin、Navicat和MySQL Workbench。</p>
<a id="more"></a>

<h2 id="1、PHPMyAdmin-Web界面的"><a href="#1、PHPMyAdmin-Web界面的" class="headerlink" title="1、PHPMyAdmin Web界面的"></a>1、PHPMyAdmin Web界面的</h2><p>   1）下载：planet.phpmyadmin.net // PHPMyAdmin 下载官网,解压在appach目录下</p>
<p>   2）登入：127.0.0.1/PHPMyAdmin</p>
<h2 id="2、Navicat-for-MySQL-以平台方式运行的"><a href="#2、Navicat-for-MySQL-以平台方式运行的" class="headerlink" title="2、Navicat for MySQL 以平台方式运行的"></a>2、Navicat for MySQL 以平台方式运行的</h2><p><a href="https://pan.baidu.com/s/1MwafBklUTiqzBqipRN20xQ" target="_blank" rel="noopener">百度云下载链接</a></p>
<p>安装方法：</p>
<p>1）点击nacivat_trial进行安装</p>
<p>2）点击PatchNavicat选择刚刚安装的程序navicat.exe，即可</p>
<h2 id="3、MySQL-Workbench-以平台方式运行的"><a href="#3、MySQL-Workbench-以平台方式运行的" class="headerlink" title="3、MySQL Workbench 以平台方式运行的"></a>3、MySQL Workbench 以平台方式运行的</h2><p> PK: primary key 主键 </p>
<p>NN: not null 非空</p>
<p>UQ: unique key 唯一约束 </p>
<p>zf: zero fill 添加前导0 </p>
<p>un:unsigned 无符号 </p>
<p>ai: auto_increment 当前的自动编号</p>
<p>基础课程到此结束，寒假也即将来临，今天从图书馆借了《MySQL基础教程（第二版）》准备回家之后再好好看看，加油吧！</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第九章 MySQL存储引擎</title>
    <url>/2020/01/08/%E7%AC%AC%E4%B9%9D%E7%AB%A0MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<p>本章只是对存储引擎做一个基础的介绍，对不同的存储引擎的特点做一个了解。</p>
<a id="more"></a>

<h2 id="1-存储引擎简介"><a href="#1-存储引擎简介" class="headerlink" title="1. 存储引擎简介"></a>1. 存储引擎简介</h2><p><strong>定义：</strong></p>
<p>- MySQL可以将数据不同的技术存储在文件（内存）中，这种技术就称为存储引擎。</p>
<p>关系型数据库中数据的存储以表的形式来实现的。所以存储引擎也可以称为表类型。</p>
<p>每一种存储引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能。</p>
<p><strong>MySQL支持的存储引擎</strong></p>
<ul>
<li><p>MyISAM</p>
</li>
<li><p>InnoDB</p>
</li>
<li><p>Memory</p>
</li>
<li><p>CSV</p>
</li>
<li><p>Archive</p>
</li>
</ul>
<h2 id="2-MySQL相关知识点之并发处理"><a href="#2-MySQL相关知识点之并发处理" class="headerlink" title="2. MySQL相关知识点之并发处理"></a>2. MySQL相关知识点之并发处理</h2><p>在了解每个存储引擎特点前，需要先了解一下并发处理相关的知识。</p>
<p><strong>并发控制：</strong></p>
<p>  <strong>当多个连接对记录进行操作时保证数据的一致性和完整性。</strong></p>
<p>（例如：一张数据表中，两个用户，其中一个用户删除id为22的商品，另一个用户查询id为22的商品，这样可能就会报错，这时就需要并发控制，在处理并发读或者并发写时，系统会使用锁系统解决该问题）</p>
<p><strong>锁：</strong></p>
<p><strong>【1】共享锁（读锁）：</strong>在同一时间段内，多个用户可以读取同一个资源，读取过程中不会发生任何变化。</p>
<p><strong>【2】排他锁（写锁）：</strong>在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作。</p>
<p><strong>锁的力度（</strong>锁的颗粒）</p>
<p>只需要对需要修改的表或者记录加锁</p>
<p><strong>锁颗粒（锁的单位）</strong></p>
<p><strong>——表锁：是一种开销最小的锁策略。</strong></p>
<p>对整个表进行锁定。</p>
<p><strong>——行锁：是一种开销最大的锁策略。</strong></p>
<p>对每一条记录进行锁定，支持最大并发处理操作。</p>
<h2 id="3-MySQL相关知识点之事务处理"><a href="#3-MySQL相关知识点之事务处理" class="headerlink" title="3. MySQL相关知识点之事务处理"></a>3. MySQL相关知识点之事务处理</h2><p><strong>事务</strong>：用于保证数据库的完整性</p>
<p><strong>例子：</strong></p>
<p>用户A转账200元给用户B</p>
<p>实现步骤：</p>
<p>（1）从当前账户减掉200元（账户余额大于等于200元）</p>
<p>（2）在对方账户增加200元</p>
<p>那么两个过程应该作为一个整体出现。任何一个环节出现问题，都应该恢复到原有状态</p>
<p><strong>事务的特性：</strong></p>
<p>- 原子性</p>
<p>- 一致性</p>
<p>- 隔离性</p>
<p>- 持久性</p>
<h2 id="4-MySQL相关知识点之外键及索引"><a href="#4-MySQL相关知识点之外键及索引" class="headerlink" title="4. MySQL相关知识点之外键及索引"></a>4. MySQL相关知识点之外键及索引</h2><p><strong>外键：保证数据一致性的策略。</strong></p>
<p><strong>索引：是对数据表中一列或者多列的值进行排序的一种结构，使用索引可以快速访问数据表中的特定信息。</strong></p>
<h2 id="5-各个存储引擎的特点"><a href="#5-各个存储引擎的特点" class="headerlink" title="5. 各个存储引擎的特点"></a>5. 各个存储引擎的特点</h2><img src="http://q3qm0iisd.bkt.clouddn.com/%E5%90%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E7%89%B9%E7%82%B9.jpg" alt="各个存储引擎的特点" style="zoom: 50%;" />

<p><strong>1.扩展</strong></p>
<p>Memory 的存储限制是由内存的大小来决定。</p>
<p>CSV 存储引擎不支持索引。</p>
<p>BlackHole:黑洞引擎，写入的数据都会消失，一般用做数据复制的中继。</p>
<p><strong>2.索引</strong>：普通索引、唯一索引、全文索引、btree索引、hash索引……</p>
<p><strong>3.最广泛</strong>：MyISAM/InnoDB</p>
<p>MyISAM：适用于事务的处理不多的情况。</p>
<p>InnoDB：适用于事务处理比较多，需要有外键支持的情况</p>
<h2 id="6-设置存储引擎"><a href="#6-设置存储引擎" class="headerlink" title="6. 设置存储引擎"></a>6. 设置存储引擎</h2><p><strong>【1】通过修改MySQL配置文件实现</strong></p>
<p><strong>-default-storage-engine=engine(MySQL5.5默认使用Innodb存储引擎）</strong></p>
<p><strong>【2】通过创建数据表命令实现</strong></p>
<p><strong>-CREATE TABLE table_name(</strong></p>
<p><strong>…</strong></p>
<p><strong>…</strong></p>
<p><strong>)ENGINE=engine;</strong></p>
<p><strong>【3】通过修改数据表命令实现</strong></p>
<p><strong>-ALTER TABLE_name ENGINE [=] engine_name</strong></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>1.存储引擎</strong>：数据的系统的心脏，<strong>实现数据存储和查询的功能</strong>。</p>
<p><strong>2.特点解析</strong></p>
<p>对应的特点为，存储限制、事务安全、是否支持索引、锁的粒度大小、是否支持数据压缩、是否支持外键等。每个技术特点解决的问题是不一样的，不过本质就是为了实现数据存储和查询，是实现的技术不一样，特点不一样，所以我们应该根据需要选择最为合适的。</p>
<p>  <strong>a.存储限制</strong>—数据库能存多少数据</p>
<p>  <strong>b.事务安全</strong>—能否保证数据完整性</p>
<p>  <strong>c.是否支持索引</strong>—能够实现快速查询</p>
<p>  <strong>d.锁的粒度大小</strong>—用于并发控制，实现数据一致性和完整性(表锁、行锁)</p>
<p>  <strong>e.是否支持数据压缩</strong>—-用于数据压缩，能存储更多数据或者改变数据存储结构</p>
<p>  <strong>f.是否支持外键</strong>—能够保证数据的一致性。</p>
<p>3.常用的两种存储引擎及其特点</p>
<ul>
<li>MyISAM：存储闲置可达256TB，支持索引，表级锁定，数据压缩</li>
<li>InnoDB：存储闲置为64TB，支持事务和索引，锁颗粒为行锁</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第八章 MySQL存储过程</title>
    <url>/2020/01/07/%E7%AC%AC%E5%85%AB%E7%AB%A0MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>本章介绍存储过程，可以提高MySQL的运行效率。</p>
<a id="more"></a>

<h2 id="1-存储过程简介"><a href="#1-存储过程简介" class="headerlink" title="1. 存储过程简介"></a>1. 存储过程简介</h2><p>存储过程是sql语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理</p>
<ul>
<li>存储过程存放在数据库内，可以由应用程序调用执行，允许用户声明变量以及进行流程控制，可以接收参数（输入输出参数都可以接收）并且可以存在多个返回值</li>
<li>存储过程的效率要比单纯的SQL语句的执行效率高<br><strong>优点：</strong><br>（1）增强sql语句的功能和灵活性；<br>（2）实现较快的执行速度；<br>（3）减少网络流量</li>
</ul>
<h2 id="2-创建存储结构语法分析"><a href="#2-创建存储结构语法分析" class="headerlink" title="2. 创建存储结构语法分析"></a>2. 创建存储结构语法分析</h2><p><strong>创建存储过程</strong><br>CREATE<br>[DEFINER={user|CURRENT_USER}]<br>PROCEDURE sp_name([proc_paremeter[,…]])<br>[characteristic…] routine_body<br>proc_paremeter:<br>[IN|OUT|INOUT]param_name type<br>创建存储过程语法结构基本和创建自定义函数语法结构相同，最大不同就是参数部分。<br>首先可以指定创建者DEFINER，如果省略，则默认指向（当前用户））当前登入到Mysql客户端的用户。<br>sp_name指的是存储过程的名字，它后面的参数可以有多个，存储过程名使用PROCEDURE修饰，参数前面可以使用IN|OUT|INOUT修饰。<br><strong>IN</strong>:表示该参数的值必须在调用存储过程时指定（存储过程中该值不能返回，只能进不能出）。<br><strong>OUT</strong>：表示该参数的值可以被存储过程代码改变，并且可以返回。<br><strong>INOUT</strong>：表示该参数的可以被指定，并且可以被存储过程体改变和返回。<br><strong>存储过程的特性</strong>（【characteristic…】）与自定义函数特性是完全相同的。<br>特性<br>COMMENT:注释<br>CONTAINS SQL:包含sql语句，但不包含读或者写数据的语句；<br>NOT SQL：不包含sql语句；<br>READS SQL DATA:包含读数据的语句；<br>MODIFIES SQL DATEA:包含写数据的语句；<br>SQL SECURITY{DEFINER|INVOKER}:指明谁有权限连执行<br><strong>过程体</strong><br>（1）过程体由合法的sql语句构成；<br>（2）过程体可以是任意的sql语句；<br>（3）过程体如果为复合结构则使用begin_end语句；<br>（4）复合结构可以包含声明、循环、控制结构</p>
<h2 id="3-创建不带参数的存储过程"><a href="#3-创建不带参数的存储过程" class="headerlink" title="3.创建不带参数的存储过程"></a>3.创建不带参数的存储过程</h2><p>MySQL创建不带参数的存储过程（该存储过程获取Mysql版本的功能）<br><strong>创建存储过程</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp1() <span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br><span class="line">mysql&gt; CREATE PROCEDURE sp1() SELECT VERSION();</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>调用存储过程</strong><br>【1】CALL sp_name([parameter[,…]])<br>【2】CALL sp_name[()]<br>如果存储过程在封装的过程中没有参数，小括号带不带都可以。但是如果封装时有参数，则小括号必须带。<br>例如上面调用：CALL sp1或者CALL sp1();</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL sp1;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| VERSION() |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| 5.5.62    |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Query</span> OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="4-创建带有IN类型参数的存储过程"><a href="#4-创建带有IN类型参数的存储过程" class="headerlink" title="4. 创建带有IN类型参数的存储过程"></a>4. 创建带有IN类型参数的存储过程</h2><p>下面将创建一个可以删除指定id记录的存储过程。<br>首先看一下test数据表中有哪些记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | hao      |</span><br><span class="line">|  2 | yuan     |</span><br><span class="line">|  3 | ye       |</span><br><span class="line">|  4 | xiaohua  |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>下面就创建带有IN类型参数的存储过程：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)</span><br><span class="line">    -&gt; BEGIN</span><br><span class="line">    -&gt; DELETE FROM test WHERE id = p_id;</span><br><span class="line">    -&gt; END</span><br><span class="line">    -&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">mysql&gt; DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>注意：p_id与id的名字不能一样，如果一样在调用此过程时将删除表的所有记录。<br>下面调用此过程：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL removeUserById(2);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; SELECT * FROM test WHERE id = 2;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看出已经删除。<br>如果要<strong>修改存储过程的过程体</strong>：<br>1）必须先删除存储过程<br>DROP PROCEDURE [ IF EXISTS ] sp_name<br>2） 再重建存储过程<br>每次<strong>自定义函数或者存储过程之前</strong>：<br>1）DELIMITER //<br>先把界定符重新定义下 不要用；<br>2）定义完后，再改成DELIMETER ；</p>
<h2 id="5-创建带有IN和OUT类型参数的存储过程"><a href="#5-创建带有IN和OUT类型参数的存储过程" class="headerlink" title="5. 创建带有IN和OUT类型参数的存储过程"></a>5. 创建带有IN和OUT类型参数的存储过程</h2><p>下面创建一个不仅可以根据id删除记录的过程，并且可以返回剩余记录的数量。</p>
<h3 id="（1）创建带有in和out参数类型的存储过程【输入-返回】"><a href="#（1）创建带有in和out参数类型的存储过程【输入-返回】" class="headerlink" title="（1）创建带有in和out参数类型的存储过程【输入+返回】"></a>（1）创建带有in和out参数类型的存储过程【输入+返回】</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br><span class="line">mysql&gt; CREATE PROCEDURE removeUserAndReturnNum(IN p_id INT UNSIGNED , OUT num INT UNSIGNED)</span><br><span class="line"> -&gt; BEGIN</span><br><span class="line"> -&gt; DELETE FROM test WHERE id = p_id;</span><br><span class="line"> -&gt; SELECT COUNT(id) FROM test INTO num;</span><br><span class="line"> -&gt; END</span><br><span class="line"> -&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>看看test数据表中还有几条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(id) FROM test;</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| COUNT(id) |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">|         3 |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="（2）过程调用"><a href="#（2）过程调用" class="headerlink" title="（2）过程调用"></a>（2）过程调用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL removeUserAndReturnNum(1,@nums);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>

<p>将剩余的记录数量存储在nums变量之中。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @nums;</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">| @nums |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">|     2 |</span><br><span class="line">+<span class="comment">-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>局部变量</strong><br>局部变量只在begin和end之间的语句块有效；语句块运行完毕，局部变量消失；<br>在begin..end语句中声明。专门用declare语句声明，而且必须放在begin..end语句的第一行。作用范围在begin到end语句块之间。在该语句块里设置的变量称为局部变量。<br>语法结构：<br>    BEGIN<br>     declare test int;<br>    …<br>    END<br><strong>用户变量</strong><br>通过SELECT INTO语句或者 SET语句 （尤其带有@符号） 声明的为用户变量 只在该用户使用的客户端生效。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET @i = 7;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="6-创建带有多个OUT类型参数的存储过程"><a href="#6-创建带有多个OUT类型参数的存储过程" class="headerlink" title="6. 创建带有多个OUT类型参数的存储过程"></a>6. 创建带有多个OUT类型参数的存储过程</h2><p>MySQL创建带有多个OUT类型参数的存储过程（创建存储过程根据年龄age字段删除记录，返回的信息有两个，一个是删除的用户数，一个是剩余的用户数）</p>
<h3 id="（1）系统函数——ROW-COUNT（）"><a href="#（1）系统函数——ROW-COUNT（）" class="headerlink" title="（1）系统函数——ROW_COUNT（）"></a>（1）系统函数——ROW_COUNT（）</h3><p><strong>作用</strong>：返回插入，删除或者更新 被影响到的记录总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users(username,age) VALUES('e',12),('f',13),('h',14),('j',13);</span><br><span class="line">Query OK, 4 rows affected (0.03 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT ROW_COUNT();</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| ROW_COUNT() |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">|           4 |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="（2）创建存储过程"><a href="#（2）创建存储过程" class="headerlink" title="（2）创建存储过程"></a>（2）创建存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE PROCEDURE removeUserReturnInfo(IN p_age INT UNSIGNED, OUT dels SMALLINT UNSIGNED, OUT rests SMALLINT UNSIGNED)</span><br><span class="line">    -&gt; BEGIN</span><br><span class="line">    -&gt; DELETE FROM users WHERE age=p_age;</span><br><span class="line">    -&gt; SELECT ROW_COUNT() INTO dels;</span><br><span class="line">    -&gt; SELECT COUNT(id) FROM users INTO rests;</span><br><span class="line">    -&gt; END</span><br><span class="line">    -&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>先看一下users中的记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">| id | username | age  |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">|  1 | A        |   12 |</span><br><span class="line">|  2 | B        |   13 |</span><br><span class="line">|  3 | C        |   14 |</span><br><span class="line">|  4 | D        |   13 |</span><br><span class="line">|  5 | e        |   12 |</span><br><span class="line">|  6 | f        |   13 |</span><br><span class="line">|  7 | h        |   14 |</span><br><span class="line">|  8 | j        |   13 |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>一共八条记录下面删除age为13的用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL removeUserReturnInfo(13,@dels,@rests);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @dels,@rests;</span><br><span class="line">+<span class="comment">-------+--------+</span></span><br><span class="line">| @dels | @rests |</span><br><span class="line">+<span class="comment">-------+--------+</span></span><br><span class="line">|     4 |      4 |</span><br><span class="line">+<span class="comment">-------+--------+</span></span><br></pre></td></tr></table></figure>

<p>删除了四条还剩余四条。</p>
<h2 id="7-存储过程与自定义函数的区别"><a href="#7-存储过程与自定义函数的区别" class="headerlink" title="7. 存储过程与自定义函数的区别"></a>7. 存储过程与自定义函数的区别</h2><p><strong>存储过程与自定义函数的区别</strong><br>【1】存储过程实现的功能要复杂一些；而函数的针对性更强（实际工作中很少使用函数针对表进行操作，都是使用存储过程对表进行操作）。<br>【2】存储过程可以返回多个值，而函数只能有一个返回值。<br>【3】存储过程一般独立的来执行（CALL 存储过程名），而函数一般作为SQL语句的组成来出现和内置函数功能一致(SELECT)。<br>如果开发过程中经常使用到某个功能，一般将它封装为存储过程。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li><p>存储过程：是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理。</p>
</li>
<li><p>参数：输入类型，输出类型，输入&amp;&amp;输出；</p>
</li>
<li><p>创建：CREATE…PROCEDURE…;</p>
</li>
<li><p>注意事项：</p>
</li>
</ol>
<p>1) 创建存储过程或者自定义函数时需要通过delimiter语句修改定界符。</p>
<p>2) 如果函数体或过程体有多个语句，需要包含在BEGIN…END语句块中。</p>
<p>3) 存储过程通过call调用。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第七章 自定义函数</title>
    <url>/2020/01/07/%E7%AC%AC%E4%B8%83%E7%AB%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>上一章学习了一些内置函数库，对于日常操作足够啦，但也可能需要到实现某一特定功能的函数，这个函数系统没有提供给我们，这时候就需要自定义函数。</p>
<a id="more"></a>

<h2 id="1-自定义函数简介"><a href="#1-自定义函数简介" class="headerlink" title="1. 自定义函数简介"></a>1. 自定义函数简介</h2><p><strong>定义：</strong></p>
<p>用户自定义函数（UDF）是一种对MySQL扩展的途径，其用法与内置函数相同。</p>
<p><strong>自定义函数的两个必要条件</strong>：</p>
<ol>
<li>参数</li>
<li>返回值</li>
</ol>
<p>自定义函数</p>
<ul>
<li>函数可以返回任意类型的值，同样可以接收这些类型的参数</li>
</ul>
<p><strong>创建自定义函数</strong></p>
<p>CREATE FUNCTION function_name</p>
<p>RETURNS</p>
<p>{STRING|INTEGER|REAL|DECIMAL}</p>
<p>routine_body</p>
<p><strong>关于函数体</strong></p>
<ol>
<li>函数体由合法的SQL语句构成</li>
<li>函数体可以是简单的SELECT或INSERT语句</li>
<li>函数体如果为符合结构则使用BEGIN…END语句</li>
<li>复合结构可以包含声明，循环，控制结构；</li>
</ol>
<h2 id="2-创建不带参数的自定义函数"><a href="#2-创建不带参数的自定义函数" class="headerlink" title="2. 创建不带参数的自定义函数"></a>2. 创建不带参数的自定义函数</h2><p>首先打开mysql，使用test数据库。本小节以创建一个显示“2020年1月7日12:26:11”时间的函数为例。</p>
<p>看一下系统自带的函数NOW()：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT NOW();</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| NOW()               |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 2020-01-07 12:25:16 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>注意：下面要想显示汉字，别忘记设置set names gbk;</p>
<p>使用DATE_FORMAT实现：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATE_FORMAT(NOW(),'%Y年%m月%d日 %H:%I:%S');</span><br><span class="line">+<span class="comment">--------------------------------------------+</span></span><br><span class="line">| DATE_FORMAT(NOW(),'%Y年%m月%d日 %H:%I:%S')       |</span><br><span class="line">+<span class="comment">--------------------------------------------+</span></span><br><span class="line">| 2020年01月07日 12:12:13                          |</span><br><span class="line">+<span class="comment">--------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>注意：命令月和日前使用的是小写的m、d，这里如果改成大写显示就会不同。也就是说这里的大小写务必一一对应，不然会有不同的显示。<br>下面将其封装成函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE FUNCTION y1() RETURNS VARCHAR(30)</span><br><span class="line">    -&gt; RETURN DATE_FORMAT(NOW(),'%Y年%m月%d日 %H:%I:%S');</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>调用一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT y1();</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| y1()                    |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| 2020年01月07日 12:12:36       |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>如果想要删除一个函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP FUNCTION f1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="3-创建带参数的自定义函数"><a href="#3-创建带参数的自定义函数" class="headerlink" title="3. 创建带参数的自定义函数"></a>3. 创建带参数的自定义函数</h2><p>下面创建一个带有参数的求两个参数平均值的函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE FUNCTION y2(num1 SMALLINT UNSIGNED , num2 SMALLINT UNSIGNED)</span><br><span class="line"> -&gt; RETURNS FLOAT(10) UNSIGNED</span><br><span class="line"> -&gt; RETURN (num1+num2)/2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>如果不传递参数直接调用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT y2();</span><br><span class="line">ERROR 1318 (42000): Incorrect number of arguments for FUNCTION test.y2; expected 2, got 0</span><br></pre></td></tr></table></figure>

<p>出现错误，必须传递参数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT y2(3,4);</span><br><span class="line">+<span class="comment">---------+</span></span><br><span class="line">| y2(3,4) |</span><br><span class="line">+<span class="comment">---------+</span></span><br><span class="line">|     3.5 |</span><br><span class="line">+<span class="comment">---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="4-创建具有复合结构函数体的自定义函数体"><a href="#4-创建具有复合结构函数体的自定义函数体" class="headerlink" title="4. 创建具有复合结构函数体的自定义函数体"></a>4. 创建具有复合结构函数体的自定义函数体</h2><p>首先看一下test数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; DESC test;</span><br><span class="line">+<span class="comment">----------+---------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+---------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | tinyint(3) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(20)         | YES  |     | NULL    |                |</span><br><span class="line">+<span class="comment">----------+---------------------+------+-----+---------+----------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure>



<p>一共有两个字段，查看一下记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | hao      |</span><br><span class="line">|  2 | yuan     |</span><br><span class="line">|  3 | ye       |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>一共有三条记录，下面创建一个函数，可以插入记录，并且可以返回id。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE FUNCTION adduser(username VARCHAR(20))</span><br><span class="line">    -&gt; RETURNS INT UNSIGNED</span><br><span class="line">    -&gt; RETURN</span><br><span class="line">    -&gt; INSERT test(username) VALUES(username);</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; <span class="keyword">check</span> the <span class="keyword">manual</span> that corresponds <span class="keyword">to</span> your MySQL <span class="keyword">server</span> <span class="keyword">version</span> <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> <span class="keyword">use</span> near <span class="string">'test(username) VALUES(username)'</span> <span class="keyword">at</span> line <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>此时系统提示错误，原因是分号意味着语句的结束，而我们的返回值类型是整数，此时还没有返回整数值，只是执行了插入记录的命令，这时可以先修改mysql默认的分隔符。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELIMITER //</span><br></pre></td></tr></table></figure>

<p>以后所有的命令都通过//来结束。<br>举个例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT VERSION();</span><br><span class="line">    -&gt;</span><br><span class="line">    -&gt; //</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| VERSION() |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| 5.5.62    |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>只有//结尾时，才运行命令。<br>下面重新创建函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE FUNCTION adduser(username VARCHAR(20))</span><br><span class="line">    -&gt; RETURNS INT UNSIGNED</span><br><span class="line">    -&gt; RETURN</span><br><span class="line">    -&gt; INSERT test(username) VALUES(username);</span><br><span class="line">    -&gt; LAST_INSERT_ID();</span><br><span class="line">    -&gt; //</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; <span class="keyword">check</span> the <span class="keyword">manual</span> that corresponds <span class="keyword">to</span> your MySQL <span class="keyword">server</span> <span class="keyword">version</span> <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> <span class="keyword">use</span> near <span class="string">'test(username) VALUES(username);</span></span><br><span class="line"><span class="string">LAST_INSERT_ID()'</span> <span class="keyword">at</span> line <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>还是错误，因为这里有两个语句需要执行，所以需要添加BEGIN END 语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE FUNCTION adduser(username VARCHAR(20))</span><br><span class="line">    -&gt; RETURNS INT UNSIGNED</span><br><span class="line">    -&gt; BEGIN</span><br><span class="line">    -&gt; INSERT test(username) VALUES(username);</span><br><span class="line">    -&gt; RETURN LAST_INSERT_ID();</span><br><span class="line">    -&gt; END</span><br><span class="line">    -&gt; //</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>

<p>验证一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT adduser('xiaohua');</span><br><span class="line">    -&gt; //</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| adduser('xiaohua') |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">|                  4 |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span>//</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| <span class="keyword">id</span> | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  <span class="number">1</span> | hao      |</span><br><span class="line">|  <span class="number">2</span> | yuan     |</span><br><span class="line">|  <span class="number">3</span> | ye       |</span><br><span class="line">|  <span class="number">4</span> | xiaohua  |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看出创建成功，然后把分隔符变为“；”即可。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><strong>自定义函数：</strong>简称UDF，是对MySQL扩展的一种途径</p>
<p><strong>创建自定义函数</strong>：CREATE FUNCTION</p>
<p><strong>自定义函数两个必要条件：</strong></p>
<p>​    参数：可以有零个或者duoge</p>
<p>​    返回值：只能有一个返回值</p>
<p><strong>函数体内可以书写多个sql语句，这种称为复合结构函数，需要使用BEGIN…END来包含。</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第六章 运算符和函数</title>
    <url>/2020/01/06/%E7%AC%AC%E5%85%AD%E7%AB%A0%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>  这一章将讲解一些重要的运算符和函数。主要包括字符函数、数值运算符与函数、比较运算符与函数、日期时间函数、信息函数、聚合函数和加密函数。</p>
<a id="more"></a> 
<h1 id="1-字符函数"><a href="#1-字符函数" class="headerlink" title="1. 字符函数"></a>1. 字符函数</h1><ul>
<li><strong>CONCAT()  字符连接</strong><br>例如：SELECT CONCAT(‘mm’,’MYSQL’);<br>返回值：mmMYSQL</li>
<li><strong>CONCAT_WS()  使用指定的分隔符进行字符连接</strong><br>注意：里面的参数至少三个<br>例如：CONCAT_WS(‘|’,’A’,’B’,’C’);<br>返回值：A|B|C<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT_WS('|','A','B','C');</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">| CONCAT_WS('|','A','B','C') |</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">| A|B|C                      |</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
上一个语句也可以使用CONCAT_WS:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT_WS('-','mm','MySQL');</span><br><span class="line">+<span class="comment">-----------------------------+</span></span><br><span class="line">| CONCAT_WS('-','mm','MySQL') |</span><br><span class="line">+<span class="comment">-----------------------------+</span></span><br><span class="line">| mm-MySQL                    |</span><br><span class="line">+<span class="comment">-----------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li>
<li><strong>FORMAT()  数字格式化</strong><br>例如：SELECT FORMAT(15265.57,1);<br>返回值：15,265.6</li>
<li><strong>LOWER() 转换成小写字母</strong></li>
<li><strong>UPPER()  转换成大写字母</strong></li>
<li><strong>LEFT()  获取左侧字符</strong></li>
<li><strong>RIGHT()  获取右侧字符</strong><br>例如：SELECT LOWER(LEFT(‘MySQL’,2));<br>返回值：my</li>
<li><strong>LENGTH()  获取字符长度，空格也算</strong></li>
<li><strong>LTRIM()  删除前导空格</strong></li>
<li><strong>RTRIM()  删除后续空格</strong></li>
<li><strong>TRIM()  删除前导和后续空格</strong></li>
<li><strong>REPLACE()  字符串替换</strong><br>例如：<strong>SELECT REPLACE(‘??My??SQL???’,’?’,’’);</strong>     将？替换成空<br>返回值：MySQL</li>
<li><strong>SUBSTRING()  字符串截取</strong><br>例如：*<em>SELECT SUBSTRING(‘MySQL’,1,2); *</em>  从第一位开始截取两位<br>返回值：My</li>
</ul>
<p>*<em>SELECT SUBSTRING(‘MySQL’,3); *</em>  代表从第三位开始截取，到结尾<br>返回值：SQL<br>*<em>SELECT SUBSTRING(‘MySQL’,-4); *</em>  代表从结尾开始往前截取<br>返回值：ySQL<br>*<em>SELECT SUBSTRING(‘MySQL’,-3,-1); *</em><br>返回值为空，MySQL中不允许这种写法，只能起始位为负值，长度不能为负值<br>python中对于序列的截取可以使用L(-3,-1),表示的是获取倒数第一和倒数第二位置的数据。</p>
<ul>
<li><strong>[NOT] LIKE  模式匹配</strong><br>例如：SELECT ‘MySQL’ LIKE ‘MS%’;   百分号%代表任意一个或者多个字符，下划线_代表任意一个字符<br>返回值为1，代表true；0代表false<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 'MySQL' LIKE 'MS%';</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| 'MySQL' LIKE 'MS%' |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">|                  0 |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>*<em>SELECT * FROM test WHERE username LIKE ‘%1%%’ ESCAPE ‘1’; *</em>代表查找用户名中包含%字符的结果，1后边的%不需要再进行解析，直接认为是字符%，其中1可以为任意的一个字符。</p>
<h1 id="2-数值运算符与函数"><a href="#2-数值运算符与函数" class="headerlink" title="2. 数值运算符与函数"></a>2. 数值运算符与函数</h1><p>简单的+-*/就略过啦</p>
<ul>
<li><strong>CEIL()  进一取整</strong><br>例如：SELECT CEIL(3.026487);<br>返回值为4</li>
<li><strong>DIV   整数除法</strong><br>例如：SELECT 3 DIV 4;<br>返回值为0</li>
<li><strong>FLOOR()  舍一取整 向下取整</strong><br>例如：SELECT FLOOR(3.97);<br>返回值为3<br>注意负数的向下取整：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT FLOOR(-3.99);</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| FLOOR(-3.99) |</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">|           -4 |</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li>
<li><strong>MOD  取余数</strong><br>与%功能一样<br>例如：<strong>SELECT 5 MOD 3;</strong><br>返回值为2<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT 5%3;</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">| 5%3  |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">|    2 |</span><br><span class="line">+<span class="comment">------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li>
<li><strong>POWER()  幂运算</strong><br>例如：*<em>SELECT POWER(3,3); *</em> 代表3的3次方<br>返回值为27</li>
<li><strong>ROUND()  四舍五入</strong><br>例如：<strong>SELECT ROUND(3.655,2);</strong> 四舍五入小数点后留两位<br>返回值为3.66</li>
<li><strong>TRUNCATE()  数字截取</strong><br>例如：*<em>SELECT TRUNCATE(3.655,2); *</em> 直接截图小数位数，不进行四舍五入<br>返回值为3.65</li>
</ul>
<h1 id="3-比较运算符与函数"><a href="#3-比较运算符与函数" class="headerlink" title="3. 比较运算符与函数"></a>3. 比较运算符与函数</h1><ul>
<li><strong>[NOT] BETWEEN…AND…  [不]在范围之内</strong><br>例如：*<em>SELECT 23 BETWEEN 1 AND 23; *</em> 闭合区间，[1,23]<br>返回值为1</li>
<li><strong>[NOT] IN()  [不]在取值范围内</strong><br>例如：<strong>SELECT 10 IN(5,10,15,20);</strong><br>返回值为1</li>
<li><strong>IS [NOT] NULL  [不]为空</strong></li>
</ul>
<p><strong>NULL为空，空字符’’不为空，0不为空</strong></p>
<h1 id="4-日期时间函数"><a href="#4-日期时间函数" class="headerlink" title="4.日期时间函数"></a>4.日期时间函数</h1><ul>
<li><strong>NOW() 当前日期和时间</strong></li>
<li><strong>CURDATE（） 当前日期</strong></li>
<li><strong>CURTIME（） 当前时间</strong></li>
<li><strong>DATE_ADD() 日期变化</strong><br>例如：<strong>SELECT DATE_ADD(‘2020-1-6’, INTERVAL 1 YEAR);</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATE_ADD('2020-1-6', INTERVAL 1 YEAR);</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| DATE_ADD('2020-1-6', INTERVAL 1 YEAR) |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| 2021-01-06                            |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>SELECT DATE_ADD(‘2020-1-6’, INTERVAL 1 WEEK);</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATE_ADD('2020-1-6', INTERVAL 1 WEEK);</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| DATE_ADD('2020-1-6', INTERVAL 1 WEEK) |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">| 2020-01-13                            |</span><br><span class="line">+<span class="comment">---------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>DATEDIFF（） 日期差值</strong><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATEDIFF('2020-1-9','2020-1-10');</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| DATEDIFF('2020-1-9','2020-1-10') |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">|                               -1 |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2020-1-9'</span>,<span class="keyword">NOW</span>());</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">| DATEDIFF('2020-1-9',NOW()) |</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">|                          3 |</span><br><span class="line">+<span class="comment">----------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li>
<li><strong>DATE_FORMAT() 日期格式化</strong><br>例如：<strong>SELECT DATE_FORMAT(‘2019-6-24’,’%m/%d/%Y’);</strong><br>返回值为06/24/2019</li>
</ul>
<p><strong>SELECT DATE_FORMAT(‘2019-6-24’,’%m/%d/%y’);</strong><br>返回值为06/24/19</p>
<h1 id="5-信息函数"><a href="#5-信息函数" class="headerlink" title="5.信息函数"></a>5.信息函数</h1><ul>
<li><strong>CONNECTION_ID() 连接ID</strong></li>
<li><strong>DATEBASE()          当前数据库</strong></li>
<li><strong>LAST_INSERT_ID()  最后插入记录</strong><br>当同时插入多条记录时，返回其中第一条的id号。</li>
<li><strong>USER()                    当前用户</strong></li>
<li><strong>VERSION()                版本信息</strong><h1 id="6-聚合函数（需要配合数据表使用）"><a href="#6-聚合函数（需要配合数据表使用）" class="headerlink" title="6.聚合函数（需要配合数据表使用）"></a>6.聚合函数（需要配合数据表使用）</h1></li>
<li><strong>AVG()    平均值</strong></li>
<li><strong>COUNT()    计数</strong></li>
<li><strong>MAX()    最大值</strong></li>
<li><strong>MIN()    最小值</strong></li>
<li><strong>SUM()    求和</strong><h1 id="7-加密函数"><a href="#7-加密函数" class="headerlink" title="7.加密函数"></a>7.加密函数</h1></li>
<li><strong>md5()            信息摘要算法</strong><br>select md5(‘admin’);如果为了web页面做准备，建议使用MD5()</li>
<li><strong>password()     密码算法</strong><br>主要用来更改mysql的更改密码<br>set password=password(‘123’)</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>１.字符函数<br>２.数值运算符与函数<br>３.比较运算符与函数<br>４.日期时间函数<br>５.信息函数<br>６.聚合函数<br>7.加密函数<br>通过上面的学习，也可以看出这些函数可以用在任意的字段上。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>研究生第一学期课程总结</title>
    <url>/2020/01/04/%E7%A0%94%E7%A9%B6%E7%94%9F%E7%AC%AC%E4%B8%80%E5%AD%A6%E6%9C%9F%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>  最近一直在忙着考试，就没有时间学习Java，后天也就是下周一还有最后一科考试“<strong>系统建模与仿真</strong>”–比较水的一门课，所以也就腾出来了一点时间，就想总结一下研究生第一学期学习的课程。</p>
<a id="more"></a> 
<h1 id="1-英语"><a href="#1-英语" class="headerlink" title="1. 英语"></a>1. 英语</h1><p>研究生还要学习英语，一开始觉得真是让人头疼，后来觉得还是蛮实用的。英语分为了听说、读写，听说主要学习了一些演讲、申请留学和工作面试的表达；读写主要学习中西方语言表达的差异，这部分讲的很细致，对以后论文的写作很有帮助，可惜上课听得较少，大部分还是通过考试前自学的。</p>
<h1 id="2-矩阵论"><a href="#2-矩阵论" class="headerlink" title="2. 矩阵论"></a>2. 矩阵论</h1><p>矩阵论就是大学线性代数的延伸，一开始学习这门课最令我震惊的是即使是一个函数表达式也可以写成矩阵的形式，并且可以进行相关的运算。随着课程的深入，也让我意识到这门课的重要性，尤其是对于数字图像处理领域，几乎是离不开矩阵论的思想。<br>这门课还需要写一篇课程论文，我写的是“基于SVD的图像压缩算法实现”，利用奇异值分解的性质，对图像进行压缩，因为奇异值分解可以降低矩阵的维度，奇异值较小的，所含的能量也较低，将这些奇异值和对应的向量消除，从而减少存储空间。<br>主要内容为：</p>
<p>1) 线性空间与线性变换</p>
<p>2) 内积空间与等距变换</p>
<p>3) 矩阵的Jordan标准型</p>
<p>4) 矩阵分解</p>
<p>5) 矩阵分析</p>
<p>6) 矩阵的广义逆</p>
<h1 id="3-随机过程"><a href="#3-随机过程" class="headerlink" title="3. 随机过程"></a>3. 随机过程</h1><p>相应的随机过程也就是大学概率论的延伸，这里不再仅仅局限在一个或者几个随机变量，而是在每一个时刻都是一个随机变量，将这些时刻串在一起就构成了随机过程。这门课后面部分平稳过程的谱分析，谱密度还是挺让人头大的（想想大学的傅里叶变换就知道啦，哈哈！），即使今天考完啦，做出来啦，但还是不太懂得其中的意思。或许以后工程上用到的时候会有一个较深的理解吧。<br>主要内容为：</p>
<p>1) 泊松过程</p>
<p>2) 离散马尔科夫链</p>
<p>3) 连续马尔科夫链</p>
<p>4) 平稳过程</p>
<h1 id="4-系统建模与仿真"><a href="#4-系统建模与仿真" class="headerlink" title="4. 系统建模与仿真"></a>4. 系统建模与仿真</h1><p>这门虽然有点“水”，但是用处很大，主要是讲线性系统的仿真，人工神经网络，BP神经网络，模拟退火算法，遗传算法。，每一部分拉出来都是可以讲一个学期的，然而我们17周，一周两节课就结束啦，或许这就是考验研究生自学能力的时候吧！<br>主要内容：</p>
<p>1) 线性时不变系统的数学模型及其仿真<br>这一部分的内容和大学信号与系统的内容一样，这里就是大概的过一遍大学所学的知识点，涉及到拉式变换、传递函数、状态方程的求解、系统的各种数学模型之间的相互转换、系统模型的连接以及系统的离散化和连续化。</p>
<p>2) 随机数的产生与混沌<br>讲了两个重要的随机数产生方法</p>
<ul>
<li>乘同余法<center>xi+1=A xi mod(M)</center>
根据数论的理论证明：计算机位数为L，如果模数M=2L, 当

</li>
</ul>
<p>（1）A=8k±3， A=4k+1，k为正整数；<br>（2）x0为奇数时，可以获得最长的随机序列长度为2L-2。</p>
<ul>
<li>混合同余法，也称线性同余<center>xi+1=(A xi +B)mod(M)</center>
根据数论的理论证明：计算机位数为L，如果模数M=2L, 当

</li>
</ul>
<p>（1）A=4k+1，k为正整数；<br>（2）B与M互为质数时，可以获得最长的随机序列长度为2L。<br>3) 神经网络<br>这里只是一个入门，只是讲解了人工神经网络的基本概念、单层网、多层网、循环网等各种基本网络模型的结构、特点、典型训练算法、运行方式、典型问题。<br>这部分值得思考的几点问题：</p>
<ul>
<li>为什么需要激活函数？</li>
<li>不同激活函数之间的优缺点或者说具体的应用？</li>
<li>为什么需要偏置？<br>这里还是推荐斯坦福大学吴恩达博士的<a href="https://www.coursera.org/learn/machine-learning?#about" target="_blank" rel="noopener">机器学习课程</a><br>讲解的很细致。<br>4) 遗传算法<br>这个对我来说还是比较熟悉的，因为本科毕设使用到了基因表达式编程算法就和这个算法有些类似。区别可以用下图展示：<br><img src="https://res.cloudinary.com/qujq/image/upload/v1578219072/myPIC/GAandGEP_sdfz2l.png" alt="正在加载"></li>
</ul>
<p>5) 模拟退火算法<br>模拟退火算法包括三函数两准则，即状态产生函数、状态接受函数、温度更新函数、内循环终止准则和外循环终止准则，这些环节的设计将决定SA算法的优化性能。此外，初温的选择对SA算法性能也有很大影响。还需要注意：降温过快， SA很快从广域搜索转为局域搜索，很可能过早陷于局部最优。<br>降温过慢，外循环次数增大，浪费时间。</p>
]]></content>
      <categories>
        <category>研究生</category>
      </categories>
      <tags>
        <tag>课程感想</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章 子查询和连接</title>
    <url>/2019/12/18/%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>这章主要介绍子查询和连接，当然还涉及多表的删除以及多表的更新。</p>
<a id="more"></a> 
<h1 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1. 准备数据"></a>1. 准备数据</h1><h2 id="1）首先创建一个新的数据库"><a href="#1）首先创建一个新的数据库" class="headerlink" title="1）首先创建一个新的数据库"></a>1）首先创建一个新的数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE goods CHARSET utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>还记得第一章里讲过的，新建的数据库默认为utf-8.<br>检验一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE DATABASE goods;</span><br><span class="line">+<span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line">| Database | <span class="keyword">Create</span> <span class="keyword">Database</span>                                                |</span><br><span class="line">+<span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line">| goods    | <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`goods`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> |</span><br><span class="line">+<span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h2 id="2）再创建一个数据表"><a href="#2）再创建一个数据表" class="headerlink" title="2）再创建一个数据表"></a>2）再创建一个数据表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; USE goods;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;CREATE TABLE IF NOT EXISTS tdb_goods(</span><br><span class="line">    -&gt;goods_id    SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt;goods_name  VARCHAR(150) NOT NULL,</span><br><span class="line">    -&gt;goods_cate  VARCHAR(40)  NOT NULL,</span><br><span class="line">    -&gt;brand_name  VARCHAR(40)  NOT NULL,</span><br><span class="line">    -&gt;goods_price DECIMAL(15,3) UNSIGNED NOT NULL DEFAULT 0,</span><br><span class="line">    -&gt;is_show     BOOLEAN NOT NULL DEFAULT 1,</span><br><span class="line">    -&gt;is_saleoff  BOOLEAN NOT NULL DEFAULT 0</span><br><span class="line">    -&gt;);</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>

<p>此数据表为商品的信息，包括：商品的id，名字，分类，品牌，价格，是否上架（默认为1，表示在架），是否售空（默认为0，表示没有售空）。</p>
<h2 id="3）插入记录"><a href="#3）插入记录" class="headerlink" title="3）插入记录"></a>3）插入记录</h2><p>因为cmd的字符类型为gbk，所以当我们插入中文时总是出错，所以在插入记录前，先把mysql设置为gbk；再进行插入。<br>注意：此方法只是设置的客户端的编码，并不影响数据表tdb_goods，它还是utf8的编码方式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set names gbk;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>直接复制下面语句到cmd即可插入记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'R510VC 15.6英寸笔记本'</span>,<span class="string">'笔记本'</span>,<span class="string">'华硕'</span>,<span class="string">'3399'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'Y400N 14.0英寸笔记本电脑'</span>,<span class="string">'笔记本'</span>,<span class="string">'联想'</span>,<span class="string">'4899'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'G150TH 15.6英寸游戏本'</span>,<span class="string">'游戏本'</span>,<span class="string">'雷神'</span>,<span class="string">'8499'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'X550CC 15.6英寸笔记本'</span>,<span class="string">'笔记本'</span>,<span class="string">'华硕'</span>,<span class="string">'2799'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'X240(20ALA0EYCD) 12.5英寸超极本'</span>,<span class="string">'超级本'</span>,<span class="string">'联想'</span>,<span class="string">'4999'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'U330P 13.3英寸超极本'</span>,<span class="string">'超级本'</span>,<span class="string">'联想'</span>,<span class="string">'4299'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'SVP13226SCB 13.3英寸触控超极本'</span>,<span class="string">'超级本'</span>,<span class="string">'索尼'</span>,<span class="string">'7999'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'iPad mini MD531CH/A 7.9英寸平板电脑'</span>,<span class="string">'平板电脑'</span>,<span class="string">'苹果'</span>,<span class="string">'1998'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'iPad Air MD788CH/A 9.7英寸平板电脑 （16G WiFi版）'</span>,<span class="string">'平板电脑'</span>,<span class="string">'苹果'</span>,<span class="string">'3388'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">' iPad mini ME279CH/A 配备 Retina 显示屏 7.9英寸平板电脑 （16G WiFi版）'</span>,<span class="string">'平板电脑'</span>,<span class="string">'苹果'</span>,<span class="string">'2788'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'IdeaCentre C340 20英寸一体电脑 '</span>,<span class="string">'台式机'</span>,<span class="string">'联想'</span>,<span class="string">'3499'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'Vostro 3800-R1206 台式电脑'</span>,<span class="string">'台式机'</span>,<span class="string">'戴尔'</span>,<span class="string">'2899'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'iMac ME086CH/A 21.5英寸一体电脑'</span>,<span class="string">'台式机'</span>,<span class="string">'苹果'</span>,<span class="string">'9188'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'AT7-7414LP 台式电脑 （i5-3450四核 4G 500G 2G独显 DVD 键鼠 Linux ）'</span>,<span class="string">'台式机'</span>,<span class="string">'宏碁'</span>,<span class="string">'3699'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'Z220SFF F4F06PA工作站'</span>,<span class="string">'服务器/工作站'</span>,<span class="string">'惠普'</span>,<span class="string">'4288'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'PowerEdge T110 II服务器'</span>,<span class="string">'服务器/工作站'</span>,<span class="string">'戴尔'</span>,<span class="string">'5388'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'Mac Pro MD878CH/A 专业级台式电脑'</span>,<span class="string">'服务器/工作站'</span>,<span class="string">'苹果'</span>,<span class="string">'28888'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">' HMZ-T3W 头戴显示设备'</span>,<span class="string">'笔记本配件'</span>,<span class="string">'索尼'</span>,<span class="string">'6999'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'商务双肩背包'</span>,<span class="string">'笔记本配件'</span>,<span class="string">'索尼'</span>,<span class="string">'99'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'X3250 M4机架式服务器 2583i14'</span>,<span class="string">'服务器/工作站'</span>,<span class="string">'IBM'</span>,<span class="string">'6888'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'玄龙精英版 笔记本散热器'</span>,<span class="string">'笔记本配件'</span>,<span class="string">'九州风神'</span>,<span class="string">''</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">' HMZ-T3W 头戴显示设备'</span>,<span class="string">'笔记本配件'</span>,<span class="string">'索尼'</span>,<span class="string">'6999'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">INSERT</span> tdb_goods (goods_name,goods_cate,brand_name,goods_price,is_show,is_saleoff) <span class="keyword">VALUES</span>(<span class="string">'商务双肩背包'</span>,<span class="string">'笔记本配件'</span>,<span class="string">'索尼'</span>,<span class="string">'99'</span>,<span class="keyword">DEFAULT</span>,<span class="keyword">DEFAULT</span>);</span><br></pre></td></tr></table></figure>

<p>使用下面语句可以查看插入的记录，\G的作用是使显示成网格，更加方便查看。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tdb_goods/G;</span><br></pre></td></tr></table></figure>

<h1 id="2-子查询"><a href="#2-子查询" class="headerlink" title="2. 子查询"></a>2. 子查询</h1><h2 id="1）简介"><a href="#1）简介" class="headerlink" title="1）简介"></a>1）简介</h2><p>子查询(Subquery)是指出现在其他SQL语句内的SELECT子句<br>例如：<br><strong>SELECT * FROM t1 WHERE col1= ( SELECT col2 FROM t2 );</strong></p>
<p>其中SELECT * FROM t1，称为Outer Query/Outer Statement（外查询）<br>SELECT col2 FROM t2, 称为SubQuery（子查询）</p>
<p>使用子查询时注意：<br>【a】子查询嵌套在查询内部，并且子查询必须出现在圆括号内。<br>【b】子查询可以包含多个关键字或条件，如DISTINCT、GROUT BY、ORDER BY、LIMIT,函数等。<br>【c】子查询的外层查询可以是：SELECT,INSERT，UPDATE，SET或DO。<br>【d】外查询这里指所有SQL命令的统称，因为SQL称为结构化查询语言<br>子查询返回值：可以是返回标量、一行、一列、或者子查询，并且可以通过该返回值进行增、删、改、查。</p>
<h2 id="2）由比较运算符引发的子查询"><a href="#2）由比较运算符引发的子查询" class="headerlink" title="2）由比较运算符引发的子查询"></a>2）由比较运算符引发的子查询</h2><p>产生子查询的情况可以分为3类，首先来看下由比较运算符引发的子查询：<br>使用比较运算符的子查询<br>=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、&lt;=&gt;<br>语法结构<br>operand comparison_operator subquery<br>下面做一个简单的演示，来看一下子查询到底怎么回事？<br>我们之前已经创建了许多电脑的商品，来看一下商品的平均价格是多少呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT AVG(goods_price) FROM tdb_goods;</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| AVG(goods_price) |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">|     5636.3636364 |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>AVG是用于求平均数的聚合函数，其返回一个值。<br>可以看到返回值得小数部分很小，显然我们不需要这么长，做一下处理：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT ROUND(AVG(goods_price),2) FROM tdb_goods;</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| ROUND(AVG(goods_price),2) |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">|                   5636.36 |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>使用ROUND 四舍五入并且保留两位小数。<br>接下来想看看哪些商品大于平均价格：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price&gt;=5636.36;</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">| goods_id | goods_name                       | goods_price |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">|        3 | G150TH 15.6英寸游戏本                    |    8499.000 |</span><br><span class="line">|        7 | SVP13226SCB 13.3英寸触控超极本             |    7999.000 |</span><br><span class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑            |    9188.000 |</span><br><span class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑           |   28888.000 |</span><br><span class="line">|       18 |  HMZ-T3W 头戴显示设备                    |    6999.000 |</span><br><span class="line">|       20 | X3250 M4机架式服务器 2583i14                |    6888.000 |</span><br><span class="line">|       21 |  HMZ-T3W 头戴显示设备                    |    6999.000 |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>一共七条符合条件，再来看下命令语句，我是通过输入5636.36 来进行比较的，那么能不能和上个语句结合起来呢？<br>只需要将5636.36替换为（），里面放入之前求平均价格的语句即可：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price&gt;=( SELECT ROUND(AVG(goods_price),2) FROM tdb_goods);</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">| goods_id | goods_name                       | goods_price |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">|        3 | G150TH 15.6英寸游戏本                    |    8499.000 |</span><br><span class="line">|        7 | SVP13226SCB 13.3英寸触控超极本             |    7999.000 |</span><br><span class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑            |    9188.000 |</span><br><span class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑           |   28888.000 |</span><br><span class="line">|       18 |  HMZ-T3W 头戴显示设备                    |    6999.000 |</span><br><span class="line">|       20 | X3250 M4机架式服务器 2583i14                |    6888.000 |</span><br><span class="line">|       21 |  HMZ-T3W 头戴显示设备                    |    6999.000 |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>这样我们就使用了比较运算符进行了子查询！！！<br>当然我们还可以查询其他的，下面来看看超级本的价格都是多少？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本';</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| goods_price |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">|    4999.000 |</span><br><span class="line">|    4299.000 |</span><br><span class="line">|    7999.000 |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<p>超级本一共有三个，下面来看看大于超极本价格的电脑有哪些？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price&gt;(SELECT goods_price FROM tdb_goods WHERE  goods_cate = '超级本');</span><br><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br></pre></td></tr></table></figure>
<p>超级本的价格有三个，大于这三个价格，到底大于哪个呢，肯定有错误。<br>所以这时候我们需要一些修饰符<br>用ANY、SOME或ALL修饰的比较运算符<br>operand comparison_operator ANY (subquery)<br>operand comparison_operator SOME (subquery)<br>operand comparison_operator ALL (subquery)<br>其中ANY跟SOME是等价的，满足其中一条就可以，ALL必须要满足所有条件</p>
<p>我们修改一下上面的命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price&gt;ANY(SELECT goods_price FROM tdb_goods WHERE  goods_cate = '超级本');</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">| goods_id | goods_name                       | goods_price |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">|        2 | Y400N 14.0英寸笔记本电脑                    |    4899.000 |</span><br><span class="line">|        3 | G150TH 15.6英寸游戏本                    |    8499.000 |</span><br><span class="line">|        5 | X240(20ALA0EYCD) 12.5英寸超极本         |    4999.000 |</span><br><span class="line">|        7 | SVP13226SCB 13.3英寸触控超极本             |    7999.000 |</span><br><span class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑            |    9188.000 |</span><br><span class="line">|       16 | PowerEdge T110 II服务器                |    5388.000 |</span><br><span class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑           |   28888.000 |</span><br><span class="line">|       18 |  HMZ-T3W 头戴显示设备                    |    6999.000 |</span><br><span class="line">|       20 | X3250 M4机架式服务器 2583i14                |    6888.000 |</span><br><span class="line">|       21 |  HMZ-T3W 头戴显示设备                    |    6999.000 |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>添加了ANY之后，返回了所有大于4299的电脑。<br>那么试试ALL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price&gt;ALL(SELECT goods_price FROM tdb_goods WHERE  goods_cate = '超级本');</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">| goods_id | goods_name                       | goods_price |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">|        3 | G150TH 15.6英寸游戏本                    |    8499.000 |</span><br><span class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑            |    9188.000 |</span><br><span class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑           |   28888.000 |</span><br><span class="line">+<span class="comment">----------+----------------------------------+-------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<p>返回了大于7999的电脑</p>
<h2 id="3）IN-NOT-IN-引发的子查询"><a href="#3）IN-NOT-IN-引发的子查询" class="headerlink" title="3）IN/NOT IN 引发的子查询"></a>3）IN/NOT IN 引发的子查询</h2><p>语法结构<br><strong>operand comparison_operator [ NOT ] IN (subquery)</strong><br>=ANY运算符与IN等效<br>!=ALL或&lt;&gt;ALL运算符与NOT IN等效<br>下面使用NOT IN</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price NOT IN(SELECT goods_price FROM tdb_goods WHERE  goods_cate = '超级本');</span><br><span class="line">19 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>将会有19个商品返回。这是总共22个商品除去那3个超级本的。</p>
<h2 id="4）-NOT-EXISTS的子查询"><a href="#4）-NOT-EXISTS的子查询" class="headerlink" title="4）[ NOT ] EXISTS的子查询"></a>4）[ NOT ] EXISTS的子查询</h2><p>使用[ NOT ] EXISTS的子查询<br>如果子查询返回任何行，EXISTS将返回TRUE；否则为FALSE<br>这个使用比较少。</p>
<h1 id="3-多表更新"><a href="#3-多表更新" class="headerlink" title="3. 多表更新"></a>3. 多表更新</h1><h2 id="1）-使用INSERT…SELECT插入记录"><a href="#1）-使用INSERT…SELECT插入记录" class="headerlink" title="1） 使用INSERT…SELECT插入记录"></a>1） 使用INSERT…SELECT插入记录</h2><p> 语法：<br><strong>INSERT [INTO] tbl_name [(col_name,…)] SELECT …</strong><br>它是将查询的结果写入到数据表，列名省略也可以，否则列名之间用逗号隔开。<br>INSERT语句有两种形式：INSERT SET和INSERT VALUES,区别在于INSERT SET 可以使用子查询，因为一般这样写，INSERT SET A字段=多少，这里的=是比较运算符，可以引发子查询。接下来会验证。<br>如果一张表中存在很多记录，并且这张表中存在很多重复的信息，例如：上面课程中商品表中的品牌字段和商品类型，汉字占的字节数一定比数字占的字节数多，如果数据越来越多，那么数据表就会越来越庞大，查找的时候速度就会变得很慢，所以我们可以通过外键来解决这个问题，但是使用外键至少有两张数据表，而现在就有一张数据表，所以就要再创建两张数据表存储商品的分类和品牌。</p>
<h2 id="2）新建一个数据表存储分类"><a href="#2）新建一个数据表存储分类" class="headerlink" title="2）新建一个数据表存储分类"></a>2）新建一个数据表存储分类</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tdb_goods_cates(</span><br><span class="line">    -&gt; cate_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; cate_name VARCHAR(40) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p>但是此时分类表里还没有数据信息，我们需要从商品表中查找所有的分类信息插入到分类表中，在查找的时候按分类来进行分组，并且插入时有两种方式，方式1录入7条INSERT语句，但这样太麻烦，方式2使用INSERT…SELECT将查询的结果直接写入数据表.</p>
<h2 id="3-使用方式2插入记录"><a href="#3-使用方式2插入记录" class="headerlink" title="3) 使用方式2插入记录"></a>3) 使用方式2插入记录</h2><p>先看一下分类：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;</span><br><span class="line">+<span class="comment">---------------+</span></span><br><span class="line">| goods_cate    |</span><br><span class="line">+<span class="comment">---------------+</span></span><br><span class="line">| 台式机            |</span><br><span class="line">| 平板电脑             |</span><br><span class="line">| 服务器/工作站            |</span><br><span class="line">| 游戏本             |</span><br><span class="line">| 笔记本            |</span><br><span class="line">| 笔记本配件            |</span><br><span class="line">| 超级本              |</span><br><span class="line">+<span class="comment">---------------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>如果上面汉字显示异常：<br>可以使用：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> gbk;</span><br></pre></td></tr></table></figure>
<p>下面将分类信息写入到tdb_goods_cates</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tdb_goods_cates(cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;</span><br><span class="line">Query OK, 7 rows affected (0.03 sec)</span><br><span class="line">Records: 7  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; SELECT * FROM tdb_goods_cates;</span><br><span class="line">+<span class="comment">---------+---------------+</span></span><br><span class="line">| cate_id | cate_name     |</span><br><span class="line">+<span class="comment">---------+---------------+</span></span><br><span class="line">|       1 | 台式机            |</span><br><span class="line">|       2 | 平板电脑             |</span><br><span class="line">|       3 | 服务器/工作站            |</span><br><span class="line">|       4 | 游戏本             |</span><br><span class="line">|       5 | 笔记本            |</span><br><span class="line">|       6 | 笔记本配件            |</span><br><span class="line">|       7 | 超级本              |</span><br><span class="line">+<span class="comment">---------+---------------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>但是此时商品表还没有分类表的外键，需要参照分类表更新商品表，以前学习的是单表更新，但是现在商品表需要参照分类表进行更新，所以这就是多表更新。</p>
<h2 id="4）-多表更新的实现"><a href="#4）-多表更新的实现" class="headerlink" title="4） 多表更新的实现"></a>4） 多表更新的实现</h2><p>语法：<br><strong>UPDATE table_references SET col_name1={expr1 | DEFAULT}<br>[,col_name2={expr2 | DEFAULT}] … [WHERE where_condition]</strong><br>需要表的参照关系，这就是将要讲的连接。</p>
<p>表的参照关系：一张表通过INNER JOIN或者LEFT OUTER JOIN去连接另外的一张表并通过ON指定连接条件，也可以给表起别名。</p>
<p>连接表的语法：<br><strong>table_reference<br> {[INNER | CROSS] JOIN | {LEFT | RIGHT} [OUTER] JOIN}<br>table_reference<br> ON conditional_expr</strong></p>
<p>连接表处理使用表的名称以外，还需要使用连接类型。</p>
<p>连接类型一共分为3中：在MySQL中，JOIN,CROSS JOIN和INNER JOIN是等价的。</p>
<p>【1】INNER JOIN:内连接.</p>
<p>【2】LEFT [OUTER] JOIN:左外连接。</p>
<p>【3】RIGHT [OUTER] JOIN:右外连接。</p>
<p>下面我们使用INNER JOIN连接两张表，并作为表的参照关系进行多表更新，个例：更新商品表id=22的商品分类属性，修改为6，因为商品分类的名称在商品分类表中对应的id为6。就是说将tdb_goods 中的商品属性，更改为了tdb_goods_cates 中属性名称对应的id。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name</span><br><span class="line">    -&gt; set goods_cate = cate_id;</span><br><span class="line">Query OK, 22 rows affected (0.04 sec)</span><br><span class="line">Rows matched: 22  Changed: 22  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>结果：数据信息被更新了<br>所以多表更新，就是参照另外的表更新本表。</p>
<h1 id="4-多表更新之一步到位"><a href="#4-多表更新之一步到位" class="headerlink" title="4. 多表更新之一步到位"></a>4. 多表更新之一步到位</h1><p>上面我们创建多表更新时，一共分为三步：<br>[A] 创建表<br>[B] INSERT  SELECT 将记录写入数据表<br>[C] 多表的更新<br>下面可以减少操作：<br>CREATE……SELECT<br>创建数据表同时将查询结果写入到数据表<br><strong>CREATE TABLE [IF NOT EXISTS] tbl_name<br>[(create_definition,…..)]<br>select_statement</strong></p>
<p>上一小节我们将商品的分类已经更新，还有商品的品牌，下面处理品牌。<br>看一下商品品牌都有哪些种类</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT brand_name FROM tdb_goods GROUP BY brand_name;</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| brand_name |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| IBM        |</span><br><span class="line">| 华硕          |</span><br><span class="line">| 宏碁         |</span><br><span class="line">| 惠普           |</span><br><span class="line">| 戴尔           |</span><br><span class="line">| 索尼           |</span><br><span class="line">| 联想           |</span><br><span class="line">| 苹果          |</span><br><span class="line">| 雷神           |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>一共有9个品牌。</p>
<h2 id="1）创建表-写入记录"><a href="#1）创建表-写入记录" class="headerlink" title="1）创建表+写入记录"></a>1）创建表+写入记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tdb_goods_brands</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; brand_name varchar(40) NOT NULL</span><br><span class="line">    -&gt; )</span><br><span class="line">    -&gt; SELECT brand_name FROM tdb_goods GROUP BY brand_name;</span><br><span class="line">Query OK, 9 rows affected (0.01 sec)</span><br><span class="line">Records: 9  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>查看一下这张表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tdb_goods_brands;</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line">| brand_id | brand_name |</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line">|        1 | IBM        |</span><br><span class="line">|        2 | 华硕          |</span><br><span class="line">|        3 | 宏碁         |</span><br><span class="line">|        4 | 惠普           |</span><br><span class="line">|        5 | 戴尔           |</span><br><span class="line">|        6 | 索尼           |</span><br><span class="line">|        7 | 联想           |</span><br><span class="line">|        8 | 苹果          |</span><br><span class="line">|        9 | 雷神           |</span><br><span class="line">+<span class="comment">----------+------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>都已经插入好啦。现在一步既可完成。</p>
<h2 id="2）实现多表更新"><a href="#2）实现多表更新" class="headerlink" title="2）实现多表更新"></a>2）实现多表更新</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE tdb_goods INNER JOIN tdb_goods_brands ON brand_name = brand_name</span><br><span class="line">    -&gt; SET brand_name = brand_id;</span><br><span class="line">ERROR 1052 (23000): Column 'brand_name' in field list is ambiguous</span><br></pre></td></tr></table></figure>
<p>出现错误，原因是两张表中都含brand_name,系统不知道如何区分啦，这时候就需要使用别名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE tdb_goods AS g INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name</span><br><span class="line">    -&gt; SET g.brand_name = b.brand_id;</span><br><span class="line">Query OK, 22 rows affected (0.03 sec)</span><br><span class="line">Rows matched: 22  Changed: 22  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>这样就可以啦。</p>
<h2 id="3）数据表减肥"><a href="#3）数据表减肥" class="headerlink" title="3）数据表减肥"></a>3）数据表减肥</h2><p>下面我们再来看一下tdb_goods这张表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM tdb_goods;</span><br><span class="line">+<span class="comment">-------------+------------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field       | Type                   | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-------------+------------------------+------+-----+---------+----------------+</span></span><br><span class="line">| goods_id    | smallint(5) unsigned   | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| goods_name  | varchar(150)           | NO   |     | NULL    |                |</span><br><span class="line">| goods_cate  | varchar(40)            | NO   |     | NULL    |                |</span><br><span class="line">| brand_name  | varchar(40)            | NO   |     | NULL    |                |</span><br><span class="line">| goods_price | decimal(15,3) unsigned | NO   |     | 0.000   |                |</span><br><span class="line">| is_show     | tinyint(1)             | NO   |     | 1       |                |</span><br><span class="line">| is_saleoff  | tinyint(1)             | NO   |     | 0       |                |</span><br><span class="line">+<span class="comment">-------------+------------------------+------+-----+---------+----------------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>我们已经将goods_cate和brand_name改为了编号，然而他的数据类型还为字符型，一般我们不这样存储，可以将其改为brand_id和cate_id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE tdb_goods</span><br><span class="line">    -&gt; CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,</span><br><span class="line">    -&gt; CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;</span><br><span class="line">Query OK, 22 rows affected (0.04 sec)</span><br><span class="line">Records: 22  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>这就是数据表减肥。<br>现在分别在tdb_goods_cates和tdb_goods_brands表插入记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> tdb_goods_cates(cate_name) <span class="keyword">VALUES</span>(<span class="string">'路由器'</span>),(<span class="string">'交换机'</span>),(<span class="string">'网卡'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_brands(brand_name) <span class="keyword">VALUES</span>(<span class="string">'海尔'</span>),(<span class="string">'清华同方'</span>),(<span class="string">'神舟'</span>);</span><br></pre></td></tr></table></figure>

<p>在tdb_goods数据表写入任意记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> tdb_goods(goods_name,cate_id,brand_id,goods_price) <span class="keyword">VALUES</span>(<span class="string">' LaserJet Pro P1606dn 黑白激光打印机'</span>,<span class="string">'12'</span>,<span class="string">'4'</span>,<span class="string">'1849'</span>);</span><br></pre></td></tr></table></figure>

<p>上面这条记录的种类是12，然而tdb_goods_cates中并没有12，但是也没有报错。因为我们没有设置物理约束。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tdb_goods_cates;</span><br><span class="line">+<span class="comment">---------+---------------+</span></span><br><span class="line">| cate_id | cate_name     |</span><br><span class="line">+<span class="comment">---------+---------------+</span></span><br><span class="line">|       1 | 台式机            |</span><br><span class="line">|       2 | 平板电脑             |</span><br><span class="line">|       3 | 服务器/工作站            |</span><br><span class="line">|       4 | 游戏本             |</span><br><span class="line">|       5 | 笔记本            |</span><br><span class="line">|       6 | 笔记本配件            |</span><br><span class="line">|       7 | 超级本              |</span><br><span class="line">|       8 | 路由器             |</span><br><span class="line">|       9 | 交换机              |</span><br><span class="line">|      10 | 网卡              |</span><br><span class="line">+<span class="comment">---------+---------------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>在实际使用过程中，我们不可能种类和品牌只显示数字，应该给用户提供具体的名称，这时候就需要连接来实现。</p>
<h1 id="5-连接的语法结构"><a href="#5-连接的语法结构" class="headerlink" title="5. 连接的语法结构"></a>5. 连接的语法结构</h1><p>MySQL 在SELECT 语句 多表更新 多表删除语句中支持JOIN 操作<br>语法结构<br><strong>table_reference<br>{[INNER|CROSS] JOIN {LEFT|RIGHT} [OUTER] JOIN}<br>table_reference<br>ON conditional_expr</strong><br>基本类型：A表 链接类型 B表 两张表的链接条<br>数据表参照<br><strong>table_reference<br>tbl_name [[AS] alias] | table_sabquery [AS] alias</strong><br>数据表可以使用tbl_name AS alias_name<br>   或tbl_name alias_name 赋予别名<br>table_subquery可以作为子查询使用在FROM子句中<br>   这样的子查询必须为其赋予别名</p>
<h2 id="1-内连接INNER-JOIN"><a href="#1-内连接INNER-JOIN" class="headerlink" title="1) 内连接INNER JOIN"></a>1) 内连接INNER JOIN</h2><p>使用ON关键字来设定连接条件，也可以使用WHERE来代替<br>通常使用ON关键字来设定连接条件，<br>使用WHERE关键字进行结果集记录的过滤</p>
<p>INNER JOIN连接表示两个表的交集。<br>下面来个示例;<br>现在我们的商品一共有23个，并且第23个商品的cate_id为12，在tdb_goods_cates中是不存在的，下面使用内连接将这两个表连接在一起查询</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,cate_name FROM tdb_goods INNER JOIN tdb_goods_cates</span><br><span class="line">    -&gt; ON tdb_goods.cate_id = tdb_goods_cates.cate_id\G;</span><br></pre></td></tr></table></figure>
<p>运行上述语句之后，会有22条商品信息返回，缺失第23条<br>来看一下其中一条商品的信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  goods_id: 5</span><br><span class="line">goods_name: X240(20ALA0EYCD) 12.5英寸超极本</span><br><span class="line"> cate_name: 超级本</span><br></pre></td></tr></table></figure>

<p>通过连接，我们就把商品的种类名称也就显示出来啦，而不是数字。</p>
<h2 id="2）外连接OUTER-JOIN"><a href="#2）外连接OUTER-JOIN" class="headerlink" title="2）外连接OUTER JOIN"></a>2）外连接OUTER JOIN</h2><p>左外连接：显示左表的全部记录和右表符合连接条件的记录<br>右外连接：显示右表的全部记录和左表符合连接条件的记录<br>先看一下左外连接：（左表tdb_goods  右表tdb_goods_cates）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,cate_name FROM tdb_goods LEFT OUTER JOIN tdb_goods_cates</span><br><span class="line">    -&gt; ON tdb_goods.cate_id = tdb_goods_cates.cate_id\G;</span><br></pre></td></tr></table></figure>
<p>将会返回23条记录，也就是tdb_goods 中的全部，看一下返回的第23条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  goods_id: 23</span><br><span class="line">goods_name:  LaserJet Pro P1606dn 黑白激光打印机</span><br><span class="line"> cate_name: NULL</span><br><span class="line">23 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>因为cate_name在tdb_goods_cates中不存在所以为NULL。</p>
<p>再来看一下右外连接：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,cate_name FROM tdb_goods RIGHT OUTER JOIN tdb_goods_cates</span><br><span class="line">    -&gt; ON tdb_goods.cate_id = tdb_goods_cates.cate_id\G;</span><br></pre></td></tr></table></figure>
<p>一共有25个记录返回，包括右表的全部和左表符合连接条件的22条<br>其中的后三条：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">*************************** 23. row ***************************</span><br><span class="line">  goods_id: NULL</span><br><span class="line">goods_name: NULL</span><br><span class="line"> cate_name: 路由器</span><br><span class="line">*************************** 24. row ***************************</span><br><span class="line">  goods_id: NULL</span><br><span class="line">goods_name: NULL</span><br><span class="line"> cate_name: 交换机</span><br><span class="line">*************************** 25. row ***************************</span><br><span class="line">  goods_id: NULL</span><br><span class="line">goods_name: NULL</span><br><span class="line"> cate_name: 网卡</span><br></pre></td></tr></table></figure>
<p>因为在左表中无连接，所以其他信息为NULL。<br>这三种连接中，内连接用的相对比较多。</p>
<h1 id="6-多表连接"><a href="#6-多表连接" class="headerlink" title="6. 多表连接"></a>6. 多表连接</h1><p>上一小节我们实现了两张表的连接，下面来试试三张表的连接，将商品的品牌，种类都通过连接的方式一起显示出来。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g</span><br><span class="line">    -&gt; INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id</span><br><span class="line">    -&gt; INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</span><br></pre></td></tr></table></figure>

<p>这样最开始创建的22条商品就全部显示出来啦。<br>要明白，这个显示的结果和原来显示的结果不一样的地方在于：这是通过多张表的连接实现的，而以前是纯粹的一张表查询实现的。<br>表的连接可以看做是外键的一种逆向操作，外键将多张表分开存储，而连接又将表联系在一起。</p>
<h1 id="7-关于连接的几点说明"><a href="#7-关于连接的几点说明" class="headerlink" title="7. 关于连接的几点说明"></a>7. 关于连接的几点说明</h1><p>外连接为例：<br>A LEFT JOIN B join_condition（左外连接，右外连接情况下调换AB就可）<br>数据表B的结果集依赖数据表A。（A中有的记录才可以在B中显示，否则不显示）<br>数据表A的结果集根据左连接条件依赖所有数据表(B表除外)。<br>左外连接条件决定如何检索数据表B(在没有指定WHERE条件的情况下)。（A表决定B表）<br>如果数据表A的某条记录符合WHERE条件,但是在数据表B不存在符合连接条件的记录,将生成一个所有列为空的额外的B行。</p>
<p>如果使用内连接查找的记录在连接数据表中不存在,并且在WHERE子句中尝试以下操作: col-namd IS NULL时,如果col-name被定义为NOT NULL, MySQL将在找到符合连执着条件的记录后停止搜索更多的行（查到为null，而要求不为null，此时发生冲突）。</p>
<h1 id="8-无限级分类表设计"><a href="#8-无限级分类表设计" class="headerlink" title="8. 无限级分类表设计"></a>8. 无限级分类表设计</h1><p>当一个分类下面可能还要无数个子分类时，需要用到：<br>– 无限分类的数据表设计<br>下面创建一张无限级分类的数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tdb_goods_types(</span><br><span class="line">   type_id   <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">   type_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   parent_id <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>插入下面的记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'家用电器'</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电脑、办公'</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'大家电'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'生活电器'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'平板电视'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'空调'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电风扇'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'饮水机'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电脑整机'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电脑配件'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'笔记本'</span>,<span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'超级本'</span>,<span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'游戏本'</span>,<span class="number">9</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'CPU'</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'主机'</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>查看记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tdb_goods_types;</span><br><span class="line">+<span class="comment">---------+------------+-----------+</span></span><br><span class="line">| type_id | type_name  | parent_id |</span><br><span class="line">+<span class="comment">---------+------------+-----------+</span></span><br><span class="line">|       1 | 家用电器          |         0 |</span><br><span class="line">|       2 | 电脑、办公        |         0 |</span><br><span class="line">|       3 | 大家电          |         1 |</span><br><span class="line">|       4 | 生活电器           |         1 |</span><br><span class="line">|       5 | 平板电视          |         3 |</span><br><span class="line">|       6 | 空调          |         3 |</span><br><span class="line">|       7 | 电风扇           |         4 |</span><br><span class="line">|       8 | 饮水机          |         4 |</span><br><span class="line">|       9 | 电脑整机           |         2 |</span><br><span class="line">|      10 | 电脑配件           |         2 |</span><br><span class="line">|      11 | 笔记本         |         9 |</span><br><span class="line">|      12 | 超级本           |         9 |</span><br><span class="line">|      13 | 游戏本          |         9 |</span><br><span class="line">|      14 | CPU        |        10 |</span><br><span class="line">|      15 | 主机           |        10 |</span><br><span class="line">+<span class="comment">---------+------------+-----------+</span></span><br><span class="line">15 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看到家电用器和电脑办公的parent_id 均为0，说明这两个是顶级分类，没有父节点；大家电和生活电器是家用电器的子类。<br>数据表建好啦，怎么实现查找呢？<br>自身连接<br>同一个数据表对其自身进行连接</p>
<p>下面我们将上面的那张表复制一份，看做两张表，分为左和右，如果把左表看作是父表，那么右表就是子表。同时，左表的parent_id 就没有意义啦，而且右表的type_id 也没有意义。</p>
<table>
<thead>
<tr>
<th align="center">左表(父表p)</th>
<th align="center">右表（子表s）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">type_id        type_name</td>
<td align="center">type_name     parent_id</td>
</tr>
</tbody></table>
<p>下面看下如何连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT p.type_id,p.type_name,s.type_name FROM tdb_goods_types AS p</span><br><span class="line">    -&gt; LEFT JOIN tdb_goods_types AS s</span><br><span class="line">    -&gt; ON p.type_id = s.parent_id;</span><br><span class="line">+<span class="comment">---------+------------+-----------+</span></span><br><span class="line">| type_id | type_name  | type_name |</span><br><span class="line">+<span class="comment">---------+------------+-----------+</span></span><br><span class="line">|       1 | 家用电器          | 大家电         |</span><br><span class="line">|       1 | 家用电器          | 生活电器          |</span><br><span class="line">|       2 | 电脑、办公        | 电脑整机          |</span><br><span class="line">|       2 | 电脑、办公        | 电脑配件          |</span><br><span class="line">|       3 | 大家电          | 平板电视         |</span><br><span class="line">|       3 | 大家电          | 空调         |</span><br><span class="line">|       4 | 生活电器           | 电风扇          |</span><br><span class="line">|       4 | 生活电器           | 饮水机         |</span><br><span class="line">|       5 | 平板电视          | NULL      |</span><br><span class="line">|       6 | 空调          | NULL      |</span><br><span class="line">|       7 | 电风扇           | NULL      |</span><br><span class="line">|       8 | 饮水机          | NULL      |</span><br><span class="line">|       9 | 电脑整机           | 笔记本        |</span><br><span class="line">|       9 | 电脑整机           | 超级本          |</span><br><span class="line">|       9 | 电脑整机           | 游戏本         |</span><br><span class="line">|      10 | 电脑配件           | CPU       |</span><br><span class="line">|      10 | 电脑配件           | 主机          |</span><br><span class="line">|      11 | 笔记本         | NULL      |</span><br><span class="line">|      12 | 超级本           | NULL      |</span><br><span class="line">|      13 | 游戏本          | NULL      |</span><br><span class="line">|      14 | CPU        | NULL      |</span><br><span class="line">|      15 | 主机           | NULL      |</span><br><span class="line">+<span class="comment">---------+------------+-----------+</span></span><br><span class="line">22 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>第一列是父表的id，第二列是父表的类型，第三列是父类型对应的子类型<br>可以看到家用电器有两个子类，如果想显示每个父类具体有几个子类的数量呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT p.type_id,p.type_name,COUNT(s.type_name) child_count FROM tdb_goods_types AS p</span><br><span class="line">    -&gt; LEFT JOIN tdb_goods_types AS s</span><br><span class="line">    -&gt; ON p.type_id = s.parent_id GROUP BY p.type_name ORDER BY p.type_id;</span><br><span class="line">+<span class="comment">---------+------------+-------------+</span></span><br><span class="line">| type_id | type_name  | child_count |</span><br><span class="line">+<span class="comment">---------+------------+-------------+</span></span><br><span class="line">|       1 | 家用电器          |           2 |</span><br><span class="line">|       2 | 电脑、办公        |           2 |</span><br><span class="line">|       3 | 大家电          |           2 |</span><br><span class="line">|       4 | 生活电器           |           2 |</span><br><span class="line">|       5 | 平板电视          |           0 |</span><br><span class="line">|       6 | 空调          |           0 |</span><br><span class="line">|       7 | 电风扇           |           0 |</span><br><span class="line">|       8 | 饮水机          |           0 |</span><br><span class="line">|       9 | 电脑整机           |           3 |</span><br><span class="line">|      10 | 电脑配件           |           2 |</span><br><span class="line">|      11 | 笔记本         |           0 |</span><br><span class="line">|      12 | 超级本           |           0 |</span><br><span class="line">|      13 | 游戏本          |           0 |</span><br><span class="line">|      14 | CPU        |           0 |</span><br><span class="line">|      15 | 主机           |           0 |</span><br><span class="line">+<span class="comment">---------+------------+-------------+</span></span><br><span class="line">15 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>这相当于根据父类查找的子类，那如果我们想要根据子类查找父类呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s</span><br><span class="line">    -&gt; LEFT JOIN tdb_goods_types AS p</span><br><span class="line">    -&gt; ON p.type_id = s.parent_id;</span><br><span class="line">+<span class="comment">---------+------------+------------+</span></span><br><span class="line">| type_id | type_name  | type_name  |</span><br><span class="line">+<span class="comment">---------+------------+------------+</span></span><br><span class="line">|       1 | 家用电器          | NULL       |</span><br><span class="line">|       2 | 电脑、办公        | NULL       |</span><br><span class="line">|       3 | 大家电          | 家用电器          |</span><br><span class="line">|       4 | 生活电器           | 家用电器          |</span><br><span class="line">|       5 | 平板电视          | 大家电          |</span><br><span class="line">|       6 | 空调          | 大家电          |</span><br><span class="line">|       7 | 电风扇           | 生活电器           |</span><br><span class="line">|       8 | 饮水机          | 生活电器           |</span><br><span class="line">|       9 | 电脑整机           | 电脑、办公        |</span><br><span class="line">|      10 | 电脑配件           | 电脑、办公        |</span><br><span class="line">|      11 | 笔记本         | 电脑整机           |</span><br><span class="line">|      12 | 超级本           | 电脑整机           |</span><br><span class="line">|      13 | 游戏本          | 电脑整机           |</span><br><span class="line">|      14 | CPU        | 电脑配件           |</span><br><span class="line">|      15 | 主机           | 电脑配件           |</span><br><span class="line">+<span class="comment">---------+------------+------------+</span></span><br><span class="line">15 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>第一列就是子类的id，第二列子类的名称，第三其父类的名称</p>
<h1 id="9-多表删除"><a href="#9-多表删除" class="headerlink" title="9. 多表删除"></a>9. 多表删除</h1><p>我们来看一下最开始创建的这张表：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tdb_goods\G;</span><br></pre></td></tr></table></figure>
<p>你会发现有一些重复的商品，像第19和22个商品，下面我们的目标就是删除这些重复的商品。<br>语法：<br><strong>DELETE tbL_name[.<em>] [, tbl_name[.</em>]] …FROM table_references [WHERE where_condition]</strong><br>首先来看看哪些是多余的？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING COUNT(goods_name)&gt;=2;</span><br><span class="line">+<span class="comment">----------+-----------------------+</span></span><br><span class="line">| goods_id | goods_name            |</span><br><span class="line">+<span class="comment">----------+-----------------------+</span></span><br><span class="line">|       18 |  HMZ-T3W 头戴显示设备         |</span><br><span class="line">|       19 | 商务双肩背包                   |</span><br><span class="line">+<span class="comment">----------+-----------------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>上面语句的意思是按照goods_name进行分组，附加条件是，相同的goods_name数量大于等于2，这样就把重复的挑选出来啦。<br>我们可以把上面的结果想象成一张表，参照这张表来删除tdb_goods中的重复商品。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING COUNT(goods_name&gt;=2)) AS t2</span><br><span class="line">    -&gt; ON t1.goods_name = t2.goods_name</span><br><span class="line">    -&gt; WHERE t1.goods_id &gt; t2.goods_id;</span><br><span class="line">Query OK, 2 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>

<p>delete t1 from tdb_goods as t1  //从本表中删除,将tdb_goods看做t1<br>left join (select goods_id,goods_name from tdb_goods group by goods_name having count(goods_name)&gt;=2) as t2  //子查询得到重复条目<br>on t1.goods_name=t2.goods_name  //t1和t2的连接条件<br>where t1.goods_id&gt;t2.goods_id;  //删除id号较大的条目<br>这样重复的两条记录就被删除。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><strong>子查询</strong>是指出现在select语句中的，必须出现在小括号内。<br>子查询的外层可以是select语句，insert语句、update语句及delete语句。<br>子查询中可以包含多个关键字或条件，如group by、order by、limit以及相关函数等。<br><strong>使用子查询的环境</strong>：<br>（1）比较运算符引发的子查询<br>（2）in或not in引发的子查询<br>（3）exist或not exist引发的子查询。</p>
<p><strong>多表更新、多表删除、select语句中都可以使用连接。</strong></p>
<p><strong>连接的类型</strong>：<br>（1）内连接（交集，左表和右表都符合条件的记录）<br>（2）外连接（左连接和右连接）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章 操作数据表中的记录</title>
    <url>/2019/12/15/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>这一章主要是记录的操作，之前已经学过记录的插入、查找、删除，下面进行更加详细的讲解。</p>
<a id="more"></a> 
<h1 id="1-插入记录"><a href="#1-插入记录" class="headerlink" title="1. 插入记录"></a>1. 插入记录</h1><h2 id="1）第一种方法"><a href="#1）第一种方法" class="headerlink" title="1）第一种方法"></a>1）第一种方法</h2><p><strong>INSERT [INTO] tbl_name [(col_name,…)] {VALUES|VALUE} ({expr | DEFAULT},…),(…),…</strong><br>打开mysql服务器，连接客户端，使用test数据库：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;net start mysql</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;mysql -uroot -p</span><br><span class="line">Enter password: ****</span><br><span class="line"></span><br><span class="line">mysql&gt; USE test;</span><br></pre></td></tr></table></figure>
<p>为节省空间这里只给出指令，没有运行结果。<br>下面来看一个test数据库里面都有哪些数据表啦，当然你的可能和我不太一样。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| provinces      |</span><br><span class="line">| tb1            |</span><br><span class="line">| tb2            |</span><br><span class="line">| tb3            |</span><br><span class="line">| tb4            |</span><br><span class="line">| tb5            |</span><br><span class="line">| tb6            |</span><br><span class="line">| users          |</span><br><span class="line">| users1         |</span><br><span class="line">| users2         |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">10 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到上一个章节创建的数据表都还在。<br>如果存在users数据表的话，先把它删除，待会重新创建一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP TABLE users;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>重新创建users数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE users(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username VARCHAR(20) NOT NULL,</span><br><span class="line">    -&gt; password VARCHAR(32) NOT NULL,</span><br><span class="line">    -&gt; age TINYINT UNSIGNED NOT NULL DEFAULT 10,</span><br><span class="line">    -&gt; sex BOOLEAN</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>

<p>在这就省略查看是否真正创建成功啦，自行查看。<br>接下来我们往表里插入几条记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(NULL,'hua','123',18,true);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">| id | username | password | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123      |  18 |    1 |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<p>我们对id这个自增量赋值为NULL，其值为1。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(NULL,'hao','123',18,true);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">| id | username | password | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123      |  18 |    1 |</span><br><span class="line">|  2 | hao      | 123      |  18 |    1 |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>还有一种方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(DEFAULT,'yue','123',18,true);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">| id | username | password | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123      |  18 |    1 |</span><br><span class="line">|  2 | hao      | 123      |  18 |    1 |</span><br><span class="line">|  3 | yue      | 123      |  18 |    1 |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>以上说明：如果想对自动递增的字段赋值，可以输入NULL或者DEFAULT.<br>另外上面三个记录我们都对每个字段进行了赋值，如果缺少则会出现错误：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(NULL,'chun','123',18);</span><br><span class="line">ERROR 1136 (21S01): Column count doesn't match value count at row 1</span><br></pre></td></tr></table></figure>
<p>说明如果省略列名的话，所有的列必须依次赋值。<br>除了可以书写确切的数字以外，还可以书写表达式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(DEFAULT,'yuan','123',20*2-20,true);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">| id | username | password | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123      |  18 |    1 |</span><br><span class="line">|  2 | hao      | 123      |  18 |    1 |</span><br><span class="line">|  3 | yue      | 123      |  18 |    1 |</span><br><span class="line">|  4 | yuan     | 123      |  20 |    1 |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>说明对整型字段赋值，可以使用数学表达式。当然也可以是字符表达式，或者某个函数。<br>再来看下DEFAULT，除了可以对自动赋值的字段赋值，还可以对设置了默认约束的字段赋值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(DEFAULT,'yue','123',DEFAULT,true);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">| id | username | password | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123      |  18 |    1 |</span><br><span class="line">|  2 | hao      | 123      |  18 |    1 |</span><br><span class="line">|  3 | yue      | 123      |  18 |    1 |</span><br><span class="line">|  4 | yuan     | 123      |  20 |    1 |</span><br><span class="line">|  5 | yue      | 123      |  10 |    1 |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>第五条记录的age被赋值为默认值10。<br>以上都是插入一条记录，下面如何一次性插入多条记录呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(DEFAULT,'ye','123',20*2-20,true),(DEFAULT,'chun',md5(123),DEFAULT,0);</span><br><span class="line">Query OK, 2 rows affected (0.03 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  18 |    1 |</span><br><span class="line">|  2 | hao      | 123                              |  18 |    1 |</span><br><span class="line">|  3 | yue      | 123                              |  18 |    1 |</span><br><span class="line">|  4 | yuan     | 123                              |  20 |    1 |</span><br><span class="line">|  5 | yue      | 123                              |  10 |    1 |</span><br><span class="line">|  6 | ye       | 123                              |  20 |    1 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  10 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>md5(‘123’)表示计算字符串的哈希值</p>
<h2 id="2）第二种方法"><a href="#2）第二种方法" class="headerlink" title="2）第二种方法"></a>2）第二种方法</h2><p><strong>INSERT [INTO] tbl_name SET col_name={expr | DEFAULT},..</strong><br>与第一种方式区别在于，此方法可以使用子查询(SubQuery) ，而且只能一次性插入一条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users SET username = 'tian',password = '1233';</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  18 |    1 |</span><br><span class="line">|  2 | hao      | 123                              |  18 |    1 |</span><br><span class="line">|  3 | yue      | 123                              |  18 |    1 |</span><br><span class="line">|  4 | yuan     | 123                              |  20 |    1 |</span><br><span class="line">|  5 | yue      | 123                              |  10 |    1 |</span><br><span class="line">|  6 | ye       | 123                              |  20 |    1 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  10 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  10 | NULL |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>因为age有默认值，sex允许为空，所以可以只对username和password赋值。</p>
<h2 id="3）第三种方法"><a href="#3）第三种方法" class="headerlink" title="3）第三种方法"></a>3）第三种方法</h2><p>INSERT SELECT语句：<br><strong>INSERT [INTO] tbl_name [(col_name,….)] SELECT …</strong><br>此方法可以将查询结果插入到指定数据表。<br>由于对于SELECT语句理解较少，暂时先放这。(本章第9小节进行了讲解)</p>
<h1 id="2-单表更新记录"><a href="#2-单表更新记录" class="headerlink" title="2. 单表更新记录"></a>2. 单表更新记录</h1><p>当我们书写记录的过程中，字段值可能出现错误，或者说我们想要更改字段值，就需要使用UPDATE语句，下面这种方式是单表更新，还有一种方式是多表更新，这种方式等学到连接时再讲。</p>
<p><strong>UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1={expr|DEFAULT}[,col_name2={expr|DEFAULT}]…[WHERE where_condition]</strong></p>
<p>如果省略WHERE条件，将对所有的记录更新。<br>下面来看一个示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE users SET age=age+10;</span><br><span class="line">Query OK, 8 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 8  Changed: 8  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  28 |    1 |</span><br><span class="line">|  2 | hao      | 123                              |  28 |    1 |</span><br><span class="line">|  3 | yue      | 123                              |  28 |    1 |</span><br><span class="line">|  4 | yuan     | 123                              |  30 |    1 |</span><br><span class="line">|  5 | yue      | 123                              |  20 |    1 |</span><br><span class="line">|  6 | ye       | 123                              |  30 |    1 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  20 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  20 | NULL |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>第一个语句的意思就是，将所有记录的age字段的值加10。<br>上面的例子是更新了一列，当然我也可以更新俩列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE users SET age=age-id,sex=0;</span><br><span class="line">Query OK, 8 rows affected (0.03 sec)</span><br><span class="line">Rows matched: 8  Changed: 8  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  26 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  26 |    0 |</span><br><span class="line">|  5 | yue      | 123                              |  15 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  24 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  12 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>我更新age为age减去id的值，并且将sex全部设置为了0；<br>上面都是对全部的记录更新，下面就让我们使用WHERE对特定的记录进行更新吧！<br>将所有id为偶数的user的age加上10：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE users SET age=age+10 WHERE id%2=0;</span><br><span class="line">Query OK, 4 rows affected (0.03 sec)</span><br><span class="line">Rows matched: 4  Changed: 4  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  5 | yue      | 123                              |  15 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到有四条记录被修改。</p>
<h1 id="3-单表删除记录"><a href="#3-单表删除记录" class="headerlink" title="3. 单表删除记录"></a>3. 单表删除记录</h1><p>如果数据表中的记录不想要啦，还可以进行删除操作，同样也有两种方式：单表删除和多表删除，也只看单表删除。</p>
<p><strong>DELETE FROM tbl_name [WHERE where_condition]</strong></p>
<p>当省略WHERE时将删除所有记录<br>下面我们删除id=5的记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELETE FROM users WHERE id = 5;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>那么当我们再增加一条记录时，它的id是5呢还是9呢？<br>试试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users VALUES(NULL,'hui','345',18,0);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">|  9 | hui      | 345                              |  18 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>答案是9。可见当增加记录时，即使前面id号不连续，它仍然为当前最大的id加一。</p>
<h1 id="4-SELECT查询表达式解析"><a href="#4-SELECT查询表达式解析" class="headerlink" title="4. SELECT查询表达式解析"></a>4. SELECT查询表达式解析</h1><p>曾有人说过select语句占数据表操作的百分之八十以上，嗯。。。还没有体会到<br><strong>select select_expr<br>[<br>from table_references 表的参照<br>[where where_condition] 条件<br>[group by {col_name|position} [asc|sesc],…记录的分组<br>[having where_condition] 分组时对分组的条件进行设定<br>[order by {col_name|expr|position} [asc|desc]…]对于结果进行排序<br>[limit {[offset,]row_count|row_count OFFSET offset}]限制返回结果的数量<br>]</strong><br>（下面几节依次讲解）<br>每一个表达式表示想要的一列，必须有至少一个<br>多个列之间英文逗号分隔<br>星号(<em>)表示所有列。tbl_name.</em>可以表示命名表的所有列</p>
<p>之前我们最常使用的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">|  9 | hui      | 345                              |  18 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>这是对所有列的查看，如果我只想看特定的几个列呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT id,username FROM users;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | hua      |</span><br><span class="line">|  2 | hao      |</span><br><span class="line">|  3 | yue      |</span><br><span class="line">|  4 | yuan     |</span><br><span class="line">|  6 | ye       |</span><br><span class="line">|  7 | chun     |</span><br><span class="line">|  8 | tian     |</span><br><span class="line">|  9 | hui      |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>只显示了id和username两个列，查询的顺序和数据表中列的顺序可以不一致，下面看看当我把id和username的查询顺序倒过来以后的情形：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT username,id FROM users;</span><br><span class="line">+<span class="comment">----------+----+</span></span><br><span class="line">| username | id |</span><br><span class="line">+<span class="comment">----------+----+</span></span><br><span class="line">| hua      |  1 |</span><br><span class="line">| hao      |  2 |</span><br><span class="line">| yue      |  3 |</span><br><span class="line">| yuan     |  4 |</span><br><span class="line">| ye       |  6 |</span><br><span class="line">| chun     |  7 |</span><br><span class="line">| tian     |  8 |</span><br><span class="line">| hui      |  9 |</span><br><span class="line">+<span class="comment">----------+----+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>显示的结果也倒过来啦，根据select的顺序显示。<br>tbl_name.*可以表示命名表的所有列，也就是可以在列的前面加上数据表的名字：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT users.username,users.id FROM users;</span><br><span class="line">+<span class="comment">----------+----+</span></span><br><span class="line">| username | id |</span><br><span class="line">+<span class="comment">----------+----+</span></span><br><span class="line">| hua      |  1 |</span><br><span class="line">| hao      |  2 |</span><br><span class="line">| yue      |  3 |</span><br><span class="line">| yuan     |  4 |</span><br><span class="line">| ye       |  6 |</span><br><span class="line">| chun     |  7 |</span><br><span class="line">| tian     |  8 |</span><br><span class="line">| hui      |  9 |</span><br><span class="line">+<span class="comment">----------+----+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>和上面结果一样，当然，当我们只对一个表进行操作时，没有这个必要。在对多表进行操作时，可以清晰辨认列属于哪张数据表。<br>有些字段的名字比较复杂，不太容易记忆，这时可以赋予别名。<br>查询表达式可以使用[AS] alias_name为其赋予别名<br>别名可用于GROUP BY,ORDER BY或HAVING子句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT id AS username,username AS uname FROM users;</span><br><span class="line">+<span class="comment">----------+-------+</span></span><br><span class="line">| username | uname |</span><br><span class="line">+<span class="comment">----------+-------+</span></span><br><span class="line">|        1 | hua   |</span><br><span class="line">|        2 | hao   |</span><br><span class="line">|        3 | yue   |</span><br><span class="line">|        4 | yuan  |</span><br><span class="line">|        6 | ye    |</span><br><span class="line">|        7 | chun  |</span><br><span class="line">|        8 | tian  |</span><br><span class="line">|        9 | hui   |</span><br><span class="line">+<span class="comment">----------+-------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>将id命名为username，将username命名为uname。<br>AS可以省略，当然不推荐，有时可能与显示多条字段混淆。<br>5. where语句进行条件查询<br>对记录进行过滤，如果没有指定WHERE子句，则显示所有记录<br>在WHERE表达式中，可以使用MySQL支持的函数或运算符</p>
<h1 id="6-查询结果分组"><a href="#6-查询结果分组" class="headerlink" title="6. 查询结果分组"></a>6. 查询结果分组</h1><p><strong>[GROUP BY {col_name | position} [ASC | DESC], …]</strong><br><strong>ASC</strong>：升序，默认<br><strong>DESC</strong>：降序<br><strong>position</strong>：SELECT语句中列的序号 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT password FROM users GROUP BY password;</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| password                         |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| 123                              |</span><br><span class="line">| 1233                             |</span><br><span class="line">| 202cb962ac59075b964b07152d234b70 |</span><br><span class="line">| 345                              |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>根据password进行分组，分成了四个组<br>除了写名字还可以写位置：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT password FROM users GROUP BY 1;</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| password                         |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| 123                              |</span><br><span class="line">| 1233                             |</span><br><span class="line">| 202cb962ac59075b964b07152d234b70 |</span><br><span class="line">| 345                              |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>这里1是指select字段中第一个出现的字段，这里明显是password ，所以尽量指定名称，直观一点<br>如果把sex放第一个位置，那么只有一个分组啦</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT sex,password FROM users GROUP BY 1;</span><br><span class="line">+<span class="comment">------+----------+</span></span><br><span class="line">| sex  | password |</span><br><span class="line">+<span class="comment">------+----------+</span></span><br><span class="line">|    0 | 123      |</span><br><span class="line">+<span class="comment">------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>


<h1 id="7-分组条件"><a href="#7-分组条件" class="headerlink" title="7. 分组条件"></a>7. 分组条件</h1><p><strong>[ HAVING where_condition ]</strong><br>这时我们可以对符合一定条件的记录进行分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT password FROM users GROUP BY 1 HAVING age&gt;10;</span><br><span class="line">ERROR 1054 (42S22): Unknown column 'age' in 'having clause'</span><br></pre></td></tr></table></figure>
<p>想对age&gt;10的password进行分组，居然出现错误。<br>原因有两个：<br>第一个：HAVING 后面可以使用聚合函数（MAX最大值, MIN最小值，AVG平均值，SUM求和）<br>第二个：不使用聚合函数的话，HAVING 后出现的字段也必须在SELECT后面出现<br>来试一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT password,age FROM users GROUP BY 1 HAVING age&gt;10;</span><br><span class="line">+<span class="comment">----------------------------------+-----+</span></span><br><span class="line">| password                         | age |</span><br><span class="line">+<span class="comment">----------------------------------+-----+</span></span><br><span class="line">| 123                              |  27 |</span><br><span class="line">| 1233                             |  22 |</span><br><span class="line">| 202cb962ac59075b964b07152d234b70 |  13 |</span><br><span class="line">| 345                              |  18 |</span><br><span class="line">+<span class="comment">----------------------------------+-----+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>在SELECT后面加上age后，成功分类<br>再试一下聚合函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT password FROM users GROUP BY 1 HAVING AVG(age)&gt;10;</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| password                         |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">| 123                              |</span><br><span class="line">| 1233                             |</span><br><span class="line">| 202cb962ac59075b964b07152d234b70 |</span><br><span class="line">| 345                              |</span><br><span class="line">+<span class="comment">----------------------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h1 id="8-查询结果排序"><a href="#8-查询结果排序" class="headerlink" title="8. 查询结果排序"></a>8. 查询结果排序</h1><p>除了可以对查询结果条件进行指定，还可以对查询结果进行排序<br>[ORDER BY { col_name | expr | position }[ ASC | DESC ], … ]<br>可以按照某一字段进行排序，也可以按照位置进行排序，和GROUP BY完全相同的，ASC为升序，并且是默认的，DESC为降序，也可以同时以两个或者两个以上字段进行排序。<br>将查询结果按id降序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users ORDER BY id DESC;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  9 | hui      | 345                              |  18 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>当然，也可以对两个字段进行排序<br>先对age进行升序排列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users ORDER BY age;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  9 | hui      | 345                              |  18 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到age有相同的，比如36，再按照id降序排列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users ORDER BY age,id DESC;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  9 | hui      | 345                              |  18 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到最后两条age相同的记录，又按照id进行了降序排列。</p>
<h1 id="9-限制查询数量"><a href="#9-限制查询数量" class="headerlink" title="9. 限制查询数量"></a>9. 限制查询数量</h1><h2 id="1）限制查询结果返回的数量"><a href="#1）限制查询结果返回的数量" class="headerlink" title="1）限制查询结果返回的数量"></a>1）限制查询结果返回的数量</h2><p><strong>[ LIMIT { [ offset, ] row_count OFFSET offset } ]</strong><br>默认使用SELECT,返回所有的记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123                              |  27 |    0 |</span><br><span class="line">|  2 | hao      | 123                              |  36 |    0 |</span><br><span class="line">|  3 | yue      | 123                              |  25 |    0 |</span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">|  9 | hui      | 345                              |  18 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>使用limit语句就可以限制返回的数量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users LIMIT 2;</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">| id | username | password | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">|  1 | hua      | 123      |  27 |    0 |</span><br><span class="line">|  2 | hao      | 123      |  36 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------+-----+------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看出只返回了两条数据。<br>如果我想返回某个位置到另一个位置的记录呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users LIMIT 3,5;</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">| id | username | password                         | age | sex  |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">|  4 | yuan     | 123                              |  36 |    0 |</span><br><span class="line">|  6 | ye       | 123                              |  34 |    0 |</span><br><span class="line">|  7 | chun     | 202cb962ac59075b964b07152d234b70 |  13 |    0 |</span><br><span class="line">|  8 | tian     | 1233                             |  22 |    0 |</span><br><span class="line">|  9 | hui      | 345                              |  18 |    0 |</span><br><span class="line">+<span class="comment">----+----------+----------------------------------+-----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p> 注意：select 语句记录从0开始编号（0，1，2，3，4···）为第1、2、3、4、5···条记录，并且与id号无关，也就是说查询的id号和结果集没有任何的联系，只要排在结果集中第一个位置，那么它就是0，排在第二个位置就是1。<br> 如果只添加一个数字，它表示从第一条记录开始返回，返回这个数字的数据数，如果返回第三条和第四条数据，就需要告诉从第几条返回，返回几条。拓展：在以后PHP当中，进行分页的时候，就会利用LIMIT语句来进行分页效果的实现，在分页效果实现当中，偏移值的计算公式是已经计算好的，计算公式就是当前括号中的页码减1*每一页显示的记录数。</p>
<h2 id="2）将查询结果插入另一个数据表"><a href="#2）将查询结果插入另一个数据表" class="headerlink" title="2）将查询结果插入另一个数据表"></a>2）将查询结果插入另一个数据表</h2><p><strong>INSERT [INTO] tb1_name [(col_name, …)] SELECT col_name  FROM   tb2_name …</strong><br>它可以将查找的结果，存储到指定的数据表。<br>首先再创建一个新的数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE test(</span><br><span class="line">    -&gt; id TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username VARCHAR(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>

<p>下面我们将users表中age大于30的username写入到新建的test表中的username</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT test SELECT username FROM users WHERE age&gt;30;</span><br><span class="line">ERROR 1136 (21S01): Column count doesn't match value count at row 1</span><br></pre></td></tr></table></figure>
<p>出现错误<br>注意：因为test表中需要插入的只有一个字段，所以SELECT结果集中也只有一个字段，在插入时要指定test表中指定字段，因为test表中有两个字段，即使是主键自增也不可以。<br>下面我们知道test表中的username：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT test(username) SELECT username FROM users WHERE age&gt;30;</span><br><span class="line">Query OK, 3 rows affected (0.03 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>查看一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | hao      |</span><br><span class="line">|  2 | yuan     |</span><br><span class="line">|  3 | ye       |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>将age大于30的username插入到了test表中。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><strong>数据记录的操作</strong>：增：INSERT    更：UPDATE    删：DELETE     查：SELECT<br><strong>1. 增 INSERT</strong>:可以通过三种方法进行记录的插入，分别为<br>普通INSERT<br>INSERT SET<br>INSERT SELECT语句<br>（1） INSERT [INTO] tb1_name [(col_name,…)] {VALUES | VALUE} ({expr | DEFUALT},…),(…),…<br>注意：如果col_name被省略，意味着所有的列都要依次被赋值，不可以省略；<br>对于默认编号（AUTO_INCREMENT）的字段，使用NULL/DEFUALT进行插入;<br>而且插入的记录是识别算术，函数和字符表达式的<br>（2）INSERT [INTO]  tb1_name SET col1_name={expr | DEFAULT}, …<br>如：INSERT users2 SET username=’xxx’,password=’xxx’;<br>说明与第一种不同之处在于：此方法可以使用子查询（SubQuery）<br>（3）INSERT [INTO] tb1_name [(col_name, …)] SELECT …<br>此方法可以将查询结果插入到指定数据表中</p>
<p><strong>2. 更 UPDATE</strong>：实际有两种更新语句，单表更新和多表更新（详见第五章)</p>
<p><strong>3. 删 DELETE</strong>:存在两种语法结构，单表删除、多表删除。<br>单表删除：<br>DELETE FROM tb1_name [WHERE where_condition]</p>
<p>如：删除第五条记录：DELETE FROM users WHERE id = 5; 而后再添加记录，那么该条记录不会填充到第六条，而是以顺序填到最后一个</p>
<p>条件表达式<br>对记录进行过滤,如果没有指定WHERE子句,则显示所有记录。<br>在WHERE表达式中,可以使用MySQL支持的函数或运算符。</p>
<p><strong>4. 查 select select_expr</strong><br>[<br>from table_references 表的参照<br>[where where_condition] 条件<br>[group by {col_name|position} [asc|sesc],…记录的分组<br>[having where_condition] 分组时对分组的条件进行设定<br>[order by {col_name|expr|position} [asc|desc]…]对于结果进行排序<br>[limit {[offset,]row_count|row_count OFFSET offset}]限制返回结果的数量<br>]<br><strong>（1）常规</strong><br>SELECT后面可以省略：如SELECT VERSION();/SELECT NOW();/SELECT 3+5;/SELECT id,username FROM users;/SELECT username,id FROM users;</p>
<p>所以查询顺序影响结果的输出顺序！！！</p>
<ul>
<li>表示所有的列</li>
</ul>
<p>可以在查询的列前面加上表名+.  如：SELECT users.id,user2.password FROM users;</p>
<p>当列名称复杂时可以用别名：如 SELECT users.id AS usersid, users.username AS uname FROM users;(注意一下AS)</p>
<p>所以查询的别名也影响输出结果的列名！！！<br><strong>（2）分组</strong><br>查询结果分组：[GROUP BY {col_name | position} [ASC | DESC], … ]</p>
<p>ASC  升序；DESC  降序；</p>
<p>如：SELECT sex FROM users GROUP BY sex/“位置”; 查看性别的分组结果。（一般指定名称就行）</p>
<p>在GROUP BY 进行分组的时候，还可以进行设置分组条件：[HAVING where_condition]</p>
<p>如：SELECT sex FROM users GROUP BY 1 HAVING age &gt; 35; 这个语句错误，原因是sex里面没有age，所以更正为：SELECT sex，age FROM users GROUP BY 1 HAVING age &gt; 35;或者采用聚合函数（max,min,sum等）  如<br>SELECT password FROM users GROUP BY 1 HAVING AVG(age)&gt;10;<br>GROUP BY的规定：<br>1、GROUP BY 后面可以包含多个列，这就是嵌套。<br>2、如果GROUP BY进行了嵌套，数据将在最后一个分组上进行汇总。<br>3、GROUP BY子句中列出来的每个列必须是检索列或有效的表达式（但不能是聚集函数），如果在SELECT中使用了表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。<br>4、除了聚集语句外，SELECT语句中的每一个列都必须在GROUP BY子句中给出。<br>5、如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多个NULL，它们将作为一个分组返回。<br>6、GROUP BY子句必须在WHERE 子句之后，ORDER BY 子句之前。<br><strong>（3）排序</strong><br>还可以对查询分组的结果进行排序：</p>
<p>[ORDER BY {col_name | expr | position} [ASC | DESC], …]</p>
<p>如：SELECT * FROM users ORDER BY id, age DESC; 默认是升序。</p>
<p>除了返回记录的排序还可以对记录进行限制查询结果的数量：</p>
<p>[LIMIT ｛[offset,] row_count | row_count OFFSET offset｝]</p>
<p>如：SELECT * FROM users LIMIT 2; 返回两条记录；</p>
<p>SELECT * FROM users LIMIT 2，2；返回的是偏移值（索引号）为2的记录开始的两条记录（不管升序还是降序，第一条记录的索引号都是0）；</p>
<p><strong>（4）插入记录</strong><br>INSERT [INTO] tb1_name [(col_name, …)] SELECT col_name  FROM   tb2_name …<br>说明:将查询结果插入到指定数据表的列</p>
<p>如：INSERT test(username) SELECT username FROM users WHERE age &gt;= 30; 查找username表里的age&gt;=30的username,插入到test表中的username列————综合一点的</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 约束以及修改数据表</title>
    <url>/2019/12/14/%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%BA%A6%E6%9D%9F%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
    <content><![CDATA[<p>  本章主要讲解外键约束以及其他约束的增加删除操作，通过本章将会对数据表列的操作更加熟练。</p>
<a id="more"></a> 
<h1 id="1-外键约束"><a href="#1-外键约束" class="headerlink" title="1.外键约束"></a>1.外键约束</h1><p><strong>目的</strong>：保持数据一致性，完整性；实现一对一或一对多关系。<br>约束保证数据的完整性和一致性<br>约束分为表级约束和列级约束（根据约束所针对的字段数目的多少决定）<br><strong>列级约束</strong>：只针对表中的一个字段进行约束；<br><strong>表级约束</strong>：针对表中的两个及以上字段进行约束。<br><strong>约束类型包括</strong>：（功能划分）<br>NOT NULL(非空约束)<br>PRIMARY KEY(主键约束)<br>UNIQUE KEY(唯一约束)<br>DEFAULT(默认约束)<br>FOREIGN KEY(外键约束)<br><strong>外键约束的要求</strong>：</p>
<ol>
<li>父表和子表必须使用相同的存储引擎，而且禁止使用临时表<br>子表：具有外键列的表<br>父表：子表参照的表</li>
<li>数据表的存储引擎只能为InnoDB</li>
<li>外键列和参照列必须具有类似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同<br>外键列：加过FOREIGN 关键字的列<br>参照列：外键列所参照的列</li>
<li>外键列和参照列必须创建索引。 如果参照列不存在索引的话，MYSQL将自动创建索引<br>【外键约束】FOREIGN KEY(column) REFERENCES table(key)<br>【显示索引】SHOW INDEXES FROM [table]\G;<br>要创建外键约束必须满足以上四点要求。<h2 id="1）编辑数据表的默认存储引擎："><a href="#1）编辑数据表的默认存储引擎：" class="headerlink" title="1）编辑数据表的默认存储引擎："></a>1）编辑数据表的默认存储引擎：</h2>mysql配置文件（D:\MySQL\MySQL Server 5.5\my.ini   安装路径下）：<br>default-storage-engine=INNODB；<br>（一般默认都为这个）<h2 id="2）创建数据类型相同的外键列和参照列"><a href="#2）创建数据类型相同的外键列和参照列" class="headerlink" title="2）创建数据类型相同的外键列和参照列"></a>2）创建数据类型相同的外键列和参照列</h2>登录客户端，进入test数据库后，让我们来创建一个新的数据表：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE provinces(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; pname varchar(20) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br></pre></td></tr></table></figure>
查看数据表是否采用了我们的默认引擎INNODB<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE provinces;</span><br><span class="line">+<span class="comment">-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table     | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                              |</span><br><span class="line">+<span class="comment">-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| provinces | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`provinces`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`pname`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>可以看到ENGINE=InnoDB，说明设置成功。这样provinces数据表就创建好啦！<br>接下来创建另一个数据表<br>创建一个用户数据表，包括用户的id、姓名，还有存储用户所在的省份信息。以前添加省份信息的话，需要增加省份字段还要添加字符，现在是关系型数据库，并不需要这样做啦，只需要存储省份的id即可。<br>pid参考provinces 的id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE users(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username VARCHAR(10) NOT NULL,</span><br><span class="line">    -&gt; pid BIGINT,</span><br><span class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">    -&gt; );</span><br><span class="line">ERROR 1005 (HY000): Can't <span class="keyword">create</span> <span class="keyword">table</span> <span class="string">'test.users'</span> (errno: <span class="number">150</span>)</span><br></pre></td></tr></table></figure>
<p>居然出现了错误，仔细观察就会发现，pid的数据类型为BIGINT和参考provinces中id的数据类型不一致，所以产生错误。<br>再来创建一次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE users(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username VARCHAR(10) NOT NULL,</span><br><span class="line">    -&gt; pid SMALLINT,</span><br><span class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">    -&gt; );</span><br><span class="line">ERROR 1005 (HY000): Can't <span class="keyword">create</span> <span class="keyword">table</span> <span class="string">'test.users'</span> (errno: <span class="number">150</span>)</span><br></pre></td></tr></table></figure>
<p>此时还是错误，说明大小不仅需要相同，是否有符号位，也必须相同。<br>最后一次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE users(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username VARCHAR(10) NOT NULL,</span><br><span class="line">    -&gt; pid SMALLINT UNSIGNED,</span><br><span class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p>user就是我们创建的子表，provinces就是父表。pid就是外键列， id就是参照列，当为数字的情况下时，要保证长度和是否有符号位相同，字符的情况下可以不同。</p>
<p>provinces的id并没有创建索引，但是系统有没有为我们自动创建呢，答案是肯定的，因为我们使用了主键约束，主键约束在创建的同时会自动创建索引。我们来证明一下是否存在索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEXES FROM provinces;</span><br><span class="line">+<span class="comment">-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| Table     | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | <span class="keyword">Comment</span> | Index_comment |</span><br><span class="line">+<span class="comment">-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| provinces |          <span class="number">0</span> | PRIMARY  |            <span class="number">1</span> | <span class="keyword">id</span>          | A         |           <span class="number">0</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   |      | BTREE      |         |               |</span><br><span class="line">+<span class="comment">-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>这样看的不直观，改一下命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEXES FROM provinces\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: provinces</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: id</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null:</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>:</span><br><span class="line">Index_comment:</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ERROR</span>:</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">query</span> specified</span><br></pre></td></tr></table></figure>

<p>可以看到id字段已经有了索引 （ Column_name: id ）<br>外键列的pid我们并没有创建主键，那么有没有创建索引呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEXES FROM users\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: users</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: id</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null:</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>:</span><br><span class="line">Index_comment:</span><br><span class="line">*************************** <span class="number">2.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">        <span class="keyword">Table</span>: <span class="keyword">users</span></span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: pid</span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: pid</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  Cardinality: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="literal">NULL</span></span><br><span class="line">       Packed: <span class="literal">NULL</span></span><br><span class="line">         <span class="literal">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>:</span><br><span class="line">Index_comment:</span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>一共存在两个索引  Column_name: id （主键索引）      Column_name: pid<br>主键在创建的时候会自动创建索引，外键在创建的时候也会自动创建索引。所以当参照列不是主键的时候不会自动创建索引，需要手动创建。<br>再看一下users数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE users;</span><br><span class="line">+<span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                            |</span><br><span class="line">+<span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| <span class="keyword">users</span> | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`pid`</span> (<span class="string">`pid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`users_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`pid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`provinces`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>其中 KEY <code>pid</code> (<code>pid</code>),是系统自动给我们添加的。</p>
<p>索引和存储引擎会在后面详细介绍。</p>
<h2 id="3）外键约束的参照操作"><a href="#3）外键约束的参照操作" class="headerlink" title="3）外键约束的参照操作"></a>3）外键约束的参照操作</h2><p>CASCADE:从父表删除或更新且自动删除或更新子表中匹配的行<br>SET NULL:从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT  NULL<br>RESTRICT:拒绝对父表的删除或更新操作<br>NO  ACTION:标准SQL的关键字，在MySQL中与RESTRICT相同<br>下面我们使用CASCADE做一个说明：<br>首先创建一个新的数据表和users一样,只是增加CASCADE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE users1(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; username VARCHAR(10) NOT NULL,</span><br><span class="line">    -&gt; pid SMALLINT UNSIGNED,</span><br><span class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>查看一下这个表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE users1;</span><br><span class="line">+<span class="comment">--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table  | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                                                |</span><br><span class="line">+<span class="comment">--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| users1 | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users1`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`pid`</span> (<span class="string">`pid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`users1_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`pid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`provinces`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>其中ON DELETE CASCADE就表示父表中更新或删除记录，子表也同时更新相应的行。<br>要对users1写入记录，就必须要对其父表先写入记录。原因很简单：如果不对父表写入记录，子表的pid将无从参照。<br>对provinces写入记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT provinces(pname) VALUES('A');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT provinces(pname) VALUES('B');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT provinces(pname) VALUES('C');</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p> 查看一下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM provinces;</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| id | pname |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">|  1 | A     |</span><br><span class="line">|  2 | B     |</span><br><span class="line">|  3 | C     |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<p>对users1写入记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT users1(username,pid) VALUES('hua',1);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT users1(username,pid) VALUES('hui',3);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT users1(username,pid) VALUES('yuan',4);</span><br><span class="line">ERROR 1452 (23000): Cannot add or <span class="keyword">update</span> a <span class="keyword">child</span> <span class="keyword">row</span>: a <span class="keyword">foreign</span> <span class="keyword">key</span> <span class="keyword">constraint</span> fails (<span class="string">`test`</span>.<span class="string">`users1`</span>, <span class="keyword">CONSTRAINT</span> <span class="string">`users1_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`pid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`provinces`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>)</span><br><span class="line">mysql&gt; <span class="keyword">INSERT</span> users1(username,pid) <span class="keyword">VALUES</span>(<span class="string">'qing'</span>,<span class="number">3</span>);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p>当我插入第三条记录时发生错误，因为父表中不存在这样的id。<br>  外键约束所关联的父表字段值必须存在，子表中才能创建。<br>查看users1中的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users1;</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">| id | username | pid  |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">|  1 | hua      |    1 |</span><br><span class="line">|  2 | hui      |    3 |</span><br><span class="line">|  4 | qing     |    3 |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>当记录没写入成功时，编号仍然会自动递增，所以是1，2，4；<br>删除父表中id=3的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELETE FROM provinces WHERE id=3;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>注意：删除操作：DELETE FROM tbname WHERE 约束条件（id =3）<br>看一下父表的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM provinces;</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| id | pname |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">|  1 | A     |</span><br><span class="line">|  2 | B     |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>C已经被删除。<br>看一下子表的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM users1;</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">| id | username | pid  |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">|  1 | hua      |    1 |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>pid为3的均被删除。</p>
<p>实际开发中不怎么使用物理外键，因为只有innodb引擎支持，通常使用逻辑外键。</p>
<p>物理外键指的是使用foreign key 作为外键关联另一张的字段的连接方法，而且限定了引擎为InnoDB,而逻辑外键，又叫做事实外键，在定义两张表时，是按照某种结构的方式去定义，不去使用foreign key 来定义。</p>
<h2 id="4）表级约束与列级约束："><a href="#4）表级约束与列级约束：" class="headerlink" title="4）表级约束与列级约束："></a>4）表级约束与列级约束：</h2><ol>
<li>对一个数据列建立的约束，称为列级约束；</li>
<li>对多个数据列建立的约束，称为表级约束；</li>
<li>列级约束既可以在列定义时声明，也可以在列定义后声明；</li>
<li>表级约束只能在列定义后声明；</li>
<li>并不是所有约束都存在表级约束。如NOT NULL 和DEFAULT约束是不存在表级约束的；<br>实际开发过程中，很少使用表级约束。<h2 id="5）修改数据表"><a href="#5）修改数据表" class="headerlink" title="5）修改数据表"></a>5）修改数据表</h2><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3>ALTER TABLE table_name ADD [COLUMN] column_name column_definition [FIRST | AFTER column_name]</li>
</ol>
<p>FIRST :添加到列的第一个位置<br>AFTER column_name：在指定列的后面<br>默认添加到最后。<br>现在我们来实战演练一下，列的添加。<br>先看一个users1的列信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users1;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(10)          | NO   |     | NULL    |                |</span><br><span class="line">| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<p>接下来添加一列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;</span><br><span class="line">Query OK, 1 row affected (0.05 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>查看一下数据表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users1;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(10)          | NO   |     | NULL    |                |</span><br><span class="line">| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |</span><br><span class="line">| age      | tinyint(3) unsigned  | NO   |     | 10      |                |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看出默认插入到最后一列。<br>再使用FIRST插入一列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users1 ADD password VARCHAR(20) NOT NULL FIRST;</span><br><span class="line">Query OK, 1 row affected (0.05 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>再次查看数据表结构就会发现，password在第一例的位置。这里不再演示。<br>使用AFTER插入一列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users1 ADD habital VARCHAR(20) NOT NULL AFTER username;</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>habital被添加在username的后面。</p>
<p><strong>添加多列</strong><br>ALTER TABLE tbl_name ADD [COLUMN] (col_name column_definiton,…)<br>和添加一列基本类似，不再操作。需要注意的是，添加多列时，不能指定位置，只能在列尾添加。</p>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p>ALTER TABLE tbl_name DROP [COLUMN] col_name<br>如：ALTER TABLE user1 DROP truename;删除表user1的truename单列<br>如：ALTER TABLE user1 DROP password,DROP age;删除多列，用逗号分隔开<br>删除password列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users1 DROP password;</span><br><span class="line">Query OK, 1 row affected (0.05 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>查看一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users1;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(10)          | NO   |     | NULL    |                |</span><br><span class="line">| habital  | varchar(20)          | NO   |     | NULL    |                |</span><br><span class="line">| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |</span><br><span class="line">| age      | tinyint(3) unsigned  | NO   |     | 10      |                |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br></pre></td></tr></table></figure>

<p>如果我想删除多列呢？<br>删除多列，通过“,”隔开即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users1 DROP age,DROP habital;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line">Records: 1  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>再查看一下吧</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users1;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(10)          | NO   |     | NULL    |                |</span><br><span class="line">| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="6）添加约束"><a href="#6）添加约束" class="headerlink" title="6）添加约束"></a>6）添加约束</h2><p>当约束不够时，如何增加约束？或者如何删除约束？<br>为此，我们先创建一个新的数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE users2(</span><br><span class="line">    -&gt; username VARCHAR(20) NOT NULL,</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED,</span><br><span class="line">    -&gt; pid TINYINT UNSIGNED</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br></pre></td></tr></table></figure>

<h3 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h3><p>ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARYKEY  [index_type] (index_col_name,…)<br>CONSTRAINT 可以添加也可以不添加，如果添加可以起个名字。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>再来看一下数据表的结构：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users2;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| username | varchar(20)          | NO   |     | NULL    |       |</span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | 0       |       |</span><br><span class="line">| pid      | tinyint(3) unsigned  | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看到id已经变为主键约束。</p>
<h3 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h3><p>ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,…)<br>与主键约束不同的是唯一约束可以有多个。<br>下面我们给pid添加一个唯一约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 ADD UNIQUE (pid);</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>检查一下数据表结构:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users2;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| username | varchar(20)          | NO   |     | NULL    |       |</span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | 0       |       |</span><br><span class="line">| pid      | tinyint(3) unsigned  | YES  | UNI | NULL    |       |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>pid已经被设置为唯一约束。</p>
<h3 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h3><p>ALTER TABLE tb1_name ADD  [CONSTRAINT [symbol]]  FOREIGN KEY [index_name] [index_type] (index_col_name,…)  reference_definition;<br>首先看一下要设置的父表的结构（还是我们之前的provinces）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM provinces;</span><br><span class="line">+<span class="comment">-------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id    | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| pname | varchar(20)          | NO   |     | NULL    |                |</span><br><span class="line">+<span class="comment">-------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>添加一个和id类型一样的列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 ADD cid SMALLINT UNSIGNED;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>接下来设置username的外键约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 ADD FOREIGN KEY (cid) REFERENCES provinces (id);</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>查看一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE users2;</span><br><span class="line">+<span class="comment">--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table  | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                                                                                                 |</span><br><span class="line">+<span class="comment">--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| users2 | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users2`</span> (</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`pid`</span> (<span class="string">`pid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`cid`</span> (<span class="string">`cid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`users2_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`cid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`provinces`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>cid已经被设置为外键约束。</p>
<h3 id="添加-删除默认约束"><a href="#添加-删除默认约束" class="headerlink" title="添加/删除默认约束"></a>添加/删除默认约束</h3><p>ALTER TABLE tbl_name ALTER[COLUMN] col_name{SET DEFAULT literal|DROP DEFAULT}</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 ALTER COLUMN username SET DEFAULT 'pp';</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>查看列信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users2;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| username | varchar(20)          | NO   |     | pp      |       |</span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | 0       |       |</span><br><span class="line">| pid      | tinyint(3) unsigned  | YES  | UNI | NULL    |       |</span><br><span class="line">| cid      | smallint(5) unsigned | YES  | MUL | NULL    |       |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>username的默认值被设置为‘pp’。</p>
<p>下面删除默认约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 ALTER COLUMN username DROP DEFAULT;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>看下是否被删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users2;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| username | varchar(20)          | NO   |     | NULL    |       |</span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | 0       |       |</span><br><span class="line">| pid      | tinyint(3) unsigned  | YES  | UNI | NULL    |       |</span><br><span class="line">| cid      | smallint(5) unsigned | YES  | MUL | NULL    |       |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<p>大功告成！</p>
<h2 id="7）删除约束"><a href="#7）删除约束" class="headerlink" title="7）删除约束"></a>7）删除约束</h2><h3 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h3><p>ALTER TABLE tbl_name DROP PRIMARY KEY<br>不需要指定名称，因为一张表只有一个主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 DROP PRIMARY KEY;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>查看一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM users2;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">| username | varchar(20)          | NO   |     | NULL    |       |</span><br><span class="line">| id       | smallint(5) unsigned | NO   |     | 0       |       |</span><br><span class="line">| pid      | tinyint(3) unsigned  | YES  | UNI | NULL    |       |</span><br><span class="line">| cid      | smallint(5) unsigned | YES  | MUL | NULL    |       |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+-------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h3><p>ALTER TABLE tbl_name DROP {INDEX|KEY} index_name<br>需要指定名称，因为一张表可以有多个唯一约束<br>我们接下来要删除的是唯一约束，所以首先我们应该查看约束的名字：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEXES FROM users2\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: users2</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: pid</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: pid</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>:</span><br><span class="line">Index_comment:</span><br><span class="line">*************************** <span class="number">2.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">        <span class="keyword">Table</span>: users2</span><br><span class="line">   Non_unique: <span class="number">1</span></span><br><span class="line">     Key_name: cid</span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: cid</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  Cardinality: <span class="number">0</span></span><br><span class="line">     Sub_part: <span class="literal">NULL</span></span><br><span class="line">       Packed: <span class="literal">NULL</span></span><br><span class="line">         <span class="literal">Null</span>: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>:</span><br><span class="line">Index_comment:</span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ERROR</span>:</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">query</span> specified</span><br></pre></td></tr></table></figure>
<p>删除pid的约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 DROP KEY pid;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>现在只剩下一个约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEXES FROM users2\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: users2</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: cid</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: cid</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>:</span><br><span class="line">Index_comment:</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ERROR</span>:</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">query</span> specified</span><br></pre></td></tr></table></figure>
<h3 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h3><p>ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol<br>要想删除外键约束，必须知道外键约束的名字；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE users2;</span><br><span class="line">+<span class="comment">--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table  | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                                               |</span><br><span class="line">+<span class="comment">--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| users2 | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users2`</span> (</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`cid`</span> (<span class="string">`cid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`users2_ibfk_1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`cid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`provinces`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以得到外键的名字为 users2_ibfk_1<br>下面进行删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 DROP FOREIGN KEY users2_ibfk_1;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>查看：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE users2;</span><br><span class="line">+<span class="comment">--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table  | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                               |</span><br><span class="line">+<span class="comment">--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| users2 | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users2`</span> (</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`cid`</span> (<span class="string">`cid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到cid还是存在索引的，如果不想要还可以进一步进行删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE users2 DROP KEY cid;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>再来查看一下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE users2;</span><br><span class="line">+<span class="comment">--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table  | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                          |</span><br><span class="line">+<span class="comment">--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| users2 | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users2`</span> (</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`cid`</span> <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>cid的索引已经删除。</p>
<h2 id="8）修改列定义和更名数据表"><a href="#8）修改列定义和更名数据表" class="headerlink" title="8）修改列定义和更名数据表"></a>8）修改列定义和更名数据表</h2><h3 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h3><p>（列名字不存在问题，列的类型或者位置可能存在问题）<br>ALTER TABLE tbl_name MODIFY [COLUMN] col_name colunm_definition   [FIRST | AFTER col_name]</p>
<h3 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h3><p>（既可以修改列定义，也可以修改列名称）<br>ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition  [FIRST|AFTER col_name]</p>
<h3 id="数据表更名"><a href="#数据表更名" class="headerlink" title="数据表更名"></a>数据表更名</h3><p>（列名称和数据表名称尽量不要改动，因为实际使用中可能会有关联，导致存储过程出现问题）<br>方法1<br>ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name<br>方法2（可以修改多张表的名称）<br>RENAME TABLE tbl_name TO new_tbl_name [,tbl_name2 TO new_tbl_name2]…</p>
<h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p><strong>约束按照功能来划分</strong>：<br>not null（非空约束）<br>primary key（主键约束）<br>unique key（唯一约束）<br>default（默认约束）<br>foreign key（外键约束）<br><strong>按照数据列的数目划分</strong>：<br>表级约束<br>列级约束<br><strong>修改数据表的操作</strong>：<br>针对字段的操作：添加/删除字段。修改列定义，修改列名称<br>针对约束的操作：添加/删除约束<br>针对数据表的操作：数据表更名（两种方式）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 数据类型和操作数据表</title>
    <url>/2019/12/14/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
    <content><![CDATA[<p>  本章介绍一些常用的数据类型以及如何操作数据表。</p>
<a id="more"></a> 
<h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h1><h2 id="1）定义："><a href="#1）定义：" class="headerlink" title="1）定义："></a>1）定义：</h2><p>  数据类型是指列、存储过程参数、表达式和局部变量的数据特征，它决定了数据的存储格式，代表了不同的信息类型。</p>
<h2 id="2）整型"><a href="#2）整型" class="headerlink" title="2）整型"></a>2）整型</h2><p>五种整形数据类型：<br>TINYINT（一个字节）       有符号值： -128 – 127   无符号值：0 – 255<br>SMALLINT（两个字节）      有符号值： -32768 – 32767   无符号值：0 – 65536<br>MEDIUMINT（三个字节）     有符号值： -8388608 – 8388607   无符号值：0 – 16777215<br>INT（四个字节）                          更大<br>BIGINT（八个字节）                       最大<br>数据库的优化第一步是要选择合适的数据类型，避免不必要的浪费</p>
<h2 id="3）浮点型"><a href="#3）浮点型" class="headerlink" title="3）浮点型"></a>3）浮点型</h2><p>FLOAT[(M,D)]:    单精度浮点型<br>DOUBLE[(M,D)]:   双精度浮点型<br>M是数字总位数，D是小数位数。</p>
<h2 id="4）日期时间型"><a href="#4）日期时间型" class="headerlink" title="4）日期时间型"></a>4）日期时间型</h2><p>DATE:        支持1000年1月1号——9999年12月31号。<br>DATETIME：   支持1000年1月1号0点——9999年12月31号23点59分59秒。<br>TIMESTAMP（时间戳）:  1970年1月1号0点——2037年。<br>考虑到跨时区的问题，很多时候采用数字取代日期时间类型。</p>
<h2 id="5-字符型"><a href="#5-字符型" class="headerlink" title="5) 字符型"></a>5) 字符型</h2><p>CHAR(M):定长类型，数据不足指定字节数，补空格；  M表示字节数<br>VARCHAR(M):变长类型，数据的字节就是存储的字节； M表示最大的字节数<br>ENUM(‘value1’,;value2’,…..)枚举值，集合中只能选一个；<br>SET(‘value1’,;value2’,…..)集合，在集合中做任意的排列组合，可以选一个值，也可以两个或更多。<br>还有一些：TINYTEXT,TEXY,MEDIUMTEXT.LONGTEXT</p>
<h1 id="2-数据表"><a href="#2-数据表" class="headerlink" title="2.数据表"></a>2.数据表</h1><h2 id="1）定义"><a href="#1）定义" class="headerlink" title="1）定义"></a>1）定义</h2><p>数据表（或称表）是数据库最重要的组成部分之一，是其它对象的基础。</p>
<p>下面我们来创建一个数据表：</p>
<h2 id="1）打开数据库"><a href="#1）打开数据库" class="headerlink" title="1）打开数据库"></a>1）打开数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;mysql -uroot -p</span><br><span class="line">Enter password: ****</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.5.62 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type '<span class="keyword">help</span>;' or '\h' for help. <span class="keyword">Type</span> <span class="string">'\c'</span> <span class="keyword">to</span> <span class="keyword">clear</span> the <span class="keyword">current</span> <span class="keyword">input</span> statement.</span><br></pre></td></tr></table></figure>


<h2 id="2）首先看一下有哪些数据库"><a href="#2）首先看一下有哪些数据库" class="headerlink" title="2）首先看一下有哪些数据库"></a>2）首先看一下有哪些数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| t1                 |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure>

<h2 id="3）下面我们在test数据库中创建数据表，首先打开test数据库"><a href="#3）下面我们在test数据库中创建数据表，首先打开test数据库" class="headerlink" title="3）下面我们在test数据库中创建数据表，首先打开test数据库"></a>3）下面我们在test数据库中创建数据表，首先打开test数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; USE test;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<p>怎么证明当前数据库就是我们打开的test数据库呢？<br>有一个简单的方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATABASE();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| DATABASE() |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| test       |</span><br><span class="line">+<span class="comment">------------+</span></span><br></pre></td></tr></table></figure>
<h2 id="4）创建数据表"><a href="#4）创建数据表" class="headerlink" title="4）创建数据表"></a>4）创建数据表</h2><p>创建数据表:<br>CREATE TABLE [IF NOT EXISTC] table_name(<br>column_name data_type, //colum_namhe是列名称，data_type是数据类型<br>…如：//username VARCHAR(20),20指长度<br>//age TINYINT UNSIGNED(意思是无负数，从0开始),<br>)；<br>注意在数据库中 CREATE TABLE 是必须要有的；而[IF NOT EXISTC]<br>是表示可加可不加，如果数据表已创建且再加上[IF NOT EXISTS]再创建<br>系统不会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE  tb1(</span><br><span class="line">    -&gt; username VARCHAR(20),</span><br><span class="line">    -&gt; age TINYINT UNSIGNED,</span><br><span class="line">    -&gt; salary FLOAT(8,2) UNSIGNED</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>

<p>此表只是演示，不具备实际意义。</p>
<h2 id="5-验证数据表是否真实存在"><a href="#5-验证数据表是否真实存在" class="headerlink" title="5) 验证数据表是否真实存在"></a>5) 验证数据表是否真实存在</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> ;</span><br><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| Tables_in_test |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">| tb1            |</span><br><span class="line">+<span class="comment">----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看出tb1已经存在。<br>当然我们不仅可以查看当前数据库中的列表，还可以查看其它数据库的列表，比如我们查看MySQL中的全部数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES FROM mysql;</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+<span class="comment">---------------------------+</span></span><br><span class="line">24 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>
<p>一共存在24个。<br>刚刚我们FROM某个库查看数据表，那当前数据库会不会发生改变吗？<br>我们再来验证一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATABASE();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| DATABASE() |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| test       |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看出仍然是test数据库。</p>
<h2 id="6）查看数据表的结构"><a href="#6）查看数据表的结构" class="headerlink" title="6）查看数据表的结构"></a>6）查看数据表的结构</h2><p>刚刚已经验证数据表已经创建成功了，那么它的数据结构是我们所创建的吗？答案毋庸置疑，如果不放心，我们可以通过以下方式验证：<br>SHOW TABLES FROM tb1_name<br>此为查看数据表的列结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM tb1;</span><br><span class="line">+<span class="comment">----------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field    | Type                | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">----------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">| username | varchar(20)         | YES  |     | NULL    |       |</span><br><span class="line">| age      | tinyint(3) unsigned | YES  |     | NULL    |       |</span><br><span class="line">| salary   | float(8,2) unsigned | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">----------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="7）插入记录"><a href="#7）插入记录" class="headerlink" title="7）插入记录"></a>7）插入记录</h2><p>既然数据表已经创建好啦，也就是列已经规定好，它可以有很多不固定的行（通过下面列子可以理解这里的行与列），行称之为记录，那么接下来我们写入记录。<br>INSERT [INTO] tb1_name [(col_name,…)] VALUES(val,…)<br>tbl_name 表的名字 省略[(col_name,…)]<br>INSERT 表名 VALUES （‘名字’，年龄，工资）；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb1 VALUES('xiaoming',18,12342.21);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>如果少输入一组数据会怎么样呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb1 VALUES('xiaohua',12342.21);</span><br><span class="line">ERROR 1136 (21S01): Column count doesn't match value count at row 1</span><br></pre></td></tr></table></figure>
<p>INSERT [INTO] tbl_name [(列名1，列名2)]VALUES(赋值,赋值);给特需位置赋值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb1 (username,salary)VALUES('xiaogou',321.12);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>

<h2 id="8-查看记录"><a href="#8-查看记录" class="headerlink" title="8)查看记录"></a>8)查看记录</h2><p>SELECT expr,… FORM ta1_name<br>SELECT 真实的用法很复杂，这里简单的使用一下，后面会有系统的介绍。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tb1;</span><br><span class="line">+<span class="comment">----------+------+----------+</span></span><br><span class="line">| username | age  | salary   |</span><br><span class="line">+<span class="comment">----------+------+----------+</span></span><br><span class="line">| xiaoming |   18 | 12342.21 |</span><br><span class="line">| xiaogou  | NULL |   321.12 |</span><br><span class="line">+<span class="comment">----------+------+----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>xiaogou的age我们没有设置，因此为NULL。</p>
<h2 id="9）空值与非空"><a href="#9）空值与非空" class="headerlink" title="9）空值与非空"></a>9）空值与非空</h2><p>我们在网站填写表格时，经常会遇到，此项必填的情况，那么在数据表中我们应该怎么设置呢？<br>设置字段(标签)的属性：空值与非空<br>NULL, 字段值可以为空<br>NOT NULL,字段值禁止为空<br>使用方式：<br>CREATE TABEL tb1(<br>    username VARCHAR(20) NOT NULL,<br>);<br>接下来我们再创建一个数据表，加入空值与非空的控制。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb2(</span><br><span class="line">    -&gt; name VARCHAR(20) NOT NULL,</span><br><span class="line">    -&gt; age TINYINT UNSIGNED NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>验证一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM tb2;</span><br><span class="line">+<span class="comment">-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">| Field | Type                | Null | Key | Default | Extra |</span><br><span class="line">+<span class="comment">-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">| name  | varchar(20)         | NO   |     | NULL    |       |</span><br><span class="line">| age   | tinyint(3) unsigned | YES  |     | NULL    |       |</span><br><span class="line">+<span class="comment">-------+---------------------+------+-----+---------+-------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看到name的Null为NO，age的Null为YES<br>接下来，插入记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb2 VALUES('xiaohua',18);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>当年龄为NULL时：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb2 VALUES('xiaoxiao',NULL);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>当name为NULL时：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb2 VALUES(NULL,18);</span><br><span class="line">ERROR 1048 (23000): Column 'name' cannot be null</span><br></pre></td></tr></table></figure>
<p>出现错误，name不能为null。</p>
<h2 id="10）自动编号"><a href="#10）自动编号" class="headerlink" title="10）自动编号"></a>10）自动编号</h2><p>在记录时，我们需要保证记录的唯一性，即在数据表中这条记录不存在重复。此时我们可以通过添加AUTO_INCREAMENT属性来实现自动编号。<br>AUTO_INCREAMENT自动编号，且必须与主键组合使用；<br>默认情况下，起始值为1，每次的增量为1。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb3(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">    -&gt; username VARCHAR(30) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</span><br></pre></td></tr></table></figure>

<p>出现错误there can be only one auto column and it must be defined as a key，所以我们必须要了解主键。</p>
<h2 id="11）主键-PRIMARY-KEY"><a href="#11）主键-PRIMARY-KEY" class="headerlink" title="11）主键 PRIMARY KEY"></a>11）主键 PRIMARY KEY</h2><p>主键约束<br>每张表只能存在一个主键<br>主键保证记录的唯一性<br>主键自动为NOT NULL<br>要注意AUTO_INCREAMENT必须与主键一起使用。</p>
<p>下面我们重新创建一个数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb3(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -&gt; username VARCHAR(30) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p>查看一下这个数据表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM tb3;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(30)          | NO   |     | NULL    |                |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看到id自动为NO NULL。KEY为PRIMARY</p>
<p>插入多条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb3(username) VALUES('hua');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT tb3(username) VALUES('hui');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT tb3(username) VALUES('hao');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>因为我们是为部分值赋值，所以不能省略（username）</p>
<p>检查是否自动编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tb3;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | hua      |</span><br><span class="line">|  2 | hui      |</span><br><span class="line">|  3 | hao      |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>保证了记录的唯一性。</p>
<p>一开始我们提到AUTO_INCREAMENT必须与主键一起使用，那么主键是否必须与AUTO_INCREAMENT一起使用呢？下面验证一下吧！<br>再创建一个数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb4(</span><br><span class="line">    -&gt; id SMALLINT PRIMARY KEY,</span><br><span class="line">    -&gt; username VARCHAR(20) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>注意id没有加入自动编码。<br>插入几条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb4 VALUES(1,'chun');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT tb4 VALUES(25,'xiao');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT tb4 VALUES(18,'yue');</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>查看记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tb4;</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">| id | username |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">|  1 | chun     |</span><br><span class="line">| 18 | yue      |</span><br><span class="line">| 25 | xiao     |</span><br><span class="line">+<span class="comment">----+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以插入相同的id吗？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb4 VALUES(18,'ye');</span><br><span class="line">ERROR 1062 (23000): Duplicate entry '18' for key 'PRIMARY'</span><br></pre></td></tr></table></figure>
<p>提示错误：不能多次插入18<br>因此AUTO_INCREAMENT必须与主键一起使用，主键可以不与AUTO_INCREAMENT一起使用。</p>
<h2 id="12）唯一约束-UNIQUE-KEY"><a href="#12）唯一约束-UNIQUE-KEY" class="headerlink" title="12）唯一约束 UNIQUE KEY"></a>12）唯一约束 UNIQUE KEY</h2><ol>
<li>另一个保证记录唯一性的方法：唯一约束。</li>
<li>唯一约束可以保证记录的唯一性</li>
<li>唯一约束的字段可以为空值（NULL）</li>
<li>每张数据表可以存在多个唯一约束</li>
</ol>
<p>下面创建一个既有主键约束又有唯一约束的数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb5(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -&gt; username VARCHAR(20) NOT NULL UNIQUE KEY,</span><br><span class="line">    -&gt; age TINYINT UNSIGNED</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p>查看数据表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM tb5;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(20)          | NO   | UNI | NULL    |                |</span><br><span class="line">| age      | tinyint(3) unsigned  | YES  |     | NULL    |                |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>
<p>id为主键约束，username为唯一约束。<br>添加记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb5(username,age) VALUES('hua',18);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT tb5(username,age) VALUES('hua',18);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry 'hua' for key 'username'</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT tb5(username,age) VALUES('hao',18);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>当插入第二个‘hua’时，出现错误提示，这就是唯一约束。</p>
<h2 id="13）默认约束-DEFAULT"><a href="#13）默认约束-DEFAULT" class="headerlink" title="13）默认约束 DEFAULT"></a>13）默认约束 DEFAULT</h2><p>当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。<br>首先还是创建一个数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tb6(</span><br><span class="line">    -&gt; id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -&gt; username VARCHAR(20) NOT NULL UNIQUE KEY,</span><br><span class="line">    -&gt; sex ENUM('1','2','3') DEFAULT '3'</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br></pre></td></tr></table></figure>
<p>再查看一下结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM tb6;</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| username | varchar(20)          | NO   | UNI | NULL    |                |</span><br><span class="line">| sex      | enum('1','2','3')    | YES  |     | 3       |                |</span><br><span class="line">+<span class="comment">----------+----------------------+------+-----+---------+----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure>

<p>sex（性别）可以为NULL，‘1’表示男，‘2’表示女，‘3’表示保密。（不要想歪）<br>加入一条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT tb6 (username) VALUES ('hui');</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>查看一下记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM tb6;</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">| id | username | sex  |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">|  1 | hui      | 3    |</span><br><span class="line">+<span class="comment">----+----------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>sex在不赋值的情况下，默认为3。</p>
<h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p><strong>数据类型</strong><br>整型：tinyint； smallint； int<br>字符型：varchar(); char()<br>浮点型：float(m,n); double(m,n)<br>日期时间型<br><strong>数据表操作</strong><br>创建表create table tablename，<br>查看数据库中的表show tables from dataname，<br>查看表的属性字段show columus from tablename，<br>插入记录insert tablename (字段) values (值)，<br>查询表的记录select  * from tablename<br><strong>字段属性</strong><br>主键：主键的记录是唯一的，不能为空。一张表中只能有一个字段是主键。aout_increment:自动编号，从1开始，每次增加1，只能是主键。<br>唯一约束：记录的值是唯一的，可以为空。一张表中可以有多个字段是唯一约束。<br>默认约束：当插入记录时，没有明确为字段赋值时，则自动赋默认值。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 初识数据库</title>
    <url>/2019/12/13/%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>   本章节我们将初步的了解数据库，学习如何启动关闭服务器以及创建数据库的过程。</p>
<a id="more"></a> 
<h1 id="1-连接本地服务器"><a href="#1-连接本地服务器" class="headerlink" title="1.连接本地服务器"></a>1.连接本地服务器</h1><p>注意大小写： 密码是 -P       端口号是 -p<br>清屏：cls<br>mysql -V    (version)   –输出版本信息并且退出<br>mysql -u(用户名)root   -p（密码） -P(端口号) 3306   -h(服务器名称)172.0.0.1</p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure>
<h3 id="再连接到本地服务器"><a href="#再连接到本地服务器" class="headerlink" title="再连接到本地服务器"></a>再连接到本地服务器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;mysql -uroot -p -P3306 -h127.0.0.1</span><br><span class="line">Enter password: ****</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is 1</span><br><span class="line">Server version: 5.5.62 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type '<span class="keyword">help</span>;' or '\h' for help. <span class="keyword">Type</span> <span class="string">'\c'</span> <span class="keyword">to</span> <span class="keyword">clear</span> the <span class="keyword">current</span> <span class="keyword">input</span> statement.</span><br></pre></td></tr></table></figure>
<p>其中-u后面跟的是你的用户名，输入密码后即连接。当为连接本地服务器时，<br>-P与-h可以省略。</p>
<h3 id="退出连接"><a href="#退出连接" class="headerlink" title="退出连接"></a>退出连接</h3><p>MySQL的退出：<br>mysql &gt; exit;<br>mysql &gt; quit;<br>mysql &gt; \q</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>
<h3 id="关闭服务器"><a href="#关闭服务器" class="headerlink" title="关闭服务器"></a>关闭服务器</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;net stop mysql</span><br><span class="line">MySQL 服务正在停止.</span><br><span class="line">MySQL 服务已成功停止。</span><br></pre></td></tr></table></figure>
<p>CMD命令 ： cls清屏。</p>
<h1 id="2-修改提示符"><a href="#2-修改提示符" class="headerlink" title="2.修改提示符"></a>2.修改提示符</h1><p>MySQL提示符：<br>参数　　　　　　　　　　　　描述<br>＼Ｄ　　　　　　　　　　　　完整的日期<br>＼ｄ　　　　　　　　　　　　当前数据库<br>＼ｈ　　　　　　　　　　　　服务器名称<br>＼ｕ　　　　　　　　　　　　当前用户</p>
<p>修改mysql提示符有两种方式：<br>1）在连接客户端时使用：mysql -uroot -p –prompt \h      /<em>\h是表示以服务器名作为提示符</em>/<br>2）在连接客户端后使用：mysql prompt mysql&gt;         /<em>又会变为“mysql&gt;”为提示符</em>/</p>
<h3 id="开启服务后，我们可以在连接客户端时就行修改提示符："><a href="#开启服务后，我们可以在连接客户端时就行修改提示符：" class="headerlink" title="开启服务后，我们可以在连接客户端时就行修改提示符："></a>开启服务后，我们可以在连接客户端时就行修改提示符：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;mysql -uroot -proot --prompt \u</span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.5.62 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type '<span class="keyword">help</span>;' or '\h' for help. <span class="keyword">Type</span> <span class="string">'\c'</span> <span class="keyword">to</span> <span class="keyword">clear</span> the <span class="keyword">current</span> <span class="keyword">input</span> statement.</span><br><span class="line"></span><br><span class="line">root</span><br></pre></td></tr></table></figure>
<p>修改为了root</p>
<h3 id="连接客户端以后可以更改："><a href="#连接客户端以后可以更改：" class="headerlink" title="连接客户端以后可以更改："></a>连接客户端以后可以更改：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root prompt \u &gt;</span><br><span class="line">PROMPT <span class="keyword">set</span> <span class="keyword">to</span> <span class="string">'\u &gt;'</span></span><br><span class="line">root &gt;</span><br></pre></td></tr></table></figure>
<p>设置为了root &gt;</p>
<h1 id="3-常用命令及语法规则"><a href="#3-常用命令及语法规则" class="headerlink" title="3.常用命令及语法规则"></a>3.常用命令及语法规则</h1><h3 id="常用的命令："><a href="#常用的命令：" class="headerlink" title="常用的命令："></a>常用的命令：</h3><p>1) SELECT VERSION（）;显示当前版本<br>2) SELECT NOW（）;显示当前日期<br>3) SELECT USER（）;显示当前用户</p>
<h3 id="语句的规范："><a href="#语句的规范：" class="headerlink" title="语句的规范："></a>语句的规范：</h3><p>1) 关键字和函数名全部大写;<br>2) 数据库名和表名、字段全部小写;<br>3) 必须以分号结尾;</p>
<h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;SELECT VERSION();</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| VERSION() |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| 5.5.62    |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="不加分号结尾"><a href="#不加分号结尾" class="headerlink" title="不加分号结尾"></a>不加分号结尾</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">root &gt;SELECT VERSION()</span><br><span class="line">    -&gt;</span><br><span class="line">    -&gt;</span><br><span class="line">    -&gt;</span><br><span class="line">    -&gt;</span><br></pre></td></tr></table></figure>

<h3 id="如果使用小写："><a href="#如果使用小写：" class="headerlink" title="如果使用小写："></a>如果使用小写：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;select version();</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| version() |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">| 5.5.62    |</span><br><span class="line">+<span class="comment">-----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>也可以通过，只是我们一般默认大写。</p>
<h1 id="4-操作数据库"><a href="#4-操作数据库" class="headerlink" title="4.操作数据库"></a>4.操作数据库</h1><h2 id="1）创建数据库"><a href="#1）创建数据库" class="headerlink" title="1）创建数据库"></a>1）创建数据库</h2><p>CREATE ｛DATABASE | SCHEMA｝[IF NOT EXITS]  db_name</p>
<p><strong>说明：</strong><br>{A|B}：A和B选一个；<br>[ A ]: 可加也可不加；</p>
<h3 id="创建一个t1数据库"><a href="#创建一个t1数据库" class="headerlink" title="创建一个t1数据库"></a>创建一个t1数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;CREATE DATABASE t1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>
<h3 id="再创建一个t1数据库"><a href="#再创建一个t1数据库" class="headerlink" title="再创建一个t1数据库"></a>再创建一个t1数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;CREATE DATABASE t1;</span><br><span class="line">ERROR 1007 (HY000): Can't <span class="keyword">create</span> <span class="keyword">database</span> <span class="string">'t1'</span>; database exists</span><br></pre></td></tr></table></figure>
<p>就会产生错误<br>如果加上IF NOT EXISTS</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;CREATE DATABASE IF NOT EXISTS t1;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>就不会报错，只有一个警告。<br>下面我们查看警告信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;SHOW WARNINGS;</span><br><span class="line">+<span class="comment">-------+------+---------------------------------------------+</span></span><br><span class="line">| Level | Code | Message                                     |</span><br><span class="line">+<span class="comment">-------+------+---------------------------------------------+</span></span><br><span class="line">| Note  | 1007 | Can't <span class="keyword">create</span> <span class="keyword">database</span> <span class="string">'t1'</span>; database exists |</span><br><span class="line">+<span class="comment">-------+------+---------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看出t1数据库已经存在，不能创建。</p>
<h2 id="2）设置编码格式"><a href="#2）设置编码格式" class="headerlink" title="2）设置编码格式"></a>2）设置编码格式</h2><p>[DEFAULT]  CHARACTE SET [=] charset_name<br>刚刚在创建数据库t1时，我们并没有设置其编码格式，因此为默认的编码（utf8）下面进行验证：</p>
<h3 id="查看编码格式"><a href="#查看编码格式" class="headerlink" title="查看编码格式"></a>查看编码格式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;SHOW CREATE DATABASE t1;</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------------+</span></span><br><span class="line">| Database | <span class="keyword">Create</span> <span class="keyword">Database</span>                                             |</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------------+</span></span><br><span class="line">| t1       | <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`t1`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> |</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="创建其它编码的数据库"><a href="#创建其它编码的数据库" class="headerlink" title="创建其它编码的数据库"></a>创建其它编码的数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET gbk;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">root &gt;SHOW CREATE DATABASE t2;</span><br><span class="line">+<span class="comment">----------+------------------------------------------------------------+</span></span><br><span class="line">| Database | <span class="keyword">Create</span> <span class="keyword">Database</span>                                            |</span><br><span class="line">+<span class="comment">----------+------------------------------------------------------------+</span></span><br><span class="line">| t2       | <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`t2`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET gbk */</span> |</span><br><span class="line">+<span class="comment">----------+------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>当我们又想要更改数据库t2的编码格式时，如果使用删掉再重新创建的方式，无疑浪费我们的时间，因此我们使用如下方式：<br>ALERT ｛DATABASE | SCHEMA｝[db_name]<br>[DEFAULT] CHARACTE SET [=]charset_name</p>
<h3 id="改变编码格式"><a href="#改变编码格式" class="headerlink" title="改变编码格式"></a>改变编码格式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;ALTER DATABASE t2 CHARACTER SET utf8;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">root &gt;SHOW CREATE DATABASE t2;</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------------+</span></span><br><span class="line">| Database | <span class="keyword">Create</span> <span class="keyword">Database</span>                                             |</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------------+</span></span><br><span class="line">| t2       | <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`t2`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> |</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="3-查看当前服务器下的数据库"><a href="#3-查看当前服务器下的数据库" class="headerlink" title="3)查看当前服务器下的数据库"></a>3)查看当前服务器下的数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ｛<span class="keyword">DATABASES</span> | SCHEMAS｝</span><br><span class="line">root &gt;<span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| t1                 |</span><br><span class="line">| t2                 |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看到t1，t2 已经被加入进去，而且里面还有MySQL自带的四个数据库。</p>
<h2 id="4-删除数据库"><a href="#4-删除数据库" class="headerlink" title="4)删除数据库"></a>4)删除数据库</h2><p>DORP ｛DATABASE | SCHEMA｝[IF EXISTS] db_name;</p>
<h3 id="删除t2数据库"><a href="#删除t2数据库" class="headerlink" title="删除t2数据库"></a>删除t2数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;DROP DATABASE IF EXISTS t2;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>
<h3 id="再次查看数据库"><a href="#再次查看数据库" class="headerlink" title="再次查看数据库"></a>再次查看数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root &gt;SHOW DATABASES;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| t1                 |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p> 可以看出t2已经被删除</p>
<h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p><strong>MySQL默认端口号</strong>：3306<br><strong>MySQL中的超级用户</strong>：root</p>
<p><strong>SQL 中最重要的 DDL 语句:</strong><br>CREATE DATABASE - 创建新数据库<br>ALTER DATABASE - 修改数据库<br>DROP DATABASE - 删除数据库<br>（尚未用到）<br>CREATE TABLE - 创建新表<br>ALTER TABLE - 变更（改变）数据库表<br>DROP TABLE - 删除表<br>CREATE INDEX - 创建索引（搜索键）<br>DROP INDEX - 删除索引</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2019/12/11/JavaAlgsSelectionSort/</url>
    <content><![CDATA[<p>Welcome to my Blog! If you get any problems when looking after my Blog, you can contact me on <a href="https://github.com/Qu-jq/Qu-jq.github.io" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="选择排序算法"><a href="#选择排序算法" class="headerlink" title="选择排序算法"></a>选择排序算法</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><ol>
<li><p>假设数组第一个数为最小</p>
</li>
<li><p>查找整个数组，看是否有比这个数更小的，<br>如果有，则互相调换数据，循坏过后，找到的数据即为整个数组最小的数</p>
</li>
<li><p>再假设第二个数据为最小的，此时从第二个数据开始查找最小的数</p>
</li>
<li><p>依次循环</p>
<a id="more"></a> 
<h4 id="核心思想："><a href="#核心思想：" class="headerlink" title="核心思想："></a>核心思想：</h4><p>先找到n个元素中最小的数，再找n-1个元素中最小的数，依次往下……</p>
</li>
</ol>
<p>时间复杂度为O(n^2)</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 从小到大排序</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] Arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> flush;<span class="comment">//中间缓存数据</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> minIndex = i ;<span class="comment">//最小数的索引</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;Arr.length; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(Arr[j]&lt;=Arr[minIndex]) &#123;</span><br><span class="line">					minIndex = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//如果有比Arr[minIndex]更小的数，互相替换</span></span><br><span class="line">			<span class="keyword">if</span>(minIndex != i) &#123;</span><br><span class="line">				flush = Arr[minIndex];</span><br><span class="line">				Arr[minIndex] = Arr[i];</span><br><span class="line">				Arr[i] = flush;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] Arr = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">342</span>,<span class="number">23</span>,<span class="number">234</span>,<span class="number">65</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		selectionSort(Arr) ;</span><br><span class="line">		System.out.println(Arrays.toString(Arr));<span class="comment">//[2, 3, 3, 4, 5, 23, 65, 67, 234, 342]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2019/12/11/JavaAlgsQuickSort/</url>
    <content><![CDATA[<p>Welcome to my Blog! This is my very first post. If you get any problems when looking after my Blog, you can contact me on <a href="https://github.com/Qu-jq/Qu-jq.github.io" target="_blank" rel="noopener">GitHub</a>.</p>
<h3 id="算法的描述"><a href="#算法的描述" class="headerlink" title="算法的描述"></a>算法的描述</h3><h4 id="快速排序-—分而治之的思想"><a href="#快速排序-—分而治之的思想" class="headerlink" title="快速排序    —分而治之的思想"></a>快速排序    —分而治之的思想</h4><ol>
<li><p>以第一个元素为基准pivot，小于基准的在数组左边left，大于的在数组右边right，分成两个部分left–pivot–right ,这样就找到pivot所在位置；</p>
</li>
<li><p>再对上一步得到的两个区间分别使用第一步；</p>
</li>
<li><p>知道划分到只剩一个元素为止，此时排序也就结束。</p>
<a id="more"></a> 
<h4 id="核心思想："><a href="#核心思想：" class="headerlink" title="核心思想："></a>核心思想：</h4></li>
</ol>
<p>每划分一个确定一次元素的位置，一共需要划分logn次，而确定位置需要n个操作,<br>所以算法的复杂度为O(nlogn)</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 快速排序API</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quikSort(<span class="keyword">int</span>[] Arr) &#123;</span><br><span class="line">		doSort(Arr,<span class="number">0</span>,Arr.length-<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> Arr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 递归调用自身，不断划分  ----分而治之</span></span><br><span class="line"><span class="comment">	 * 每划分一次，确定一个元素的位置</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(<span class="keyword">int</span>[] Arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">			<span class="keyword">int</span> correctIndex = partition(Arr, start, end);<span class="comment">//每次调用次函数，就将索引correctIndex上放置正确的数据</span></span><br><span class="line">			doSort(Arr, start, correctIndex - <span class="number">1</span>);</span><br><span class="line">			doSort(Arr, correctIndex+<span class="number">1</span>, end);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 找到基准数所在的正确位置</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] Arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> pivot = Arr[start];<span class="comment">//取第一个数为基准</span></span><br><span class="line">		<span class="keyword">int</span> pivotIndex = start;</span><br><span class="line">		<span class="keyword">while</span>(start&lt;end) &#123;</span><br><span class="line">			<span class="comment">//start和end移动的顺序不能改变，如果反过来，就会把大于基准数的数交换到第一个数的位置</span></span><br><span class="line">			<span class="keyword">while</span>(Arr[end]&gt;=pivot &amp;&amp; end&gt;start) &#123;</span><br><span class="line">				end--;<span class="comment">//当满足右边的数大于基准的数时，指针往左偏移</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(Arr[start]&lt;=pivot &amp;&amp; end&gt;start) &#123;</span><br><span class="line">				start++;<span class="comment">//当满足左边的数小于基准的数时，指针往左偏移</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将不满足左右两边的大小的数据交换位置</span></span><br><span class="line">			swap(Arr,start, end);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//start=end时，将start或者end处的数据与基准处的数据交换，这样就得到基准数据的正确位置</span></span><br><span class="line">		swap(Arr,start, pivotIndex);</span><br><span class="line">		<span class="keyword">return</span> start;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 数据交换</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> idx</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> idy</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] Arr, <span class="keyword">int</span> idx, <span class="keyword">int</span> idy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> swap = Arr[idx];</span><br><span class="line">		Arr[idx] = Arr[idy];</span><br><span class="line">		Arr[idy] = swap;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] Arr = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">44</span>, <span class="number">111</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">		QuickSort quickSort = <span class="keyword">new</span> QuickSort();</span><br><span class="line">		<span class="keyword">int</span>[] sortedArr = quickSort.quikSort(Arr);</span><br><span class="line">		System.out.println(Arrays.toString(sortedArr));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
