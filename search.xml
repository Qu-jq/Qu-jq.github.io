<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一章初识数据库</title>
    <url>/2019/12/13/%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>后续更新</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA Algorithms:Selection Sort</title>
    <url>/2019/12/11/JavaAlgsSelectionSort/</url>
    <content><![CDATA[<p>Welcome to my Blog! If you get any problems when looking after my Blog, you can contact me on <a href="https://github.com/Qu-jq/Qu-jq.github.io" target="_blank" rel="noopener">GitHub</a>.</p>
<p>##选择排序算法</p>
<h3 id="The-description-of-algorithms"><a href="#The-description-of-algorithms" class="headerlink" title="The description of algorithms"></a>The description of algorithms</h3><ol>
<li><p>假设数组第一个数为最小</p>
</li>
<li><p>查找整个数组，看是否有比这个数更小的，<br>如果有，则互相调换数据，循坏过后，找到的数据即为整个数组最小的数</p>
</li>
<li><p>再假设第二个数据为最小的，此时从第二个数据开始查找最小的数</p>
</li>
<li><p>依次循环</p>
<h4 id="核心思想："><a href="#核心思想：" class="headerlink" title="核心思想："></a>核心思想：</h4><p>先找到n个元素中最小的数，再找n-1个元素中最小的数，依次往下……</p>
</li>
</ol>
<p>时间复杂度为O(n^2)</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 从小到大排序</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] Arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> flush;<span class="comment">//中间缓存数据</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> minIndex = i ;<span class="comment">//最小数的索引</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;Arr.length; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(Arr[j]&lt;=Arr[minIndex]) &#123;</span><br><span class="line">					minIndex = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//如果有比Arr[minIndex]更小的数，互相替换</span></span><br><span class="line">			<span class="keyword">if</span>(minIndex != i) &#123;</span><br><span class="line">				flush = Arr[minIndex];</span><br><span class="line">				Arr[minIndex] = Arr[i];</span><br><span class="line">				Arr[i] = flush;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] Arr = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">342</span>,<span class="number">23</span>,<span class="number">234</span>,<span class="number">65</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		selectionSort(Arr) ;</span><br><span class="line">		System.out.println(Arrays.toString(Arr));<span class="comment">//[2, 3, 3, 4, 5, 23, 65, 67, 234, 342]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Algorithms:Quick Sort</title>
    <url>/2019/12/11/JavaAlgsQuickSort/</url>
    <content><![CDATA[<p>Welcome to my Blog! This is my very first post. If you get any problems when looking after my Blog, you can contact me on <a href="https://github.com/Qu-jq/Qu-jq.github.io" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="The-description-of-algorithms"><a href="#The-description-of-algorithms" class="headerlink" title="The description of algorithms"></a>The description of algorithms</h3><h4 id="快速排序-—分而治之的思想"><a href="#快速排序-—分而治之的思想" class="headerlink" title="快速排序    —分而治之的思想"></a>快速排序    —分而治之的思想</h4><ol>
<li><p>以第一个元素为基准pivot，小于基准的在数组左边left，大于的在数组右边right，分成两个部分left–pivot–right ,这样就找到pivot所在位置；</p>
</li>
<li><p>再对上一步得到的两个区间分别使用第一步；</p>
</li>
<li><p>知道划分到只剩一个元素为止，此时排序也就结束。</p>
</li>
</ol>
<h4 id="核心思想："><a href="#核心思想：" class="headerlink" title="核心思想："></a>核心思想：</h4><p>每划分一个确定一次元素的位置，一共需要划分logn次，而确定位置需要n个操作,<br>所以算法的复杂度为O(nlogn)</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 快速排序API</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quikSort(<span class="keyword">int</span>[] Arr) &#123;</span><br><span class="line">		doSort(Arr,<span class="number">0</span>,Arr.length-<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> Arr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 递归调用自身，不断划分  ----分而治之</span></span><br><span class="line"><span class="comment">	 * 每划分一次，确定一个元素的位置</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(<span class="keyword">int</span>[] Arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">			<span class="keyword">int</span> correctIndex = partition(Arr, start, end);<span class="comment">//每次调用次函数，就将索引correctIndex上放置正确的数据</span></span><br><span class="line">			doSort(Arr, start, correctIndex - <span class="number">1</span>);</span><br><span class="line">			doSort(Arr, correctIndex+<span class="number">1</span>, end);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 找到基准数所在的正确位置</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] Arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> pivot = Arr[start];<span class="comment">//取第一个数为基准</span></span><br><span class="line">		<span class="keyword">int</span> pivotIndex = start;</span><br><span class="line">		<span class="keyword">while</span>(start&lt;end) &#123;</span><br><span class="line">			<span class="comment">//start和end移动的顺序不能改变，如果反过来，就会把大于基准数的数交换到第一个数的位置</span></span><br><span class="line">			<span class="keyword">while</span>(Arr[end]&gt;=pivot &amp;&amp; end&gt;start) &#123;</span><br><span class="line">				end--;<span class="comment">//当满足右边的数大于基准的数时，指针往左偏移</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(Arr[start]&lt;=pivot &amp;&amp; end&gt;start) &#123;</span><br><span class="line">				start++;<span class="comment">//当满足左边的数小于基准的数时，指针往左偏移</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将不满足左右两边的大小的数据交换位置</span></span><br><span class="line">			swap(Arr,start, end);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//start=end时，将start或者end处的数据与基准处的数据交换，这样就得到基准数据的正确位置</span></span><br><span class="line">		swap(Arr,start, pivotIndex);</span><br><span class="line">		<span class="keyword">return</span> start;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 数据交换</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> Arr</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> idx</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> idy</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] Arr, <span class="keyword">int</span> idx, <span class="keyword">int</span> idy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> swap = Arr[idx];</span><br><span class="line">		Arr[idx] = Arr[idy];</span><br><span class="line">		Arr[idy] = swap;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] Arr = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">44</span>, <span class="number">111</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">		QuickSort quickSort = <span class="keyword">new</span> QuickSort();</span><br><span class="line">		<span class="keyword">int</span>[] sortedArr = quickSort.quikSort(Arr);</span><br><span class="line">		System.out.println(Arrays.toString(sortedArr));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
